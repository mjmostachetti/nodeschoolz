// Generated by CoffeeScript 1.7.1
(function() {
  var InspectorResult, STYLER_CSS, baseURL, clearHighlight, clearPseudos, createInspectorElements, detectIframeReload, dispatchLoadedEvent, elements, embed, err, fakePseudos, getBestRule, getEmbedMode, getIframeMode, getOutlineId, getSessionId, getSortedSelectors, getStyleSheets, getStyles, highlightElementArea, host, iframeHidden, iframeWidth, inheritProperties, init, inspectOnActivation, inspectorAreaElement, inspectorControlsElement, inspectorResult, isActive, isInspecting, isResizing, isSupportedAgent, keyMatchesCommand, keyboardCommandText, keyboardCommands, lastRightClickedElement, lastStyledElement, lastStyledElementJson, loadSocketIO, makeURLUnique, nameForElement, onConnected, onInspectorMove, onInspectorSelect, onKeyDown, onPostMessage, openConsole, popupWindow, publicAPI, renderIframes, replaceMedia, replacePseudos, resizerMouseDown, resizerMouseMove, resizerMouseUp, scanTree, sendMessage, serializeElement, setElementPseudo, setIframeMode, setMedia, setStyleSheetData, setupMatchMediaListeners, showMessage, socket, startEmbedMode, startInspector, startResizerX, stopInspector, storage, toggleApplicationMode, toggleIframeMode, tryToggleHideIframe, ua, unserializeElement, util, _addStyleProp, _dispatch, _fixPrototypeJSON, _getStyleData, _iframeUnloadListened, _inspectorCallback, _inspectorHideTimeout, _matchMediaListeners, _media, _mediaChangeListener, _relativeURL, _scanBuffer, _scanElements, _scanNode, _scanResults, _scanResultsCache, _scanTimeout, _styleElementsCache, _treeWalkerFilter,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  host = '';

  isActive = false;

  popupWindow = null;

  socket = null;

  if (window.__styler_embed) {
    return;
  }

  try {
    storage = this.sessionStorage;
  } catch (_error) {
    err = _error;
    storage = this.localStorage;
  }

  ua = {
    isMoz: !!window.navigator.userAgent.match(/firefox/i),
    isWebkit: !!window.navigator.userAgent.match(/webkit/i),
    isIE: !+"\v1",
    isMac: !!window.navigator.platform.match(/mac/i)
  };

  util = {
    $: function(id) {
      return document.getElementById(id);
    },
    node: function() {
      var arg, args, attributes, child, children, element, k, name, v, value, _i, _j, _len, _len1;
      args = Array.prototype.slice.call(arguments);
      element = document.createElement(args.shift());
      attributes = {};
      children = [];
      for (_i = 0, _len = args.length; _i < _len; _i++) {
        arg = args[_i];
        if (!arg) {
          continue;
        }
        if (typeof arg === 'string') {
          children.push(document.createTextNode(arg));
        } else if (arg.nodeType === Node.ELEMENT_NODE) {
          children.push(arg);
        } else if (typeof arg === 'object') {
          for (k in arg) {
            v = arg[k];
            attributes[k] = v;
          }
        }
      }
      for (name in attributes) {
        value = attributes[name];
        if (name === 'style' && typeof value === 'object') {
          util.style(element, value);
        } else {
          element.setAttribute(name, value);
        }
      }
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        child = children[_j];
        element.appendChild(child);
      }
      return element;
    },
    style: function(element, styles) {
      var property, value, _results;
      _results = [];
      for (property in styles) {
        value = styles[property];
        _results.push(element.style[property] = value);
      }
      return _results;
    },
    toggleClass: function(element, className, bool) {
      var classes, exists;
      classes = element.className.split(/\s+/);
      exists = __indexOf.call(classes, className) >= 0;
      if (bool && !exists) {
        classes.push(className);
        return element.className = classes.join(' ');
      } else if (!bool && exists) {
        classes.splice(classes.indexOf(className), 1);
        return element.className = classes.join(' ');
      }
    },
    installStyles: function(stylesString) {
      var body, head, propToSet, styleSheet, stylesheet;
      if (ua.isIE) {
        stylesheet = document.createStyleSheet();
        return stylesheet.cssText = stylesString;
      } else {
        head = document.getElementsByTagName('head')[0];
        if (!head) {
          body = document.getElementsByTagName('body')[0];
          head = document.createElement('head');
          body.parentNode.insertBefore(head, body);
        }
        styleSheet = document.createElement('style');
        propToSet = ua.isWebkit ? 'innerText' : 'innerHTML';
        styleSheet[propToSet] = stylesString;
        return head.appendChild(styleSheet);
      }
    },
    getMatchedCSSRulesForElements: function(elements) {
      var element, result, styleSheet, _i, _j, _len, _len1, _ref, _results;
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        element = elements[_i];
        if (window.getMatchedCSSRules && !ua.isWebkit) {
          _results.push(window.getMatchedCSSRules(element));
        } else {
          result = [];
          _ref = document.styleSheets;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            styleSheet = _ref[_j];
            try {
              if (!styleSheet.cssRules) {
                continue;
              }
              util._addMatchingRules(element, styleSheet, result);
            } catch (_error) {}
          }
          _results.push(result);
        }
      }
      return _results;
    },
    _addMatchingRules: function(element, sheet, result, returnMedia) {
      var cssRule, match, media, _i, _len, _ref, _ref1, _results;
      _ref = sheet.cssRules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cssRule = _ref[_i];
        if (cssRule.cssRules) {
          util._addMatchingRules(element, cssRule, result, returnMedia);
          continue;
        }
        if (util.elementMatchesSelector(element, cssRule.selectorText)) {
          if ((_ref1 = sheet.media) != null ? _ref1.length : void 0) {
            media = Array.prototype.join.call(sheet.media, ',');
            if (returnMedia && __indexOf.call(result, media) < 0) {
              result.push(media);
              continue;
            }
            match = matchMedia(media);
            if (!match.matches) {
              continue;
            }
          }
          if (!returnMedia) {
            _results.push(result.push(cssRule));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    getPossibleMediaQueries: function(element) {
      var result, styleSheet, _i, _len, _ref;
      result = [];
      _ref = document.styleSheets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        styleSheet = _ref[_i];
        try {
          if (!styleSheet.cssRules) {
            continue;
          }
          util._addMatchingRules(element, styleSheet, result, true);
        } catch (_error) {}
      }
      return result;
    },
    elementMatchesSelector: (function() {
      var d, func;
      d = document.createElement('div');
      func = d.matchesSelector || d.webkitMatchesSelector || d.mozMatchesSelector || d.msMatchesSelector || function() {
        return false;
      };
      return function(el, selector) {
        var e;
        try {
          return func.call(el, selector);
        } catch (_error) {
          e = _error;
          return false;
        }
      };
    })(),
    keys: Object.keys || function(obj) {
      var key, val, _results;
      _results = [];
      for (key in obj) {
        val = obj[key];
        _results.push(key);
      }
      return _results;
    },
    isEqual: function(a, b) {
      var aKeys, atype, bKeys, btype, key, val;
      if (a === b) {
        return true;
      }
      atype = typeof a;
      btype = typeof b;
      if (atype !== btype) {
        return false;
      }
      if (a == b) {
        return true;
      }
      if ((!a && b) || (a && !b)) {
        return false;
      }
      if (a.isEqual) {
        return a.isEqual(b);
      }
      if (atype !== 'object') {
        return false;
      }
      if (a.length && (a.length !== b.length)) {
        return false;
      }
      aKeys = util.keys(a);
      bKeys = util.keys(b);
      if (aKeys.length !== bKeys.length) {
        return false;
      }
      for (key in a) {
        val = a[key];
        if (!(key in b) || !util.isEqual(val, b[key])) {
          return false;
        }
      }
      return true;
    },
    ruleSpecificy: function(rule) {
      var sp1, sp2, sp3, _ref;
      sp1 = sp2 = sp3 = 0;
      rule = rule.replace(/::[a-z-]+|:(after|before|first-letter|first-line)/ig, function() {
        sp3++;
        return '';
      });
      rule = rule.replace(/:[a-z-]+(\(.*\))?|\[.*\]|\.[a-z][\w-]+/ig, function() {
        sp2++;
        return '';
      });
      rule = rule.replace(/#[a-z][\w-]+/ig, function() {
        sp1++;
        return '';
      });
      sp3 += ((_ref = rule.match(/[a-z]+/ig)) != null ? _ref.length : void 0) || 0;
      return sp1 * 1e6 + sp2 * 1e3 + sp3;
    }
  };

  getSessionId = function(newvalue) {
    var sessionId;
    if (newvalue == null) {
      newvalue = null;
    }
    sessionId = storage.getItem('_styler_session_id');
    if (!sessionId) {
      sessionId = ~~(Math.random() * 1e8);
    }
    if (newvalue) {
      sessionId = newvalue;
    }
    storage.setItem('_styler_session_id', sessionId);
    return sessionId;
  };

  isSupportedAgent = function() {
    var match;
    if (window.navigator.userAgent.match(/webkit/i)) {
      return true;
    }
    match = window.navigator.userAgent.match(/firefox\/([0-9]+)/i);
    if (match && parseInt(match[1], 10) >= 8) {
      return true;
    } else {
      return false;
    }
  };

  _matchMediaListeners = {};

  setupMatchMediaListeners = function(elementId) {
    var element, match, mediaQueries, newListeners, query, _i, _len, _results;
    element = elements[elementId];
    if (!element) {
      return;
    }
    mediaQueries = util.getPossibleMediaQueries(element);
    newListeners = {};
    for (_i = 0, _len = mediaQueries.length; _i < _len; _i++) {
      query = mediaQueries[_i];
      if (!(!_matchMediaListeners[query])) {
        continue;
      }
      match = matchMedia(query);
      newListeners[query] = match;
      match.addListener(_mediaChangeListener);
    }
    for (query in _matchMediaListeners) {
      match = _matchMediaListeners[query];
      if (!(__indexOf.call(mediaQueries, query) < 0)) {
        continue;
      }
      match.removeListener(_mediaChangeListener);
      delete _matchMediaListeners[query];
    }
    _results = [];
    for (query in newListeners) {
      match = newListeners[query];
      _results.push(_matchMediaListeners[query] = match);
    }
    return _results;
  };

  _mediaChangeListener = function() {
    var lastStyledElementJson, styles;
    if (lastStyledElement !== null) {
      styles = getStyles(elements[lastStyledElement]);
      lastStyledElementJson = JSON.stringify(styles);
      return typeof sendMessage === "function" ? sendMessage('change:styles', {
        id: lastStyledElement,
        styles: styles.result,
        nearby: styles.nearby
      }) : void 0;
    }
  };

  keyboardCommands = {};

  keyMatchesCommand = function(e, cmd) {
    var conf;
    conf = keyboardCommands[cmd];
    if (!conf) {
      return false;
    }
    conf = ua.isMac ? conf.mac : conf.win ? conf.win : conf.mac;
    if (conf.code !== e.keyCode) {
      return false;
    }
    if (conf.meta && !e.metaKey) {
      return false;
    }
    if (conf.shift && !e.shiftKey) {
      return false;
    }
    if (conf.ctrl && !e.ctrlKey) {
      return false;
    }
    if (conf.alt && !e.altKey) {
      return false;
    }
    e.stopPropagation();
    e.preventDefault();
    return true;
  };

  keyboardCommandText = function(cmd) {
    var conf;
    conf = keyboardCommands[cmd];
    if (!conf) {
      return false;
    }
    if (ua.isMac) {
      return conf.mac.txt;
    } else {
      return conf.win.txt;
    }
  };

  onKeyDown = function(e) {
    if (keyMatchesCommand(e, 'toggle-window-mode')) {
      return openConsole();
    } else if (isActive && keyMatchesCommand(e, 'toggle-iframe-container')) {
      return tryToggleHideIframe();
    } else if (isActive && keyMatchesCommand(e, 'start-inspector-mode')) {
      return startInspector(function(id) {
        return sendMessage('inspect', {
          id: id
        });
      });
    } else if (isInspecting) {
      switch (e.keyCode) {
        case 27:
          stopInspector();
          break;
        case 40:
          inspectorResult.moveDown();
          break;
        case 38:
          inspectorResult.moveUp();
          break;
        case 13:
          onInspectorSelect(e);
      }
      e.stopPropagation();
      return e.preventDefault();
    }
  };

  baseURL = '';

  init = function(h) {
    var start, _ref;
    host = h;
    start = function() {
      return setTimeout((function() {
        return loadSocketIO(function() {
          var stylesheets;
          _fixPrototypeJSON();
          if (window.__styler_bookmarklet) {
            return startEmbedMode();
          }
          socket = io.connect("http://" + host + "/clients");
          stylesheets = [];
          socket.on('connect', function() {
            stylesheets = getStyleSheets();
            socket.emit('register', {
              useragent: window.navigator.userAgent,
              name: document.title,
              sessionId: getSessionId(),
              url: window.location.href,
              css: stylesheets,
              embed: (ua.isMoz || ua.isWebkit) && !window.navigator.platform.match(/mobile/i)
            });
            return setInterval(function() {
              var newSheets, sheet;
              newSheets = (function() {
                var _i, _len, _ref, _results;
                _ref = getStyleSheets();
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  sheet = _ref[_i];
                  if (__indexOf.call(stylesheets, sheet) < 0) {
                    _results.push(sheet);
                  }
                }
                return _results;
              })();
              if (!newSheets.length) {
                return;
              }
              socket.emit('change:stylesheets', newSheets);
              return stylesheets = stylesheets.concat(newSheets);
            }, 2000);
          });
          socket.on('error', function() {
            if (/chrome/i.test(window.navigator.userAgent) && window.location.protocol === 'file:' && /^win/i.test(window.navigator.platform)) {
              return alert('Chrome sandbox prevents connecting to other pages from pages using file:// protocol. Open Chrome with argument --allow-file-access-from-files to bypass this check.');
            }
          });
          socket.on('registered', function(id, sessionId, keys) {
            var oldTitle;
            getSessionId(sessionId);
            keyboardCommands = keys;
            oldTitle = document.title.replace(/\s?\(\d+\)$/, '');
            document.title = oldTitle + (" (" + id + ")");
            return onConnected();
          });
          socket.on('callclient', function(name, data, cb) {
            return typeof publicAPI[name] === "function" ? publicAPI[name](data, cb) : void 0;
          });
          socket.on('baseurl', function(value) {
            return baseURL = value;
          });
          return socket.on('disconnect', function() {
            return document.title = document.title.replace(/\s\(\d+\)$/, '');
          });
        });
      }), 500);
    };
    if ((_ref = document.readyState) === 'complete' || _ref === 'interactive') {
      return start();
    } else {
      return document.addEventListener('DOMContentLoaded', function() {
        return start();
      });
    }
  };

  _fixPrototypeJSON = function() {
    var encodePacket;
    encodePacket = io.parser.encodePacket;
    return io.parser.encodePacket = function() {
      var array_toJSON, result;
      array_toJSON = Array.prototype.toJSON;
      if (array_toJSON) {
        Array.prototype.toJSON = null;
      }
      result = encodePacket.apply(null, arguments);
      Array.prototype.toJSON = array_toJSON;
      return result;
    };
  };

  loadSocketIO = function(cb) {
    var script;
    if (window.io && window.io.connect) {
      return cb();
    }
    script = util.node('script', {
      type: 'text/javascript',
      src: "http://" + host + "/socket.io/socket.io.js"
    });
    script.onload = function() {
      return cb();
    };
    return (document.getElementsByTagName('head')[0] || document.body).appendChild(script);
  };

  onConnected = function() {
    var load_diff, mode, unload_time;
    createInspectorElements();
    util.installStyles(STYLER_CSS);
    window.addEventListener('message', onPostMessage, false);
    setTimeout(dispatchLoadedEvent, 100);
    setInterval(function() {
      if (isActive) {
        return scanTree(function(results) {
          return sendMessage('change:dom', {
            tree: results
          });
        }, true, false);
      }
    }, 1e4);
    window.addEventListener('keydown', onKeyDown, true);
    unload_time = (new Date).setTime(parseInt(storage.getItem('_styler_unload_time')));
    load_diff = (new Date) - unload_time;
    mode = storage.getItem('_styler_mode');
    if (mode === 'iframe' && load_diff < 2000) {
      return openConsole('iframe');
    } else {
      return showMessage('Press <span>' + keyboardCommandText('toggle-window-mode') + '</span> to launch Styler.');
    }
  };

  onPostMessage = function(e) {
    var callbackId, name, origin, param, _ref;
    origin = "http://" + host;
    if (0 !== e.origin.indexOf(origin)) {
      return;
    }
    _ref = e.data, name = _ref.name, param = _ref.param, callbackId = _ref.callbackId;
    return typeof publicAPI[name] === "function" ? publicAPI[name](param, function(resp) {
      var data;
      data = {
        name: 'messageResponse',
        callbackId: callbackId,
        data: resp
      };
      popupWindow = e.source;
      return e.source.postMessage(data, origin);
    }) : void 0;
  };

  sendMessage = function(name, params) {
    if (!(isActive && socket)) {
      return;
    }
    return socket.emit('clientmessage', name, params);
  };

  getStyleSheets = function() {
    var sheet, url, _i, _len, _ref, _ref1, _results;
    _ref = document.styleSheets;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      sheet = _ref[_i];
      if (!(url = sheet.href || ((_ref1 = sheet.ownerNode) != null ? _ref1.getAttribute('data-url') : void 0))) {
        continue;
      }
      if (url.match(/^data/i)) {
        continue;
      }
      _results.push(url);
    }
    return _results;
  };

  lastStyledElement = null;

  lastStyledElementJson = '';

  publicAPI = {
    identify: function(params, cb) {
      return showMessage(params.msg);
    },
    getSessionId: function(params, cb) {
      return cb({
        sessionId: getSessionId()
      });
    },
    toggleApplicationMode: function(params, cb) {
      return toggleApplicationMode(cb);
    },
    getLastStyledElement: function(params, cb) {
      return cb({
        lastStyledElement: lastStyledElement
      });
    },
    getStyles: function(params, cb) {
      var styles;
      lastStyledElement = params.id;
      styles = getStyles(elements[params.id]);
      lastStyledElementJson = JSON.stringify(styles);
      cb({
        styles: styles.result,
        nearby: styles.nearby
      });
      return setTimeout(function() {
        return setupMatchMediaListeners(lastStyledElement);
      }, 1);
    },
    toggleIframe: function(params, cb) {
      if (isActive) {
        return tryToggleHideIframe();
      }
    },
    getDOMTree: function(params, cb) {
      return scanTree(function(results) {
        return cb({
          tree: results
        });
      });
    },
    startInspector: function(params, cb) {
      return startInspector(function(id) {
        return cb({
          id: id
        });
      });
    },
    showInspectArea: function(params, cb) {
      highlightElementArea(elements[params.id], true);
      return cb();
    },
    serializeElement: function(param, cb) {
      var element;
      element = elements[param.id];
      return cb(element ? serializeElement(element) : null);
    },
    setStyles: function(param) {
      var styles;
      setStyleSheetData(param.url, param.data);
      if (lastStyledElement !== null) {
        styles = getStyles(elements[lastStyledElement]);
        lastStyledElementJson = JSON.stringify(styles);
        if (typeof sendMessage === "function") {
          sendMessage('change:styles', {
            id: lastStyledElement,
            styles: styles.result,
            nearby: styles.nearby
          });
        }
        return setTimeout(function() {
          return setupMatchMediaListeners(lastStyledElement);
        }, 1);
      }
    },
    unserializeElement: function(param, cb) {
      return cb({
        id: unserializeElement(param.selector, param.length, param.index)
      });
    },
    activate: function(param, cb) {
      isActive = true;
      if (inspectOnActivation) {
        setTimeout(function() {
          var inspectOnActivation;
          if (lastRightClickedElement) {
            sendMessage('inspect', {
              id: getOutlineId(lastRightClickedElement)
            });
          }
          return inspectOnActivation = false;
        }, 700);
      }
      if (_media !== 'sheet') {
        return typeof sendMessage === "function" ? sendMessage('change:media', {
          media: _media
        }) : void 0;
      }
    },
    elementsForSelector: function(params, cb) {
      var id, node, nodes;
      try {
        nodes = document.querySelectorAll(params.selector);
      } catch (_error) {
        err = _error;
        return cb({
          ids: []
        });
      }
      return cb({
        ids: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = nodes.length; _i < _len; _i++) {
            node = nodes[_i];
            if ((id = getOutlineId(node)) !== null) {
              _results.push(id);
            }
          }
          return _results;
        })()
      });
    },
    setElementPseudo: function(params, cb) {
      var el;
      el = elements[params.id];
      if (!el) {
        return;
      }
      setElementPseudo(el, params.pseudos);
      return cb();
    },
    clearPseudos: function(params, cb) {
      clearPseudos();
      return cb();
    },
    deactivate: function() {
      isActive = false;
      if (isInspecting) {
        return stopInspector();
      }
    },
    setMedia: function(params, cb) {
      setMedia(params.value);
      return cb();
    },
    findElementMatches: function(_arg, cb) {
      var after, clazz, clazzes, currentsel, element, elements, i, id, lastpart, offset, p, parent, pfx, query, result, results, search, sel, selector, tag, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      selector = _arg.selector, parent = _arg.parent, offset = _arg.offset, after = _arg.after;
      results = {};
      currentsel = '';
      lastpart = selector.match(/[\.#\s]([^\.#\s]*)$/);
      if (!lastpart) {
        lastpart = [selector, selector];
      }
      if (lastpart[0].length !== selector.length) {
        if (selector[0] === '&') {
          currentsel = '';
        } else {
          currentsel = selector.substr(0, selector.length - lastpart[0].length);
        }
      } else {
        currentsel = '*';
      }
      for (i = _i = 0, _len = parent.length; _i < _len; i = ++_i) {
        p = parent[i];
        parent[i] += ' ' + currentsel;
      }
      query = '';
      if (lastpart) {
        query = lastpart[1];
      }
      search = 'tag';
      if (((_ref = lastpart[0]) != null ? _ref[0] : void 0) === '#') {
        search = 'id';
      }
      if (((_ref1 = lastpart[0]) != null ? _ref1[0] : void 0) === '.' || ((_ref2 = lastpart[0]) != null ? _ref2.length : void 0) === 0) {
        search = 'class';
      }
      for (_j = 0, _len1 = parent.length; _j < _len1; _j++) {
        sel = parent[_j];
        try {
          elements = document.querySelectorAll(sel);
        } catch (_error) {
          err = _error;
          console.log('catch', sel);
          continue;
        }
        for (_k = 0, _len2 = elements.length; _k < _len2; _k++) {
          element = elements[_k];
          if (after) {
            try {
              if (!element.querySelector(after)) {
                continue;
              }
            } catch (_error) {
              err = _error;
              continue;
            }
          }
          switch (search) {
            case 'tag':
              tag = element.tagName.toLowerCase();
              if ((tag.indexOf(query)) === 0) {
                results[tag] = 1;
              }
              break;
            case 'id':
              id = element.id;
              if (!id) {
                continue;
              }
              if ((id.indexOf(query)) === 0) {
                results[id] = 1;
              }
              break;
            case 'class':
              clazzes = element.classList;
              if (clazzes) {
                for (_l = 0, _len3 = clazzes.length; _l < _len3; _l++) {
                  clazz = clazzes[_l];
                  if ((clazz.indexOf(query)) === 0) {
                    results[clazz] = 1;
                  }
                }
              }
          }
        }
      }
      pfx = selector.substr(0, selector.length - query.length);
      if (((_ref3 = lastpart[0]) != null ? _ref3.length : void 0) === 0) {
        pfx += '.';
      }
      return cb({
        results: (function() {
          var _results;
          _results = [];
          for (result in results) {
            _results.push(pfx + result);
          }
          return _results;
        })()
      });
    }
  };

  serializeElement = function(element) {
    var el, index, queryElements, selector, selectors;
    el = element;
    selectors = (function() {
      var _results;
      _results = [];
      while (el && (el !== document.body && el !== document)) {
        selector = nameForElement(el);
        el = el.parentNode;
        _results.push(selector);
      }
      return _results;
    })();
    selector = selectors.reverse().join(' ');
    if (!selector.length) {
      return null;
    }
    queryElements = document.querySelectorAll(selector);
    if (!(queryElements != null ? queryElements.length : void 0)) {
      return null;
    }
    queryElements = Array.prototype.slice.call(queryElements);
    if (-1 === (index = queryElements.indexOf(element))) {
      return null;
    }
    return {
      selector: selector,
      length: queryElements.length,
      index: index
    };
  };

  unserializeElement = function(selector, length, index) {
    var id, queryElements;
    queryElements = document.querySelectorAll(selector);
    if (queryElements.length === length) {
      id = getOutlineId(queryElements[index]);
      if (id !== null) {
        return id;
      }
    }
    return -1;
  };

  nameForElement = function(el) {
    var classname, id, name, _i, _len, _ref;
    name = el.tagName.toLowerCase();
    if (id = el.getAttribute('id')) {
      name += '#' + id;
    }
    if (el.className && typeof el.className === 'string') {
      _ref = el.className.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        classname = _ref[_i];
        if (classname.length && !/^_styler_fake_/.test(classname)) {
          name += '.' + classname;
        }
      }
    }
    return name;
  };

  _treeWalkerFilter = function(node) {
    var _ref, _ref1, _ref2;
    if (node.nodeType === Node.TEXT_NODE && !(node.nodeValue.match(/\S/))) {
      return NodeFilter.FILTER_REJECT;
    } else if ((_ref = (_ref1 = node.tagName) != null ? _ref1.toLowerCase() : void 0) === 'script' || _ref === 'style') {
      return NodeFilter.FILTER_REJECT;
    } else if ((_ref2 = node.id) === '_styler_controls' || _ref2 === '_styler_iframe' || _ref2 === '_styler_message') {
      return NodeFilter.FILTER_REJECT;
    } else {
      return NodeFilter.FILTER_ACCEPT;
    }
  };

  elements = [];

  _treeWalkerFilter.acceptNode = _treeWalkerFilter;

  _scanElements = [];

  _scanResults = [];

  _scanResultsCache = [];

  _scanNode = null;

  _scanTimeout = 0;

  _scanBuffer = 0;

  getOutlineId = function(element) {
    var _ref;
    return (_ref = element['_styler_scan' + _scanBuffer]) != null ? _ref.id : void 0;
  };

  scanTree = function(cb, restart, alwaysPublish) {
    var buffer, el, i, item, parentItem, walker;
    if (restart == null) {
      restart = true;
    }
    if (alwaysPublish == null) {
      alwaysPublish = true;
    }
    if (restart) {
      _scanElements = [];
      _scanResults = [];
      _scanNode = document.body;
      clearTimeout(_scanTimeout);
    }
    buffer = '_styler_scan' + (_scanBuffer ? 0 : 1);
    walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, _treeWalkerFilter, false);
    walker.currentNode = _scanNode;
    i = 0;
    while (el = walker.nextNode()) {
      if (el.nodeType !== Node.TEXT_NODE) {
        el[buffer] = item = {
          n: nameForElement(el),
          id: _scanElements.length
        };
        _scanElements.push(el);
      } else {
        item = el.nodeValue.substring(0, 30);
      }
      if (el.parentNode[buffer]) {
        parentItem = el.parentNode[buffer];
        if (!parentItem.c) {
          if (el.nodeType === Node.TEXT_NODE && !parentItem.d) {
            parentItem.d = item;
          } else {
            parentItem.c = [];
            if (parentItem.d) {
              parentItem.c.push(parentItem.d);
              delete parentItem.d;
            }
          }
        }
        if (parentItem.c) {
          el.parentNode[buffer].c.push(item);
        }
      } else {
        _scanResults.push(item);
      }
      if (i++ > (alwaysPublish ? 300 : 100)) {
        _scanNode = el;
        return _scanTimeout = setTimeout((function() {
          return scanTree(cb, false, alwaysPublish);
        }), 10);
      }
    }
    if (!alwaysPublish) {
      if (util.isEqual(_scanResults, _scanResultsCache)) {
        return;
      }
    }
    elements = _scanElements;
    _scanBuffer = _scanBuffer ? 0 : 1;
    return cb(_scanResultsCache = _scanResults);
  };

  _addStyleProp = function(style_dec, prop, styles, usedProp, elementIndex) {
    var current, previous, value;
    if (!styles[prop]) {
      value = style_dec.getPropertyValue(prop);
      if (!value) {
        return;
      }
      current = styles[prop] = {
        value: value,
        priority: style_dec.getPropertyPriority(prop),
        index: elementIndex
      };
      previous = usedProp[prop];
      if (previous) {
        if (current.priority && !previous.priority && previous.index === current.index) {
          previous.disabled = true;
          return usedProp[prop] = current;
        } else {
          return current.disabled = true;
        }
      } else {
        return usedProp[prop] = current;
      }
    }
  };

  _getStyleData = function(styleDec, usedProp, elementIndex) {
    var i, match, name, origName, shorthand, styles, withnext, _i, _ref;
    styles = {};
    for (i = _i = 0, _ref = styleDec.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      origName = name = styleDec.item(i);
      if (ua.isMoz) {
        if (name.match(/(ltr|rtl)-source$/)) {
          continue;
        }
        name = name.replace(/(^-value$)/g, '');
      }
      shorthand = typeof styleDec.getPropertyShorthand === "function" ? styleDec.getPropertyShorthand(name) : void 0;
      if (ua.isMoz && !shorthand && (match = name.match(/^(padding|margin|font|border|background|text-decoration|overflow)-/))) {
        if ((styleDec != null ? styleDec.getPropertyValue(match[1]) : void 0) !== '') {
          shorthand = match[1];
        } else if (match[1] === 'border') {
          withnext = name.split('-').slice(0, 2).join('-');
          if ((styleDec != null ? styleDec.getPropertyValue(withnext) : void 0) !== '') {
            shorthand = withnext;
          }
        }
      }
      if (shorthand && (styleDec != null ? styleDec.getPropertyValue(shorthand) : void 0)) {
        if (!styles[shorthand]) {
          _addStyleProp(styleDec, shorthand, styles, usedProp, elementIndex);
          styles[shorthand].subStyles = {};
        }
        _addStyleProp(styleDec, name, styles[shorthand].subStyles, usedProp, elementIndex);
      } else {
        _addStyleProp(styleDec, name, styles, usedProp, elementIndex);
      }
    }
    return styles;
  };

  inheritProperties = 'color|font|font-family|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-weight|letter-spacing|line-height|list-style|list-style-image|list-style-position|list-style-type|text-align|text-indent|text-transform|visibility|white-space|word-spacing'.split('|');

  getBestRule = function(element, styles, usedRules) {
    var id, rule, selector, specificy, _i, _len, _ref, _ref1, _ref2;
    if (!(id = getOutlineId(element))) {
      return null;
    }
    _ref = getSortedSelectors(styles, element, usedRules);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], selector = _ref1.selector, specificy = _ref1.specificy, rule = _ref1.rule;
      if (specificy >= 1e3) {
        return {
          selector: selector,
          element: id,
          file: rule.parentStyleSheet.href || ((_ref2 = rule.parentStyleSheet.ownerNode) != null ? _ref2.getAttribute('data-url') : void 0)
        };
      } else {
        return null;
      }
    }
  };

  getSortedSelectors = function(styles, element, usedRules) {
    var i, parts, pseudoRegExp, rule, selector, selectors, _i, _j, _len, _ref;
    selectors = [];
    pseudoRegExp = /\._styler_fake_(hover|active|visited|focus)/gi;
    for (i = _i = _ref = (styles != null ? styles.length : void 0) - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
      rule = styles[i];
      if (!rule || __indexOf.call(usedRules, rule) >= 0) {
        continue;
      }
      usedRules.push(rule);
      parts = rule.selectorText.split(',');
      for (_j = 0, _len = parts.length; _j < _len; _j++) {
        selector = parts[_j];
        selector = selector.trim();
        if (util.elementMatchesSelector(element, selector)) {
          if (pseudoRegExp.test(selector)) {
            selector = selector.replace(pseudoRegExp, function(match, pseudo) {
              return ':' + pseudo;
            });
          }
          selectors.push({
            selector: selector,
            specificy: util.ruleSpecificy(selector),
            rule: rule
          });
        }
      }
    }
    return selectors.sort(function(a, b) {
      if (a.specificy === b.specificy) {
        return 0;
      } else if (a.specificy < b.specificy) {
        return 1;
      } else {
        return -1;
      }
    });
  };

  getStyles = function(element) {
    var bestrule, el, els, explicitInherit, file, filteredStyles, index, length, media, name, nearEls, nearby, prop, property, result, rule, selector, styles, usedProperties, usedRules, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    result = [];
    nearby = [];
    usedProperties = {};
    el = element;
    if (!el) {
      return {
        result: [],
        nearby: []
      };
    }
    els = ((function() {
      var _results;
      _results = [];
      while (el = el.parentNode) {
        _results.push(el);
      }
      return _results;
    })());
    els.unshift(element);
    if (element) {
      result.push({
        type: 'element',
        styles: _getStyleData(element.style, usedProperties)
      });
      usedRules = [];
      explicitInherit = [];
      _ref = util.getMatchedCSSRulesForElements(els, '');
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        styles = _ref[index];
        _ref1 = getSortedSelectors(styles, els[index], usedRules);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          _ref2 = _ref1[_j], selector = _ref2.selector, rule = _ref2.rule;
          filteredStyles = {};
          length = 0;
          media = [];
          if ((_ref3 = rule.parentStyleSheet) != null ? _ref3.media : void 0) {
            media = media.concat(Array.prototype.slice.call(rule.parentStyleSheet.media));
          }
          if (rule.parentRule instanceof CSSMediaRule) {
            media = media.concat(Array.prototype.slice.call(rule.parentRule.media));
          }
          media = rule._orig_media || ((_ref4 = rule.parentStyleSheet) != null ? _ref4._orig_media : void 0) || (media.length ? media.join(', ') : null);
          _ref5 = _getStyleData(rule.style, usedProperties, index);
          for (property in _ref5) {
            value = _ref5[property];
            if (!index || __indexOf.call(inheritProperties, property) >= 0 || (index === 1 && __indexOf.call(explicitInherit, property) >= 0)) {
              filteredStyles[property] = value;
              length++;
            }
          }
          if (length > 0) {
            file = rule.parentStyleSheet.href || ((_ref6 = rule.parentStyleSheet.ownerNode) != null ? _ref6.getAttribute('data-url') : void 0);
            for (_k = 0, _len2 = result.length; _k < _len2; _k++) {
              rule = result[_k];
              if (rule.file === file && rule.selector === selector) {
                rule.index++;
              }
            }
            result.push({
              type: index === 0 ? 'matched' : 'inherited',
              element: {
                name: nameForElement(els[index]),
                id: getOutlineId(els[index])
              },
              file: file,
              selector: selector,
              index: 0,
              styles: filteredStyles,
              media: media
            });
          }
        }
        if (index === 0) {
          explicitInherit = (function() {
            var _results;
            _results = [];
            for (name in usedProperties) {
              prop = usedProperties[name];
              if (prop.value !== 'inherit') {
                continue;
              }
              delete usedProperties[name];
              _results.push(name);
            }
            return _results;
          })();
        }
      }
      nearEls = (function() {
        var _l, _len3, _ref7, _results;
        _ref7 = [element.parentElement, element.previousElementSibling, element.nextElementSibling, element.firstChild];
        _results = [];
        for (_l = 0, _len3 = _ref7.length; _l < _len3; _l++) {
          el = _ref7[_l];
          if (el) {
            _results.push(el);
          }
        }
        return _results;
      })();
      _ref7 = util.getMatchedCSSRulesForElements(nearEls, '');
      for (index = _l = 0, _len3 = _ref7.length; _l < _len3; index = ++_l) {
        styles = _ref7[index];
        bestrule = getBestRule(nearEls[index], styles, usedRules);
        if (bestrule) {
          nearby.push(bestrule);
        }
      }
    }
    return {
      result: result,
      nearby: nearby
    };
  };

  fakePseudos = [];

  clearPseudos = function() {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = fakePseudos.length; _i < _len; _i++) {
      el = fakePseudos[_i].el;
      _results.push(setElementPseudo(el, []));
    }
    return _results;
  };

  setElementPseudo = function(element, newClasses) {
    var fakePseudo, klass, newPseudos, pseudos, _i, _len;
    fakePseudo = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = fakePseudos.length; _i < _len; _i++) {
        fakePseudo = fakePseudos[_i];
        if (fakePseudo.el === element) {
          _results.push(fakePseudo);
        }
      }
      return _results;
    })())[0];
    if (!fakePseudo) {
      fakePseudos.push(fakePseudo = {
        el: element,
        pseudos: []
      });
    }
    pseudos = fakePseudo.pseudos;
    newPseudos = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pseudos.length; _i < _len; _i++) {
        klass = pseudos[_i];
        if (__indexOf.call(newClasses, klass) < 0) {
          util.toggleClass(element, '_styler_fake_' + klass, false);
          continue;
        }
        _results.push(klass);
      }
      return _results;
    })();
    for (_i = 0, _len = newClasses.length; _i < _len; _i++) {
      klass = newClasses[_i];
      if (!(__indexOf.call(newPseudos, klass) < 0)) {
        continue;
      }
      newPseudos.push(klass);
      util.toggleClass(element, '_styler_fake_' + klass, true);
    }
    return fakePseudo.pseudos = newPseudos;
  };

  inspectorControlsElement = null;

  inspectorAreaElement = null;

  isInspecting = false;

  inspectorResult = null;

  _inspectorCallback = null;

  _inspectorHideTimeout = 0;

  createInspectorElements = function() {
    var el;
    el = util.$('_styler_controls');
    if (el) {
      el.parentNode.removeChild(el);
    }
    return document.body.appendChild(inspectorControlsElement = util.node('div', {
      id: '_styler_controls',
      "class": 'styler-controls styler-reset'
    }, inspectorAreaElement = util.node('div', {
      "class": 'inspector-area styler-reset'
    }), (inspectorResult = new InspectorResult).el));
  };

  highlightElementArea = function(element, temporary) {
    var box;
    if (temporary == null) {
      temporary = false;
    }
    if (!element) {
      return;
    }
    box = element.getBoundingClientRect();
    util.style(inspectorAreaElement, {
      left: box.left + pageXOffset + 'px',
      top: box.top + pageYOffset + 'px',
      width: box.width + 'px',
      height: box.height + 'px',
      display: 'block'
    });
    clearTimeout(_inspectorHideTimeout);
    if (temporary) {
      return _inspectorHideTimeout = setTimeout(clearHighlight, 1400);
    }
  };

  clearHighlight = function() {
    return util.style(inspectorAreaElement, {
      left: 0,
      top: 0,
      width: 0,
      height: 0,
      display: 'none'
    });
  };

  startInspector = function(cb) {
    _inspectorCallback = cb;
    if (isInspecting) {
      return;
    }
    window.addEventListener('mousemove', onInspectorMove, true);
    window.addEventListener('click', onInspectorSelect, true);
    isInspecting = true;
    return showMessage('Inspector mode activated');
  };

  stopInspector = function() {
    if (!isInspecting) {
      return;
    }
    clearHighlight();
    util.style(inspectorResult.el, {
      display: 'none'
    });
    window.removeEventListener('mousemove', onInspectorMove, true);
    window.removeEventListener('click', onInspectorSelect, true);
    return isInspecting = false;
  };

  onInspectorMove = function(e) {
    var currentElement;
    util.style(inspectorControlsElement, {
      display: 'none'
    });
    currentElement = document.elementFromPoint(e.clientX, e.clientY);
    util.style(inspectorControlsElement, {
      display: 'block'
    });
    if (currentElement) {
      inspectorResult.setSelection(currentElement);
      currentElement = inspectorResult.getSelection();
      highlightElementArea(currentElement);
      if (e.clientX > window.innerWidth * .6 && !inspectorResult.onLeft) {
        util.style(inspectorResult.el, {
          display: 'block',
          right: '',
          left: '0px'
        });
        inspectorResult.onLeft = true;
      } else if (e.clientX < window.innerWidth * .4 && inspectorResult.onLeft) {
        util.style(inspectorResult.el, {
          display: 'block',
          right: '0px',
          left: ''
        });
        inspectorResult.onLeft = false;
      } else if (inspectorResult.onLeft == null) {
        util.style(inspectorResult.el, {
          display: 'block',
          right: '0px',
          left: ''
        });
        inspectorResult.onLeft = false;
      }
    } else {
      inspectorResult.clear();
      util.style(inspectorInfo.el, {
        display: 'none'
      });
    }
    e.stopPropagation();
    return e.preventDefault();
  };

  onInspectorSelect = function(e) {
    var selection;
    selection = inspectorResult.getSelection();
    if (selection) {
      if (typeof _inspectorCallback === "function") {
        _inspectorCallback(getOutlineId(selection));
      }
    }
    stopInspector();
    if (popupWindow != null) {
      popupWindow.focus();
    }
    e.stopPropagation();
    return e.preventDefault();
  };

  InspectorResult = (function() {
    function InspectorResult() {
      this.el = util.node('div', {
        "class": 'inspectorResult'
      });
      this.clear();
    }

    InspectorResult.prototype.clear = function() {
      this.options = [];
      return this.selection = null;
    };

    InspectorResult.prototype.setSelection = function(el) {
      var manualSelection, _ref;
      manualSelection = this.selection && this.options.length && this.options[this.options.length - 1] !== this.selection;
      this.options = [];
      while (el && el !== document.body && el !== document.documentElement) {
        this.options.unshift(el);
        el = el.parentNode;
      }
      if (!this.options.length) {
        return this.selection = null;
      }
      if (!(manualSelection && (_ref = this.selection, __indexOf.call(this.options, _ref) >= 0))) {
        this.selection = this.options[this.options.length - 1];
      }
      return this.render();
    };

    InspectorResult.prototype.getSelection = function() {
      return this.selection;
    };

    InspectorResult.prototype.moveUp = function() {
      var index;
      if (!this.selection) {
        return;
      }
      index = this.options.indexOf(this.selection);
      if (index > 0) {
        highlightElementArea(this.selection = this.options[index - 1]);
        return this.render();
      }
    };

    InspectorResult.prototype.moveDown = function() {
      var index;
      if (!this.selection) {
        return;
      }
      index = this.options.indexOf(this.selection);
      if (index !== -1 && index < this.options.length - 1) {
        highlightElementArea(this.selection = this.options[index + 1]);
        return this.render();
      }
    };

    InspectorResult.prototype.render = function() {
      var el, fragment, item, _i, _len, _ref;
      fragment = document.createDocumentFragment();
      _ref = this.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        item = util.node('div', nameForElement(el));
        if (el === this.selection) {
          util.style(item, {
            background: '#ddd'
          });
        }
        fragment.appendChild(item);
      }
      this.el.innerHTML = '';
      return this.el.appendChild(fragment);
    };

    return InspectorResult;

  })();

  getIframeMode = function() {
    return storage.getItem('_styler_iframe_mode') || 'sidebyside';
  };

  setIframeMode = function(mode) {
    storage.setItem('_styler_iframe_mode', mode);
    if (window.__styler_embed) {
      return util.toggleClass(document.body, 'is-sidebyside', mode === 'sidebyside');
    }
  };

  toggleIframeMode = function() {
    setIframeMode(getIframeMode() === 'sidebyside' ? 'hovered' : 'sidebyside');
    return renderIframes();
  };

  openConsole = function(mode) {
    var iframe, iframeContainer;
    if (mode == null) {
      mode = isActive ? 'window' : storage.getItem('_styler_mode');
    }
    if (!mode) {
      mode = 'window';
    }
    console.log('openConsole', mode);
    iframe = util.$('_styler_iframe');
    if (iframe) {
      iframe.parentNode.removeChild(iframe);
    }
    if (util.$('_styler_embed')) {
      util.style(util.$('_styler_embed'), {
        width: '100%'
      });
    }
    if (mode === 'window') {
      if (isActive && popupWindow && storage.getItem('_styler_mode') === 'window') {
        popupWindow.focus();
      } else {
        try {
          if (popupWindow) {
            popupWindow.close();
          }
        } catch (_error) {}
        popupWindow = window.open("http://" + host + "/" + (getSessionId()), 'styler_console', 'width=990,height=680');
        if (!popupWindow) {
          alert("A popup blocker was detected that is preventing Styler from opening. Please add http://" + host + "/ to the list of allowed sites.");
        }
      }
    } else {
      if (!isSupportedAgent()) {
        return;
      }
      if (!getEmbedMode()) {
        startEmbedMode();
        iframeContainer = util.node('div', {
          id: '_styler_iframe'
        }, util.node('iframe', {
          src: "http://" + host + "/" + (getSessionId())
        }));
        document.body.appendChild(iframeContainer);
        renderIframes();
        setIframeMode(getIframeMode());
        tryToggleHideIframe(true);
        detectIframeReload();
        iframeContainer.addEventListener('mousedown', resizerMouseDown);
      } else {
        getEmbedMode().toggleApplicationMode();
      }
    }
    return storage.setItem('_styler_mode', mode);
  };

  _iframeUnloadListened = false;

  detectIframeReload = function() {
    if (!_iframeUnloadListened) {
      window.addEventListener('beforeunload', function() {
        return storage.setItem('_styler_unload_time', new Date().getTime());
      });
    }
    return _iframeUnloadListened = true;
  };

  iframeHidden = parseInt(storage.getItem('_styler_iframe_hidden')) || false;

  tryToggleHideIframe = function(noflip) {
    var embedmode, iframe;
    if (noflip == null) {
      noflip = false;
    }
    if (embedmode = getEmbedMode()) {
      return embedmode.tryToggleHideIframe(noflip);
    }
    iframe = util.$('_styler_iframe');
    if (iframe && !isResizing) {
      if (!noflip) {
        iframeHidden = !iframeHidden;
      }
      if (iframeHidden) {
        util.style(iframe, {
          right: -iframeWidth + 3 + '%',
          opacity: .4
        });
        if (getIframeMode() === 'sidebyside') {
          util.style(util.$('_styler_embed'), {
            width: '97%'
          });
        }
      } else {
        renderIframes();
      }
      return storage.setItem('_styler_iframe_hidden', iframeHidden ? 1 : 0);
    }
  };

  isResizing = false;

  startResizerX = 0;

  iframeWidth = parseInt(storage.getItem('_styler_iframe_width')) || 40;

  resizerMouseDown = function(e) {
    if (!(e.target.id === '_styler_iframe' && !isResizing)) {
      return;
    }
    if (iframeHidden) {
      return tryToggleHideIframe();
    }
    isResizing = true;
    util.toggleClass(document.body, 'is-resizing', true);
    window.addEventListener('mousemove', resizerMouseMove, true);
    window.addEventListener('mouseup', resizerMouseUp, true);
    startResizerX = e.clientX;
    e.stopPropagation();
    return e.preventDefault();
  };

  resizerMouseMove = function(e) {
    var delta;
    delta = e.clientX - startResizerX;
    startResizerX += delta;
    iframeWidth -= delta / window.innerWidth * 100;
    renderIframes();
    e.stopPropagation();
    return e.preventDefault();
  };

  resizerMouseUp = function() {
    var target;
    target = util.$('_styler_iframe');
    util.toggleClass(document.body, 'is-resizing', false);
    window.removeEventListener('mousemove', resizerMouseMove, true);
    window.removeEventListener('mouseup', resizerMouseUp, true);
    isResizing = false;
    return storage.setItem('_styler_iframe_width', iframeWidth);
  };

  renderIframes = function() {
    util.style(util.$('_styler_iframe'), {
      width: iframeWidth + '%',
      right: 0,
      opacity: 1
    });
    if (getIframeMode() === 'sidebyside') {
      return util.style(util.$('_styler_embed'), {
        width: (100 - iframeWidth) + '%'
      });
    } else {
      return util.style(util.$('_styler_embed'), {
        width: '100%'
      });
    }
  };

  _styleElementsCache = {};

  setStyleSheetData = function(url, styleData) {
    var el, linkElement, origin, parts, relative, sheet, _i, _len, _ref;
    el = _styleElementsCache[url];
    if (!el) {
      linkElement = null;
      _ref = document.styleSheets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sheet = _ref[_i];
        if (sheet.href === url && sheet.ownerNode) {
          linkElement = sheet.ownerNode;
        }
      }
      if (linkElement) {
        _styleElementsCache[url] = el = util.node('style', {
          type: 'text/css',
          'data-url': url
        });
        if (linkElement.getAttribute('media')) {
          el.setAttribute('media', linkElement.getAttribute('media'));
        }
        linkElement.parentNode.insertBefore(el, linkElement);
        linkElement.parentNode.removeChild(linkElement);
      } else {
        console.warn('No stylesheet #{url} found');
      }
    }
    if (!el) {
      return;
    }
    relative = _relativeURL(window.location.href, url);
    if (relative) {
      styleData = styleData.replace(/(url\s*\(\s*['"]?(?!['"]|\/|https?:|data:))/ig, "$1" + relative);
    } else if (relative === null) {
      parts = url.split('/');
      parts.pop();
      origin = parts.slice(0, 3).join('/');
      styleData = styleData.replace(/(url\s*\(\s*['"]?(?!['"]|\/|https?:|data:))/ig, "$1" + (parts.join('/')) + '/');
      styleData = styleData.replace(/(url\s*\(\s*['"]?(?=\/))/ig, "$1" + origin);
    }
    el.innerHTML = styleData;
    sheet = el.sheet;
    if (el.lastSheet !== sheet) {
      replacePseudos(sheet);
      if (_media !== 'sheet') {
        replaceMedia(sheet);
      }
    }
    return el.lastSheet = sheet;
  };

  replacePseudos = function(sheet) {
    var index, newParts, pseudoRegExp, pseudoRegExp2, rule, ruleTxt, selector, selectorText, selectors, _i, _j, _len, _len1, _ref, _results;
    pseudoRegExp = /:(hover|visited|focus|active)/i;
    pseudoRegExp2 = /:(hover|visited|focus|active)/ig;
    _ref = sheet.cssRules;
    _results = [];
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      rule = _ref[index];
      selectorText = rule.selectorText;
      if (rule.cssRules) {
        replacePseudos(rule);
        continue;
      }
      if (pseudoRegExp.test(selectorText)) {
        selectors = selectorText.split(',');
        newParts = [];
        for (_j = 0, _len1 = selectors.length; _j < _len1; _j++) {
          selector = selectors[_j];
          newParts.push(selector);
          if (pseudoRegExp.test(selector)) {
            newParts.push(selector.replace(pseudoRegExp2, function(match, klass) {
              return '._styler_fake_' + klass;
            }));
          }
        }
        if (!ua.isMoz) {
          _results.push(rule.selectorText = newParts.join(','));
        } else {
          ruleTxt = rule.cssText.replace(/^.*(?={)/, newParts.join(','));
          sheet.deleteRule(index);
          _results.push(sheet.insertRule(ruleTxt, index));
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  _media = 'sheet';

  setMedia = function(media) {
    var sheet, _i, _len, _ref, _results;
    if (_media !== media) {
      _media = media;
      _ref = document.styleSheets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sheet = _ref[_i];
        _results.push(replaceMedia(sheet));
      }
      return _results;
    }
  };

  replaceMedia = function(sheet) {
    var index, media, rule, value, _i, _len, _ref, _results;
    if (sheet.media) {
      media = sheet.media.mediaText;
      if (_media === 'screen') {
        if (sheet._orig_media) {
          sheet.media.mediaText = sheet._orig_media;
        }
      } else {
        if (_media === 'print') {
          value = media.replace(/screen/, 'none', 'g');
        }
        value = media.replace(_media, 'screen', 'g');
        sheet.media.mediaText = value;
        sheet._orig_media = media;
      }
    }
    try {
      if (sheet.cssRules) {
        _ref = sheet.cssRules;
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          rule = _ref[index];
          if (rule instanceof CSSMediaRule) {
            media = rule.media.mediaText;
            if (_media === 'screen') {
              if (rule._orig_media) {
                rule.media.mediaText = rule._orig_media;
              }
            } else {
              if (_media === 'print') {
                value = media.replace(/screen/, 'none', 'g');
              }
              value = media.replace(_media, 'screen', 'g');
              rule.media.mediaText = value;
              rule._orig_media = media;
            }
            continue;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    } catch (_error) {}
  };

  _relativeURL = function(from, to) {
    var fromParts, i, length, outputParts, samePartsLength, toParts, _i;
    fromParts = from.split('/');
    toParts = to.split('/');
    if (fromParts[2] !== toParts[2]) {
      return null;
    }
    fromParts.pop();
    toParts.pop();
    length = samePartsLength = Math.min(fromParts.length, toParts.length);
    for (i = _i = 2; 2 <= length ? _i < length : _i > length; i = 2 <= length ? ++_i : --_i) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    outputParts = (function() {
      var _j, _ref, _results;
      _results = [];
      for (i = _j = samePartsLength, _ref = fromParts.length; samePartsLength <= _ref ? _j < _ref : _j > _ref; i = samePartsLength <= _ref ? ++_j : --_j) {
        _results.push('..');
      }
      return _results;
    })();
    outputParts = outputParts.concat(toParts.slice(samePartsLength), ['']);
    return outputParts.join('/');
  };

  showMessage = function(msg) {
    var div, innerDiv;
    document.body.appendChild(div = util.node('div', {
      id: '_styler_message',
      "class": '_styler_message'
    }, innerDiv = util.node('div')));
    innerDiv.innerHTML = msg;
    setTimeout((function() {
      return div.className += ' visible';
    }), 1);
    setTimeout((function() {
      return div.className += ' hidden';
    }), 3000);
    return setTimeout((function() {
      return document.body.removeChild(div);
    }), 5000);
  };

  lastRightClickedElement = null;

  inspectOnActivation = false;

  _dispatch = function(name, data) {
    var event;
    event = document.createEvent('CustomEvent');
    if (!event) {
      return;
    }
    event.initCustomEvent(name, true, true, data);
    return document.dispatchEvent(event);
  };

  dispatchLoadedEvent = function() {
    var script, scripts, _i, _len, _results;
    scripts = document.getElementsByTagName('script');
    _dispatch('stylerload', getSessionId());
    document.addEventListener('stylerinspect', function(e) {
      var id;
      if (isActive) {
        if (lastRightClickedElement) {
          id = getOutlineId(lastRightClickedElement);
          sendMessage('inspect', {
            id: id
          });
          return _dispatch('requestfocuschange', getSessionId());
        }
      } else {
        _dispatch('activatefrominspector', getSessionId());
        if (lastRightClickedElement) {
          return inspectOnActivation = true;
        }
      }
    });
    document.addEventListener('mousedown', function(e) {
      if (e.button === 2 && e.target) {
        return lastRightClickedElement = e.target;
      }
    }, true);
    _results = [];
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (script.getAttribute('src') && -1 !== script.getAttribute('src').indexOf('/styler.js')) {
        _results.push(script.setAttribute('data-session-id', getSessionId()));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  makeURLUnique = function(url) {
    var parts1, parts2;
    parts1 = url.split('#');
    parts2 = parts1[0].split('?');
    if (parts2.length > 1) {
      parts2[1] += '&_styler_embed=1';
    } else {
      parts2[0] += '?_styler_embed=1';
    }
    parts1[0] = parts2.join('?');
    return parts1.join('#');
  };

  toggleApplicationMode = function(cb) {
    if (getEmbedMode()) {
      return getEmbedMode().toggleApplicationMode(cb);
    } else {
      if (util.$('_styler_iframe')) {
        return openConsole('window');
      } else if (isSupportedAgent()) {
        openConsole('iframe');
        return typeof cb === "function" ? cb() : void 0;
      }
    }
  };

  getEmbedMode = function() {
    var _ref;
    if (window.parent !== window) {
      return (_ref = window.parent) != null ? _ref.__styler_embed : void 0;
    }
  };

  embed = null;

  startEmbedMode = function() {
    var child, head, i, loadScript, script, scripts, timeoutIndex, url, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _ref4;
    if (window.__styler_embed) {
      return;
    }
    scripts = document.getElementsByTagName('script');
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if ((_ref = (url = script.getAttribute('src'))) != null ? _ref.match(/styler\.js$/) : void 0) {
        loadScript = url;
      }
    }
    if (socket != null) {
      socket.disconnect();
    }
    if (ua.isMoz) {
      head = document.getElementsByTagName('head')[0];
      for (i = _j = _ref1 = head.children.length - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; i = _ref1 <= 0 ? ++_j : --_j) {
        child = head.children[i];
        if (!(child.tagName === 'script' && ((_ref2 = child.getAttribute('src')) != null ? _ref2.match(/styler\.js$/) : void 0))) {
          head.removeChild(child);
        }
      }
      for (i = _k = _ref3 = document.body.children.length - 1; _ref3 <= 0 ? _k <= 0 : _k >= 0; i = _ref3 <= 0 ? ++_k : --_k) {
        child = document.body.children[i];
        if (!(child.tagName === 'script' && ((_ref4 = child.getAttribute('src')) != null ? _ref4.match(/styler\.js$/) : void 0))) {
          document.body.removeChild(child);
        }
      }
    } else {
      document.write('<body></body>');
    }
    window.addEventListener('message', function(e) {
      var iframe;
      if (e.data === 'close-iframe') {
        iframe = util.$('_styler_iframe');
        if (iframe) {
          iframe.parentNode.removeChild(iframe);
        }
        return util.style(util.$('_styler_embed'), {
          width: '100%'
        });
      } else if (e.data === 'getEmbedMode') {
        return e.source.postMessage({
          embedInfo: true,
          iframeMode: getIframeMode(),
          baseURL: baseURL
        }, '*');
      } else if (e.data === 'toggleIframeMode') {
        toggleIframeMode();
        return e.source.postMessage({
          embedInfo: true,
          iframeMode: getIframeMode()
        }, '*');
      }
    }, false);
    util.installStyles(STYLER_CSS);
    timeoutIndex = setTimeout((function() {}), 1e6);
    for (i = _l = 0; 0 <= timeoutIndex ? _l <= timeoutIndex : _l >= timeoutIndex; i = 0 <= timeoutIndex ? ++_l : --_l) {
      clearTimeout(i);
    }
    document.body.style.cssText = 'margin:0;height:100%';
    document.body.parentNode.style.cssText = 'margin:0;height:100%';
    embed = util.node('iframe', {
      id: '_styler_embed',
      src: makeURLUnique(window.location.href)
    });
    document.body.appendChild(embed);
    window.__styler_embed = {
      tryToggleHideIframe: tryToggleHideIframe,
      toggleApplicationMode: toggleApplicationMode
    };
    return embed.addEventListener('load', function() {
      var e, hasScript, scripturl, _len1, _m, _ref5;
      try {
        url = embed.contentWindow.location.href.replace(/[\?&]_styler_embed=1/, '');
      } catch (_error) {
        e = _error;
        console.log(e);
      }
      if (0 === url.indexOf(baseURL)) {
        scripts = embed.contentDocument.getElementsByTagName('script');
        for (_m = 0, _len1 = scripts.length; _m < _len1; _m++) {
          script = scripts[_m];
          if ((_ref5 = (scripturl = script.getAttribute('src'))) != null ? _ref5.match(/styler\.js$/) : void 0) {
            hasScript = scripturl;
          }
        }
        if (!hasScript) {
          script = util.node('script', {
            src: loadScript,
            'type': 'text/javascript'
          });
          embed.contentDocument.body.appendChild(script);
        }
        return history.replaceState({}, embed.contentDocument.title, url);
      }
    });
  };

  STYLER_CSS = "._styler_message {\n  position: fixed;\n  bottom: 0px;\n  right: -100px;\n  opacity: 0;\n  z-index: 10000;\n  -webkit-transition: opacity 1s, right 1.5s;\n  -moz-transition: opacity 1s, right 1.5s;\n}\n._styler_message div {\n  padding: 5px;\n  text-align: center;\n  font-family: Helvetica;\n  font-size: 13px;\n  line-height: 120%;\n  border-left: 10px solid #185ABA;\n  background: #237bff;\n  color: #fff;\n}\n._styler_message div span {\n  font-weight: bold;\n}\n._styler_message.visible{\n  opacity: 1;\n  right: 0px;\n}\n._styler_message.hidden {\n  opacity: 0;\n  right: -100px;\n}\n#_styler_iframe {\n  position: fixed;\n  height: 96%;\n  right: 10px;\n  top: 2%;\n  opacity: 1;\n  z-index: 100000;\n  -webkit-transition: right .5s, opacity .5s, height .5s, top .5s;\n  -moz-transition: right .5s, opacity .5s, height .5s;\n  border-left: 6px solid rgba(255,255,255,0);\n  cursor: ew-resize;\n}\n#_styler_iframe iframe {\n  cursor: default;\n  border: none;\n  background: #fff;\n  width: 100%;\n  height: 100%;\n}\nbody.is-resizing iframe {\n  pointer-events: none;\n}\n.inspectorResult {\n  width:200px;\n  border: 1px solid #999;\n  padding: 5px;\n  position:fixed;\n  top:0px;\n  right:0px;\n  display:none;\n  background: #fff;\n  z-index: 2147483646;\n  font-family: Arial;\n  color: #000;\n  font-size: 13px;\n  line-height 150%;\n}\n.styler-reset {\n  overflow:visible;\n  position:absolute;\n  left:0px;\n  top:0px;\n  -webkit-box-sizing:border-box;\n  box-sizing:border-box;\n  width:0px;\n  height:0px;\n  z-index: 2147483646;\n}\n.styler-controls .inspector-area {\n  border: 1px solid #c00;\n  background: rgba(150,150,240,.3);\n  display: none;\n}\n#_styler_embed {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  border: 0;\n  -webkit-transition: width .5s;\n  -moz-transition: width .5s;\n}\n.is-sidebyside #_styler_iframe {\n  top: 0px;\n  height: 100%;\n  right: 0px;\n}\n.is-resizing #_styler_embed {\n  -webkit-transition: none;\n  -moz-transition: none;\n}";

  this.styler = {
    init: init
  };

}).call(this);
