// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/editor/autocompleter', ['require', 'exports', 'module' , 'lib/propertycompletions'], function(require, exports, module) {
    var PropertyCompletions, addProperty, complete, completeAtRule, completeProperty, completePseudo, completeSelector, properties, propertiesBase, propertiesBaseMoz, propertiesBaseMozWebkit, propertiesBaseMs, propertiesBaseO, propertiesBaseWebkit, propertiesStylus, pseudoClasses;
    PropertyCompletions = require("lib/propertycompletions");
    completeSelector = function(format, selector, parent, offset, cb) {
      var before, c, found, p, parentSelectors, part, parts, selectorAfter, selectorBefore, _i, _j, _len, _len1;
      if (selector.length !== offset && selector[offset] !== " ") {
        return cb(null);
      }
      before = selector.substr(0, offset);
      parts = selector.split(" ");
      selectorBefore = [];
      selectorAfter = [];
      c = 0;
      found = false;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (found) {
          selectorAfter.push(part);
        } else {
          c += part.length + 1;
        }
        if (c <= offset) {
          selectorBefore.push(part);
        } else if (!found) {
          selectorBefore = (selectorBefore.join(" ")).trim();
          offset -= c - part.length - 1;
          found = true;
          selector = part;
        }
      }
      selectorAfter = (selectorAfter.join(" ")).trim();
      parentSelectors = [];
      for (_j = 0, _len1 = parent.length; _j < _len1; _j++) {
        p = parent[_j];
        if (selectorBefore) {
          if (selectorBefore.indexOf("&") !== -1) {
            parentSelectors.push(selectorBefore.replace("&", p));
          } else {
            parentSelectors.push(p + " " + selectorBefore);
          }
        } else {
          parentSelectors.push(p);
        }
      }
      return app.console.callClient("findElementMatches", {
        selector: selector,
        parent: parentSelectors,
        offset: offset,
        after: selectorAfter
      }, function(resp) {
        return cb({
          items: _.map(resp.results.sort(), function(value) {
            return {
              value: value
            };
          }),
          offset: offset
        });
      });
    };
    propertiesBase = "alignment-baseline|background|background-attachment|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|baseline-shift|border|border-color|border-width|border-style|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|bottom|box-shadow|box-sizing|caption-side|clear|clip|clip-path|clip-rule|color|color-interpolation|color-interpolation-filters|color-rendering|content|counter-increment|counter-reset|cursor|direction|display|dominant-baseline|empty-cells|fill|fill-opacity|fill-rule|filter|float|flood-color|flood-opacity|font|font-family|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-weight|glyph-orientation-horizontal|glyph-orientation-vertical|height|image-rendering|ime-mode|kerning|left|letter-spacing|lighting-color|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-bottom|margin-left|margin-right|margin-top|marker|marker-end|marker-mid|marker-offset|marker-start|mask|max-height|max-width|min-height|min-width|opacity|orphans|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-x|overflow-y|padding|padding-bottom|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside|pointer-events|position|quotes|resize|right|ruby-align|ruby-overhang|ruby-position|shape-rendering|speak|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|table-layout|text-align|text-anchor|text-decoration|text-indent|text-justify-trim|text-kashida|text-overflow|text-rendering|text-shadow|text-transform|top|unicode-bidi|vector-effect|vertical-align|visibility|white-space|widows|width|word-break|word-spacing|word-wrap|z-index|zoom|marks";
    propertiesBaseMozWebkit = "animation|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|appearance|backface-visibility|border-image|box-align|box-direction|box-flex|box-ordinal-group|box-orient|box-pack|column-count|column-gap|column-rule-color|column-rule-style|column-rule-width|column-width|hyphens|perspective|perspective-origin|transform|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function|user-modify|user-select";
    propertiesBaseWebkit = "background-inline-policy|binding|border-bottom-colors|border-left-colors|border-right-colors|border-top-colors|box-sizing|column-rule|float-edge|font-feature-settings|font-language-override|force-broken-image-icon|image-region|orient|outline-radius|outline-radius-bottomleft|outline-radius-bottomright|outline-radius-topleft|outline-radius-topright|stack-sizing|tab-size|text-blink|text-decoration-color|text-decoration-line|text-decoration-style|user-focus|user-input|window-shadow";
    propertiesBaseMoz = "background-clip|background-composite|background-origin|background-size|border-fit|border-horizontal-spacing|border-vertical-spacing|box-flex-group|box-lines|box-reflect|box-shadow|color-correction|column-break-after|column-break-before|column-break-inside|column-span|dashboard-region|flow-into|font-smoothing|highlight|hyphenate-character|hyphenate-limit-after|hyphenate-limit-before|hyphenate-limit-lines|line-box-contain|line-break|line-clamp|locale|margin-after-collapse|margin-before-collapse|marquee|marquee-direction|marquee-increment|marquee-repetition|marquee-style|mask|mask-attachment|mask-box-image|mask-box-image-outset|mask-box-image-repeat|mask-box-image-slice|mask-box-image-source|mask-box-image-width|mask-clip|mask-composite|mask-image|mask-origin|mask-position|mask-repeat|mask-size|nbsp-mode|region-break-after|region-break-before|region-break-inside|region-overflow|rtl-ordering|svg-shadow|tap-highlight-color|text-combine|text-decorations-in-effect|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-fill-color|text-orientation|text-security|text-stroke-color|text-stroke-width|transform-style|user-drag|writing-mode";
    propertiesBaseMs = "accelerator|background-position-x|background-position-y|behavior|block-progression|filter|ime-mode|interpolation-mode|layout-flow|layout-grid|layout-grid-char|layout-grid-line|layout-grid-mode|layout-grid-type|line-break|overflow-x|overflow-y|scrollbar-3dlight-color|scrollbar-arrow-color|scrollbar-base-color|scrollbar-darkshadow-color|scrollbar-face-color|scrollbar-highlight-color|scrollbar-shadow-color|scrollbar-track-color|text-align-last|text-autospace|text-justify|text-kashida-space|text-overflow|text-size-adjust|text-underline-position|transform-origin-x|transform-origin-y|word-break|word-wrap|writing-mode|zoom";
    propertiesBaseO = "border-image|link|link-source|tab-size|table-baseline|transform|transform-origin|transition|transition-delay|transition-duration|transition-property|transition-timing-function";
    propertiesStylus = "no-wrap?|box-shadow|user-select|column-count|column-gap|column-rule|column-rule-color|column-rule-width|column-rule-style|column-width|background-size|transform|border-image|transition|transition-property|transition-duration|transition-timing-functions|transition-delay|backface-visibility|opacity|whitespace|box-sizing|box-orient|box-flex|box-flex-group|box-align|box-pack|box-direction|animation|animation-name|animation-duration|animation-delay|animation-iteration-count|animation-timing-function|animation-play-state|animation-fill-mode|border-image|hyphens|appearance|border-radius|reset-box-model?|reset-font?|reset-body?|reset-html5?|fixed|absolute|relative|clearfix?|box|@extends";
    properties = propertiesBase.split("|");
    addProperty = function(propStr, pfx) {
      var prop, _i, _len, _ref, _results;
      _ref = propStr.split("|");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        _results.push(properties.push("-" + pfx + "-" + prop));
      }
      return _results;
    };
    addProperty(propertiesBaseMozWebkit, "webkit");
    addProperty(propertiesBaseMozWebkit, "moz");
    addProperty(propertiesBaseWebkit, "webkit");
    addProperty(propertiesBaseMoz, "moz");
    addProperty(propertiesBaseMs, "ms");
    addProperty(propertiesBaseO, "o");
    propertiesStylus = propertiesStylus.split("|");
    pseudoClasses = "hover|focus|active|link|visited||lang|first-child|last-child|first-line|first-letter|before|after".split("|");
    completeProperty = function(format, property, offset, cb) {
      var filter, matches;
      property = property.toLowerCase();
      filter = function(p) {
        return p.length >= property.length && p.indexOf(property) === 0;
      };
      matches = _.filter(properties, filter);
      if (format) {
        matches = matches.concat(_.filter(propertiesStylus, filter));
      }
      return cb({
        items: _.map(matches.sort(), function(m) {
          if (m[m.length - 1] === "?") {
            return {
              value: m.substr(0, m.length - 1)
            };
          } else {
            return {
              value: m,
              property: true
            };
          }
        }),
        offset: offset
      });
    };
    completePseudo = function(pseudo, offset, cb) {
      var matches;
      pseudo = pseudo.toLowerCase();
      matches = _.filter(pseudoClasses, function(p) {
        return p.length >= pseudo.length && p.indexOf(pseudo) === 0;
      });
      return cb({
        items: _.map(matches, function(m) {
          return {
            value: m
          };
        }),
        offset: offset
      });
    };
    completeAtRule = function(format, rule, offset, cb) {
      var atrules, matches, pfx;
      atrules = '@font-face|@import|@media|@keyframes|@charset|@page'.split('|');
      console.log('stylus', format);
      if (format === 'css') {
        atrules = atrules.concat((function() {
          var _i, _len, _ref, _results;
          _ref = 'webkit|moz|o|ms'.split('|');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pfx = _ref[_i];
            _results.push("@-" + pfx + "-keyframes");
          }
          return _results;
        })());
      }
      matches = _.filter(atrules, function(r) {
        return r.length >= rule.length && r.indexOf(rule) === 0;
      });
      return cb({
        items: _.map(matches, function(m) {
          return {
            value: m,
            sfx: ' '
          };
        }),
        offset: offset
      });
    };
    complete = function(format, req, cb) {
      switch (req.type) {
        case "selector":
          return completeSelector(format, req.selector, req.parent, req.offset, cb);
        case "property":
          return completeProperty(format, req.property, req.offset, cb);
        case "value":
          req.value = req.value.replace(/[\!;].*$/, "");
          if (req.offset > req.value.length) {
            return cb(null);
          }
          return PropertyCompletions.complete(format, req.property, req.value, req.offset, cb);
        case "pseudo":
          return completePseudo(req.pseudo, req.offset, cb);
        case 'atrule':
          return completeAtRule(format, req.rule, req.offset, cb);
        case 'atrulevalue':
          return PropertyCompletions.completeAtRule(format, req.rule, req.value, req.offset, cb);
      }
    };
    exports.complete = complete;
    return exports;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  define('lib/propertycompletions', ['require', 'exports', 'module' , 'lib/utils'], function(require, exports, module) {
    var AnyCompleter, BaseCompleter, BgCompleter, BgLayerCompleter, ColorCompleter, ColorPickerDialogCompleter, ExtendedSelectorCompleter, FunctionCompleter, HexColorCompleter, ListCompleter, MultiCompleter, PathCompleter, QuotesCompleter, RgbColorCompleter, UnitCompleter, UrlCompleter, UsedFontCompleter, ValueCompleter, angleCompleter, angleListCompleter, atRulesCompletions, baseCompleter, baseListCompleter, bgPositionXCompleter, bgPositionYCompleter, bgRepeatCompleter, bg_pos_compl, borderCompleter, clearEndSpaces, colorCompleter, combineUrl, complete, completeAtRule, completions, fontCompleter, fontFamilyCompleter, getPart, imageCompleter, importCompleter, makeArrayCompleter, makeArrayCompleterSingle, mediaCompleter, nibCompleter, parallel, shadow_compl, stylusCompletions, transformFuncCompleter, transitionCompleter, transitionPropertyCompleter, transitionTimeCompleter, transitionTimingCompleter, unitCompleter, unitCompleterAuto, unitCompleterInherit, unitCompleterInheritAuto, unitListCompleter, _ref;
    _ref = require('lib/utils'), parallel = _ref.parallel, combineUrl = _ref.combineUrl, getPart = _ref.getPart, clearEndSpaces = _ref.clearEndSpaces;
    BaseCompleter = (function() {

      function BaseCompleter() {}

      BaseCompleter.prototype._parseConf = function(conf) {
        var parts;
        parts = conf.split('|');
        parts = _.map(parts, function(p) {
          var name, priority, _ref1;
          _ref1 = p.split(','), name = _ref1[0], priority = _ref1[1];
          return {
            name: name,
            priority: parseInt(priority || 0)
          };
        });
        parts.sort(function(a, b) {
          if (a.priority > b.priority) {
            return -1;
          } else if (a.priority < b.priority) {
            return 1;
          } else if (a.name < b.name) {
            return -1;
          } else if (a.name > b.name) {
            return 1;
          } else {
            return 0;
          }
        });
        return _.map(parts, function(i) {
          return i.name;
        });
      };

      return BaseCompleter;

    })();
    ValueCompleter = (function(_super) {

      __extends(ValueCompleter, _super);

      function ValueCompleter(conf) {
        this.options = this._parseConf(conf);
      }

      ValueCompleter.prototype.complete = function(value, offset, format, cb) {
        var items;
        value = clearEndSpaces(value, offset);
        if (value.length !== offset) {
          return cb();
        }
        value = value.toLowerCase();
        items = _.filter(this.options, function(item) {
          return item.toLowerCase().indexOf(value) === 0;
        });
        return cb({
          items: _.map(items, function(i) {
            return {
              value: i,
              offset: offset
            };
          })
        });
      };

      ValueCompleter.prototype.matches = function(value) {
        var _ref1;
        return _ref1 = value.toLowerCase(), __indexOf.call(this.options, _ref1) >= 0;
      };

      return ValueCompleter;

    })(BaseCompleter);
    UnitCompleter = (function(_super) {

      __extends(UnitCompleter, _super);

      function UnitCompleter(conf) {
        this.options = this._parseConf(conf);
        this.regexp = new RegExp('^[0-9]+(' + (this.options.join('|')) + ')$', 'i');
      }

      UnitCompleter.prototype.complete = function(value, offset, format, cb) {
        var items, match, unit;
        if (value.length !== offset) {
          return cb();
        }
        match = value.match(/^-?[\.0-9]+/);
        if (!match || value === '0') {
          return cb();
        }
        unit = value.substr(match[0].length);
        items = _.filter(this.options, function(item) {
          return item.indexOf(unit) === 0;
        });
        return cb({
          items: _.map(items, function(i) {
            return {
              value: i,
              offset: offset - match[0].length
            };
          })
        });
      };

      UnitCompleter.prototype.matches = function(value) {
        return !!value.match(this.regexp);
      };

      return UnitCompleter;

    })(BaseCompleter);
    AnyCompleter = (function() {

      function AnyCompleter() {
        var subs;
        subs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.subs = [];
        _.each(subs, this.addSub, this);
      }

      AnyCompleter.prototype.addSub = function(sub) {
        if (sub.completer == null) {
          sub = {
            completer: sub
          };
        }
        if (!sub.empty) {
          sub.empty = false;
        }
        if (sub.completer) {
          this.subs.push(sub);
        }
        return this;
      };

      AnyCompleter.prototype.findCompleters = function() {
        return this.subs;
      };

      AnyCompleter.prototype.complete = function(value, offset, format, cb) {
        var items, subs,
          _this = this;
        subs = this.findCompleters(value, format);
        if (!(subs != null ? subs.length : void 0)) {
          return cb([]);
        }
        items = [];
        return parallel(subs, function(sub, done) {
          if (value.length === 0 && subs.length > 1 && !sub.empty) {
            return done();
          }
          return sub.completer.complete(value, offset, format, function(completions) {
            var i, _i, _len, _ref1;
            if (completions != null ? completions.items : void 0) {
              _ref1 = completions.items;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                i = _ref1[_i];
                items.push(i);
              }
            }
            return done();
          });
        }, function() {
          return cb({
            items: _.uniq(items, false, function(i) {
              return i.value;
            })
          });
        });
      };

      AnyCompleter.prototype.matches = function(value) {
        var sub, _i, _len, _ref1;
        _ref1 = this.subs;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          sub = _ref1[_i];
          if (sub.completer.matches(value)) {
            return true;
          }
        }
        return false;
      };

      return AnyCompleter;

    })();
    MultiCompleter = (function() {

      function MultiCompleter() {
        var subs;
        subs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.separator = ' ';
        this.subs = [];
        _.each(subs, this.addSub, this);
      }

      MultiCompleter.prototype.addSub = function(sub) {
        if (sub.completer == null) {
          sub = {
            completer: sub
          };
        }
        if (!sub.limit) {
          sub.limit = 100;
        }
        if (!sub.empty) {
          sub.empty = false;
        }
        if (sub.completer) {
          this.subs.push(sub);
        }
        return this;
      };

      MultiCompleter.prototype.setSeparator = function(separator) {
        this.separator = separator;
        return this;
      };

      MultiCompleter.prototype.complete = function(value, offset, format, cb) {
        var active, completer;
        active = getPart(value, this.separator, offset);
        completer = this.findCompleter(active);
        if (!completer) {
          return cb();
        }
        return completer.complete(active.txt, active.offset, format, cb);
      };

      MultiCompleter.prototype.findCompleter = function(active) {
        var compl, i, part, sub, subs, _i, _j, _k, _len, _len1, _len2, _ref1;
        subs = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.subs;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            sub = _ref1[_i];
            _results.push(_.clone(sub));
          }
          return _results;
        }).call(this);
        _ref1 = active.parts;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          part = _ref1[i];
          if ((active != null ? active.i : void 0) !== i) {
            for (_j = 0, _len1 = subs.length; _j < _len1; _j++) {
              sub = subs[_j];
              if (sub.limit > 0 && sub.completer.matches(part)) {
                sub.limit--;
                break;
              }
            }
          }
        }
        compl = new AnyCompleter;
        for (_k = 0, _len2 = subs.length; _k < _len2; _k++) {
          sub = subs[_k];
          if (sub.limit > 0) {
            compl.addSub(sub);
          }
        }
        return compl;
      };

      MultiCompleter.prototype.matches = function(value) {
        return false;
      };

      return MultiCompleter;

    })();
    ListCompleter = (function(_super) {

      __extends(ListCompleter, _super);

      function ListCompleter() {
        var subs;
        subs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        this.subs = subs;
        this.setSeparator(',');
      }

      ListCompleter.prototype.complete = function(value, offset, format, cb) {
        var active, compl,
          _this = this;
        active = getPart(value, this.separator, offset);
        if (!value.length) {
          active.i = 0;
        }
        compl = this.findCompleter(active);
        if (!(compl && (active.txt != null) && active.i < this.subs.length)) {
          return cb();
        }
        return typeof compl.complete === "function" ? compl.complete(active.txt, active.offset, format, function(completion) {
          var items;
          items = completion != null ? completion.items : void 0;
          if (!items) {
            return cb();
          }
          _.each(items, function(i) {
            var _ref1;
            if (!i.incomplete) {
              if (active.i < active.parts.length - 1) {
                if (i.cursor == null) {
                  i.cursor = 1;
                }
                return i.incomplete = true;
              } else if (active.i < _this.subs.length) {
                if (i.cursor == null) {
                  i.sfx = ((_ref1 = i.sfx) != null ? _ref1 : i.sfx = '') + ', ';
                }
                return i.incomplete = true;
              }
            }
          });
          return cb({
            items: items
          });
        }) : void 0;
      };

      ListCompleter.prototype.findCompleter = function(active) {
        if ((active != null ? active.i : void 0) != null) {
          return this.subs[active.i];
        } else {
          return null;
        }
      };

      return ListCompleter;

    })(MultiCompleter);
    QuotesCompleter = (function(_super) {

      __extends(QuotesCompleter, _super);

      function QuotesCompleter(base) {
        this.base = base;
      }

      QuotesCompleter.prototype.complete = function(value, offset, format, cb) {
        var addQuote, quote, _ref1;
        addQuote = false;
        quote = '';
        if (_ref1 = value[0], __indexOf.call("'\"", _ref1) >= 0) {
          quote = value[0];
          value = value.substr(1);
          offset--;
          if (value.slice(-1)[0] === quote) {
            value = value.slice(0, -1);
          } else {
            addQuote = true;
          }
        }
        return this.base.complete(value, offset, format, function(completion) {
          var items;
          items = completion != null ? completion.items : void 0;
          if (!items) {
            return cb();
          }
          items = _.map(items, function(i) {
            var hasspace, padd, _addQuote, _pfx, _quote, _sfx;
            if (i.incomplete) {
              return i;
            }
            _quote = quote;
            _addQuote = addQuote;
            hasspace = !!i.value.match(/\s/);
            if (hasspace && !_quote) {
              _pfx = _quote = '"';
              _addQuote = true;
            }
            if (_quote) {
              _sfx = _quote;
              if (!_addQuote) {
                padd = 1;
              }
            }
            if (_pfx) {
              if (i.pfx != null) {
                i.pfx = _pfx + i.pfx;
              } else {
                i.pfx = _pfx;
              }
            }
            if (_sfx) {
              if (i.sfx != null) {
                i.sfx += _sfx;
              } else {
                i.sfx = _sfx;
              }
            }
            if (padd) {
              if (i.padd != null) {
                i.padd += _padd;
              } else {
                i.padd = padd;
              }
            }
            return i;
          });
          return cb({
            items: items
          });
        });
      };

      QuotesCompleter.prototype.matches = function(value) {
        var _ref1;
        if (_ref1 = value[0], __indexOf.call("'\"", _ref1) >= 0) {
          return value[0] === value.slice(-1)[0] && this.base.matches(value.substr(1, value.length - 2));
        } else {
          return this.base.matches(value);
        }
      };

      return QuotesCompleter;

    })(BaseCompleter);
    FunctionCompleter = (function(_super) {

      __extends(FunctionCompleter, _super);

      function FunctionCompleter(options) {
        this.options = options;
        this.regexp = new RegExp('^(' + (_.map(this.options, function(o) {
          return o.name;
        })).join('|') + ')\\(.*\\)$', 'i');
      }

      FunctionCompleter.prototype.complete = function(value, offset, format, cb) {
        var addParen, cursor, parenindex, res, sub, subval;
        value = value.toLowerCase();
        if (value.length === offset) {
          res = _.select(this.options, function(o) {
            return 0 === (o.name + '()').indexOf(value) && value.length <= o.name.length;
          });
          if (res.length) {
            return cb({
              items: _.map(res, function(o) {
                return {
                  value: o.name + '()',
                  offset: offset,
                  cursor: -1,
                  func: 1
                };
              })
            });
          }
        }
        parenindex = value.indexOf('(');
        if (!(parenindex > 0 && (sub = _.find(this.options, function(o) {
          return o.name === value.substr(0, parenindex);
        })))) {
          return cb();
        }
        addParen = true;
        cursor = 0;
        subval = value.substr(parenindex + 1);
        if (subval.slice(-1)[0] === ')') {
          subval = subval.slice(0, -1);
          addParen = false;
          cursor = 1;
        }
        offset -= parenindex + 1;
        return sub.completer.complete(subval, offset, format, function(completion) {
          var items;
          items = completion != null ? completion.items : void 0;
          if (!items) {
            return cb();
          }
          items = _.map(items, function(i) {
            if (!i.incomplete) {
              if (addParen) {
                if (i.sfx != null) {
                  i.sfx += ')';
                } else {
                  i.sfx = ')';
                }
              }
              if (cursor) {
                if (i.cursor != null) {
                  i.cursor += cursor;
                } else {
                  i.cursor = cursor;
                }
              }
            }
            return i;
          });
          return cb({
            items: items
          });
        });
      };

      FunctionCompleter.prototype.matches = function(value) {
        return !!(typeof value.match === "function" ? value.match(this.regexp) : void 0);
      };

      return FunctionCompleter;

    })(BaseCompleter);
    UrlCompleter = (function(_super) {

      __extends(UrlCompleter, _super);

      function UrlCompleter() {
        UrlCompleter.__super__.constructor.call(this, [
          {
            name: 'url',
            completer: new QuotesCompleter(new PathCompleter)
          }
        ]);
      }

      return UrlCompleter;

    })(FunctionCompleter);
    PathCompleter = (function(_super) {

      __extends(PathCompleter, _super);

      function PathCompleter() {
        this.regexp = /[a-z0-9-_\/\.]/i;
      }

      PathCompleter.prototype.complete = function(value, offset, format, cb) {
        var baseUrl, index, url, val;
        if (offset !== value.length) {
          return cb();
        }
        index = value.search(/([\(\/'"][^\(\/'"]*$)/);
        offset -= 1 + index;
        val = value.substr(index + 1);
        if (val.length && 0 === '..'.indexOf(val)) {
          return cb({
            items: [
              {
                value: '../',
                offset: offset,
                incomplete: 1
              }
            ]
          });
        }
        baseUrl = app.console.getCurrentFile();
        url = combineUrl(baseUrl, value);
        if (!url) {
          return cb();
        }
        return app.console.callAPI('GetImgList', {
          url: url
        }, function(list) {
          var params;
          if (!list) {
            return cb();
          }
          params = {
            items: _.map(list, function(i) {
              var item;
              item = {
                value: i,
                offset: offset
              };
              if (i.slice(-1)[0] === '/') {
                item.incomplete = 1;
              } else {
                item.preview = url;
              }
              return item;
            })
          };
          return cb(params);
        });
      };

      return PathCompleter;

    })(BaseCompleter);
    UsedFontCompleter = (function(_super) {

      __extends(UsedFontCompleter, _super);

      function UsedFontCompleter() {
        return UsedFontCompleter.__super__.constructor.apply(this, arguments);
      }

      UsedFontCompleter.prototype.complete = function(value, offset, format, cb) {
        var fonts, items, _ref1;
        value = value.toLowerCase();
        fonts = (_ref1 = app.stats) != null ? _ref1.fonts.items : void 0;
        if (!(fonts && value.length === offset)) {
          return cb();
        }
        items = _.select(fonts, function(f) {
          return -1 !== f.name.toLowerCase().indexOf(value);
        });
        items = _.sortBy(items, function(f) {
          return -f.count;
        });
        return cb({
          items: _.map(items, function(i) {
            return {
              value: i.name,
              offset: offset
            };
          })
        });
      };

      UsedFontCompleter.prototype.matches = function(value) {
        var fonts, _ref1;
        fonts = (_ref1 = app.stats) != null ? _ref1.fonts.items : void 0;
        value = value.toLowerCase();
        if (fonts) {
          return _.find(fonts, function(f) {
            return f.name.toLowerCase() === value;
          });
        }
        return false;
      };

      return UsedFontCompleter;

    })(BaseCompleter);
    ExtendedSelectorCompleter = (function(_super) {

      __extends(ExtendedSelectorCompleter, _super);

      function ExtendedSelectorCompleter() {}

      ExtendedSelectorCompleter.prototype.complete = function(value, offset, format, cb) {
        var cursor, line, lines, name, tab, val, _i, _len, _ref1;
        tab = app.console.editor.tabs.selectedTab();
        cursor = tab.session.selection.getCursor();
        lines = tab.contentManager.outlinelines;
        this.options = [];
        for (line in lines) {
          val = lines[line];
          if (line < cursor.row) {
            _ref1 = val.name;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              name = _ref1[_i];
              this.options.push(name);
            }
          }
        }
        return ExtendedSelectorCompleter.__super__.complete.call(this, value, offset, format, cb);
      };

      return ExtendedSelectorCompleter;

    })(ValueCompleter);
    HexColorCompleter = (function(_super) {

      __extends(HexColorCompleter, _super);

      function HexColorCompleter() {
        this.regexp = /^#[0-9a-f]{3,6}$/i;
      }

      HexColorCompleter.prototype.complete = function(value, offset, format, cb) {
        var items, stats, _ref1;
        value = value.toLowerCase();
        stats = (_ref1 = app.stats) != null ? _ref1.colors.items : void 0;
        if (!(stats && value.length === offset)) {
          return cb([]);
        }
        items = _.select(stats, function(c) {
          return c.hex && (-1 !== c.hex.indexOf(value)) && c.hex.length > value.length;
        });
        items = _.sortBy(items, function(c) {
          return c.count;
        });
        return cb({
          items: _.map(items, function(i) {
            return {
              value: i.hex,
              offset: offset,
              color: 1
            };
          })
        });
      };

      HexColorCompleter.prototype.matches = function(value) {
        return !!value.match(this.regexp);
      };

      return HexColorCompleter;

    })(BaseCompleter);
    RgbColorCompleter = (function(_super) {

      __extends(RgbColorCompleter, _super);

      function RgbColorCompleter() {
        this.regexp = /^rgba?\s*\([0-9\s\.%]{5,}\)$/i;
      }

      RgbColorCompleter.prototype.complete = function(value, offset, format, cb) {
        var a, b, g, items, mode_rgb, mode_rgba, padd, r, sep, stats, val, _ref1, _ref2;
        value = value.toLowerCase();
        stats = (_ref1 = app.stats) != null ? _ref1.colors.items : void 0;
        padd = 0;
        if (!(stats && value.length)) {
          return cb();
        }
        if (offset + 1 === value.length && value[value.length - 1] === ')') {
          value = value.substr(0, value.length - 1);
          padd = 1;
        }
        if (offset !== value.length) {
          return cb();
        }
        mode_rgb = 0 === 'rgb('.indexOf(value.substr(0, 4));
        mode_rgba = 0 === 'rgba('.indexOf(value.substr(0, 5));
        r = g = b = a = null;
        if (!(mode_rgb || mode_rgba)) {
          return cb();
        }
        val = value.replace(/^rgba?\s*\(\s*/i, '');
        while (val.length !== value.length && val.length) {
          r = (_ref2 = val.match(/^[0-9]+/)) != null ? _ref2[0] : void 0;
          if (!r) {
            return cb();
          }
          val = val.substr(r.length);
          if (!val.length) {
            break;
          }
          sep = (val.match(/^\s*,?\s*/))[0];
          if (!sep) {
            return cb();
          }
          val = val.substr(sep.length);
          if (!val.length) {
            break;
          }
          g = (val.match(/^[0-9]+/))[0];
          if (!g) {
            return cb();
          }
          val = val.substr(g.length);
          if (!val.length) {
            break;
          }
          sep = (val.match(/^\s*,?\s*/))[0];
          if (!sep) {
            return cb();
          }
          val = val.substr(sep.length);
          if (!val.length) {
            break;
          }
          b = (val.match(/^[0-9]+/))[0];
          if (!b) {
            return cb();
          }
          val = val.substr(b.length);
          if (!val.length) {
            break;
          }
          sep = (val.match(/^\s*,?\s*/))[0];
          if (!sep) {
            return cb();
          }
          val = val.substr(sep.length);
          if (!val.length) {
            break;
          }
          if (value[3] === 'a') {
            a = (val.match(/^[0-9\.]+/))[0];
            if (!a) {
              return cb();
            }
            val = val.substr(a.length);
            if (!val.length) {
              return cb();
            }
          }
          break;
        }
        items = _.select(stats, function(c) {
          return c.rgb && (r === null || 0 === c.rgb[0].toString().indexOf(r)) && (g === null || 0 === c.rgb[1].toString().indexOf(g)) && (b === null || 0 === c.rgb[2].toString().indexOf(b)) && (a === null || 0 === c.rgb[3].toString().indexOf(a));
        });
        items = _.sortBy(items, function(c) {
          return c.count;
        });
        return cb({
          items: _.map(items, function(i) {
            var rgba;
            rgba = value[3] === 'a' || i.rgb[3] !== 1;
            val = 'rgb';
            if (rgba) {
              val += 'a';
            }
            val += '(' + i.rgb[0] + ',' + i.rgb[1] + ',' + i.rgb[2];
            if (rgba) {
              val += ',' + i.rgb[3];
            }
            val += ')';
            return {
              value: val,
              offset: offset,
              color: 1,
              padd: padd
            };
          })
        });
      };

      RgbColorCompleter.prototype.matches = function(value) {
        return !!value.match(this.regexp);
      };

      return RgbColorCompleter;

    })(BaseCompleter);
    ColorPickerDialogCompleter = (function(_super) {

      __extends(ColorPickerDialogCompleter, _super);

      function ColorPickerDialogCompleter() {
        return ColorPickerDialogCompleter.__super__.constructor.apply(this, arguments);
      }

      ColorPickerDialogCompleter.prototype.complete = function(value, offset, format, cb) {
        var _ref1;
        if (!(!value.length || value.match(/^#[a-f0-9]{0,6}$/i))) {
          return cb(null);
        }
        if (offset === value.length && ((_ref1 = value.length) === 4 || _ref1 === 7)) {
          return cb(null);
        }
        return cb({
          items: [
            {
              value: 'Open picker',
              offset: 0,
              exec: function(editor, coord) {
                var _ref2;
                return (_ref2 = editor.commands) != null ? _ref2.startColorPicker(false, coord) : void 0;
              }
            }
          ]
        });
      };

      ColorPickerDialogCompleter.prototype.matches = function() {
        return false;
      };

      return ColorPickerDialogCompleter;

    })(BaseCompleter);
    ColorCompleter = (function(_super) {

      __extends(ColorCompleter, _super);

      function ColorCompleter() {
        var colorchange;
        ColorCompleter.__super__.constructor.call(this);
        colorchange = new ListCompleter(this, new BaseCompleter);
        this.addSub(this.stylusFunctions = new FunctionCompleter([
          {
            name: 'darken',
            completer: colorchange
          }, {
            name: 'lighten',
            completer: colorchange
          }, {
            name: 'saturate',
            completer: colorchange
          }, {
            name: 'desaturate',
            completer: colorchange
          }, {
            name: 'fade-out',
            completer: colorchange
          }, {
            name: 'fade-in',
            completer: colorchange
          }, {
            name: 'spin',
            completer: colorchange
          }, {
            name: 'dark',
            completer: this
          }, {
            name: 'light',
            completer: this
          }
        ]));
        this.addSub({
          completer: new ColorPickerDialogCompleter(),
          empty: true
        });
        this.addSub({
          completer: new ValueCompleter('aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|transparent')
        });
        this.addSub({
          completer: new HexColorCompleter,
          empty: true
        });
        this.addSub(new RgbColorCompleter);
      }

      ColorCompleter.prototype.findCompleters = function() {
        var _this = this;
        if (this.format !== 'stylus') {
          return _.filter(this.subs, function(sub) {
            return sub.completer !== _this.stylusFunctions;
          });
        } else {
          return this.subs;
        }
      };

      ColorCompleter.prototype.complete = function(value, offset, format, cb) {
        this.format = format;
        return ColorCompleter.__super__.complete.call(this, value, offset, format, function(res) {
          return cb({
            items: _.map(res != null ? res.items : void 0, function(i) {
              if (!(i.func || i.exec)) {
                i.color = 1;
              }
              return i;
            })
          });
        });
      };

      return ColorCompleter;

    })(AnyCompleter);
    makeArrayCompleterSingle = function(base) {
      return new MultiCompleter().setSeparator(',').addSub({
        completer: new MultiCompleter().addSub({
          completer: base,
          limit: 1,
          empty: true
        }),
        empty: true
      });
    };
    makeArrayCompleter = function(base) {
      return new MultiCompleter().setSeparator(',').addSub({
        completer: base,
        empty: true
      });
    };
    unitCompleter = new UnitCompleter('px,10|mm,1|cm,1|in,2|pt,1|pc,1|%,5|em,3|ex,1|ch|rem|vh|vw|vm');
    unitCompleterInherit = new AnyCompleter(unitCompleter, new ValueCompleter('inherit'));
    unitCompleterInheritAuto = new AnyCompleter(unitCompleter, new ValueCompleter('inherit|auto'));
    unitCompleterAuto = new AnyCompleter(unitCompleter, new ValueCompleter('auto'));
    colorCompleter = new ColorCompleter();
    imageCompleter = new AnyCompleter().addSub({
      completer: new UrlCompleter(),
      empty: true
    }).addSub({
      completer: new ValueCompleter('none')
    });
    fontFamilyCompleter = new QuotesCompleter(new AnyCompleter().addSub({
      empty: true,
      completer: new UsedFontCompleter()
    }).addSub({
      empty: true,
      completer: new ValueCompleter('serif|sans-serif|cursive|fantasy|monospace|Georgia|Palatino Linotype|Book Antiqua|Palatino|Times New Roman|Times|Arial|Helvetica|Arial Black|Gadget|Comic Sans MS|Impact|Charcoal|Lucida Sans Unicode|Lucida Grande|Tahoma|Geneva|Trebuchet MS|Verdana')
    }));
    stylusCompletions = {};
    completions = {};
    completions['border-image-source'] = completions['list-style-image'] = imageCompleter;
    completions.color = completions['background-color'] = completions['border-color'] = completions['border-bottom-color'] = completions['border-top-color'] = completions['border-left-color'] = completions['border-right-color'] = completions['column-rule-color'] = completions['outline-color'] = completions['text-decoration-color'] = colorCompleter;
    completions.position = new ValueCompleter('absolute|fixed|inherit|relative|static');
    completions.display = new ValueCompleter('block|inline|inline-block|inline-table|list-item|none|table|table-caption|table-cell|table-column|table-column-group|table-header-group|table-footer-group|table-row|table-row-group');
    completions.float = new ValueCompleter('inherit|left|none|right');
    completions.clear = new ValueCompleter('both|inherit|left|none|right');
    completions.direction = new ValueCompleter('ltr|rtl|inherit');
    completions['unicode-bidi'] = new ValueCompleter('normal|embed|bidi-override|inherit');
    completions['box-sizing'] = new ValueCompleter('border-box|content-box|padding-box');
    completions['list-style-type'] = new ValueCompleter('disc|circle|square|decimal|decimal-leading-zero|lower-roman|upper-roman|lower-greek|lower-alpha|lower-latin|upper-alpha|upper-latin|armenian|georgian|hebrew|cjk-ideographic|hiragana|katakana|hiragana-iroha|katakana-iroha');
    completions['list-style-position'] = new ValueCompleter('inside|outside|inherit');
    completions['border-style'] = completions['border-bottom-style'] = completions['border-top-style'] = completions['border-left-style'] = completions['border-right-style'] = new ValueCompleter('none|hidden|dashed|dotted|double|groove|inset|outset|ridge|solid,10');
    completions['outline-style'] = new ValueCompleter('none|hidden|dashed|dotted|double|groove|inset|outset|ridge|solid,10|auto|inherit');
    completions['font-style'] = new ValueCompleter('normal|italic|oblique|inherit');
    completions['text-transform'] = new ValueCompleter('capitalize|uppercase|lowercase|none|inherit');
    completions.overflow = completions['overflow-x'] = completions['overflow-y'] = new ValueCompleter('visible|hidden|scroll|auto|inherit');
    completions['empty-cells'] = new ValueCompleter('show|hide|inherit');
    completions['font-variant'] = new ValueCompleter('normal|small-caps|inherit');
    completions['font-weight'] = new ValueCompleter('normal,2|bold,3|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit');
    completions['font-stretch'] = new ValueCompleter('inherit|ultra-condensed|extra-condensed|condensed|semi-condensed|normal|semi-expanded|expanded|extra-expanded|ultra-expanded|wider|narrower');
    completions['font-size-adjust'] = new ValueCompleter('none|inherit');
    completions['font-size'] = new AnyCompleter(unitCompleter).addSub({
      completer: new ValueCompleter('xx-small|x-small|small,2|medium,3|large,1|x-large|xx-large|smaller|larger|inherit'),
      empty: true
    });
    completions['outline-width'] = completions['border-width'] = completions['border-top-width'] = completions['border-right-width'] = completions['border-bottom-width'] = completions['border-left-width'] = new AnyCompleter(unitCompleter, {
      completer: new ValueCompleter('thin,3|medium,2|thick,1|inherit'),
      empty: true
    });
    completions['width'] = completions['height'] = completions['left'] = completions['top'] = completions['right'] = completions['bottom'] = unitCompleterInheritAuto;
    completions['min-width'] = completions['min-height'] = completions['max-width'] = completions['max-height'] = new AnyCompleter(unitCompleter, new ValueCompleter('inherit|none'));
    completions['hyphens'] = new ValueCompleter('none|manual|auto');
    completions['image-rendering'] = new ValueCompleter('auto|inherit|optimizeSpeed|optimizeQuality|-moz-crisp-edges|-o-crisp-edges|-webkit-optimize-contrast');
    completions['letter-spacing'] = completions['line-height'] = new AnyCompleter(unitCompleter, {
      completer: new ValueCompleter('normal'),
      empty: true
    });
    completions['visibility'] = completions['backface-visibility'] = new ValueCompleter('visible,2|hidden,3|collapse|inherit');
    completions['vertical-align'] = new AnyCompleter(unitCompleter, new ValueCompleter('baseline|sub|super|text-top|text-bottom|middle,3|top,3|bottom,3|inherit'));
    completions['text-align'] = new ValueCompleter('left,4|center,4|right,4|justify,3|start|end|inherit');
    completions['white-space'] = new ValueCompleter('normal|pre|nowrap,3|pre-wrap|pre-line|inherit');
    completions['pointer-events'] = new ValueCompleter('auto|none,3|visiblePainted|visibleFill|visibleStroke|visible| painted|fill|stroke|all|inherit');
    completions['resize'] = new ValueCompleter('none|both|horizontal|vertical|inherit');
    completions['cursor'] = new ValueCompleter('auto|default|none|context-menu|help|pointer,3|progress|wait|cell| crosshair|text|vertical-text|alias|copy|move|no-drop|not-allowed|e-resize|n-resize|ne-resize|nw-resize|s-resize|se-resize|sw-resize|w-resize|ew-resize|ns-resize|nesw-resize|nwse-resize|col-resize|row-resize|all-scroll|inherit');
    completions['ime-mode'] = new ValueCompleter('auto|normal|active|inactive|disabled');
    completions['caption-side'] = new ValueCompleter('top|bottom|left|right|inherit');
    completions['border-collapse'] = new ValueCompleter('collapse|separate|inherit');
    completions['padding-top'] = completions['padding-right'] = completions['padding-bottom'] = completions['padding-left'] = completions['outline-offset'] = unitCompleterInherit;
    completions['margin-top'] = completions['margin-right'] = completions['margin-bottom'] = completions['margin-left'] = unitCompleterInheritAuto;
    completions['padding'] = new MultiCompleter().addSub({
      completer: unitCompleterInherit,
      limit: 4
    });
    completions['margin'] = new MultiCompleter().addSub({
      completer: unitCompleterInheritAuto,
      limit: 4
    });
    completions['marks'] = new AnyCompleter().addSub({
      completer: new ValueCompleter('none'),
      empty: true
    }).addSub({
      completer: new MultiCompleter({
        completer: new ValueCompleter('crop|cross'),
        limit: 2,
        empty: true
      }),
      empty: true
    });
    completions['text-decoration'] = new AnyCompleter().addSub({
      completer: new MultiCompleter({
        completer: new ValueCompleter('underline|overline|line-through|blink'),
        limit: 4,
        empty: true
      }),
      empty: true
    }).addSub({
      completer: new ValueCompleter('none|inherit'),
      empty: true
    });
    borderCompleter = new MultiCompleter().addSub({
      completer: completions['border-style'],
      limit: 1
    }).addSub({
      completer: completions['border-width'],
      limit: 1
    }).addSub({
      completer: colorCompleter,
      limit: 1
    });
    borderCompleter.findCompleter = function(active) {
      var completer, sub;
      completer = MultiCompleter.prototype.findCompleter.call(borderCompleter, active);
      if (completer.subs.length === 3) {
        sub = _.find(completer.subs, function(sub) {
          return sub.completer === completions['border-width'];
        });
        if (sub != null) {
          sub.empty = true;
        }
      } else if (completer.subs.length === 2) {
        sub = _.find(completer.subs, function(sub) {
          return sub.completer === completions['border-style'];
        });
        if (sub != null) {
          sub.empty = true;
        }
      }
      return completer;
    };
    completions['border'] = completions['border-top'] = completions['border-right'] = completions['border-bottom'] = completions['border-left'] = borderCompleter;
    completions['opacity'] = completions['orphans'] = new ValueCompleter('inherit', false);
    completions['border-radius'] = new MultiCompleter().addSub({
      completer: unitCompleter,
      limit: 8
    });
    completions['border-top-left-radius'] = completions['border-top-right-radius'] = completions['border-bottom-left-radius'] = completions['border-bottom-right-radius'] = new MultiCompleter().addSub({
      completer: unitCompleter,
      limit: 2
    });
    completions['background-attachment'] = makeArrayCompleterSingle(new ValueCompleter('scroll|fixed|local'));
    completions['background-image'] = makeArrayCompleterSingle(imageCompleter);
    bgRepeatCompleter = new ValueCompleter('repeat|repeat-x|repeat-y|no-repeat|space|round');
    completions['background-repeat'] = makeArrayCompleterSingle(bgRepeatCompleter);
    completions['background-clip'] = completions['background-origin'] = makeArrayCompleterSingle(completions['box-sizing']);
    completions['background-size'] = new AnyCompleter(new MultiCompleter().addSub({
      completer: unitCompleterAuto,
      limit: 2
    }), new ValueCompleter('contain|cover'));
    completions['background-size'].findCompleters = function(value) {
      if (value.match(/\b(contain|cover)\b/)) {
        return null;
      }
      return this.subs;
    };
    bgPositionXCompleter = new AnyCompleter(unitCompleter, {
      completer: new ValueCompleter('left|center|right'),
      empty: true
    });
    bgPositionYCompleter = new AnyCompleter(unitCompleter, {
      completer: new ValueCompleter('top|center|bottom'),
      empty: true
    });
    bg_pos_compl = new MultiCompleter();
    bg_pos_compl.findCompleter = function(active) {
      var i, index, part, _i, _len, _ref1;
      if (active.txt == null) {
        return null;
      }
      index = 0;
      _ref1 = active.parts;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        part = _ref1[i];
        if (i === active.i) {
          break;
        }
        if (part.length) {
          index++;
        }
      }
      if (index === 0) {
        return bgPositionXCompleter;
      } else if (index === 1) {
        return bgPositionYCompleter;
      } else {
        return null;
      }
    };
    completions['background-position'] = makeArrayCompleter(bg_pos_compl);
    shadow_compl = new MultiCompleter().addSub({
      completer: unitCompleter,
      limit: 4
    }).addSub({
      completer: new ValueCompleter('inset'),
      limit: 1
    }).addSub({
      completer: colorCompleter,
      limit: 1
    });
    completions['box-shadow'] = new AnyCompleter(makeArrayCompleter(shadow_compl), new ValueCompleter('none'));
    BgLayerCompleter = (function(_super) {

      __extends(BgLayerCompleter, _super);

      function BgLayerCompleter(final) {
        this.final = final != null ? final : false;
        BgLayerCompleter.__super__.constructor.call(this);
        if (this.final) {
          this.addSub({
            completer: colorCompleter,
            limit: 1
          });
        }
        this.addSub({
          completer: imageCompleter,
          limit: 1,
          empty: true
        });
        this.addSub({
          completer: bgRepeatCompleter,
          limit: 1
        });
        this.addSub({
          completer: bgPositionXCompleter,
          limit: 1
        });
        this.addSub({
          completer: bgPositionYCompleter,
          limit: 1
        });
        this.addSub({
          completer: completions['background-size'],
          limit: 1
        });
        this.addSub({
          completer: completions['box-sizing'],
          limit: 1
        });
      }

      return BgLayerCompleter;

    })(MultiCompleter);
    BgCompleter = (function(_super) {

      __extends(BgCompleter, _super);

      function BgCompleter() {
        BgCompleter.__super__.constructor.call(this);
        this.setSeparator(',');
        this.layerCompleter = new BgLayerCompleter();
        this.finalLayerCompleter = new BgLayerCompleter(true);
      }

      BgCompleter.prototype.findCompleter = function(active) {
        if (active.i === active.parts.length - 1) {
          return this.finalLayerCompleter;
        } else {
          return this.layerCompleter;
        }
      };

      return BgCompleter;

    })(MultiCompleter);
    completions['background'] = new BgCompleter();
    completions['font-family'] = makeArrayCompleter(fontFamilyCompleter);
    fontCompleter = new MultiCompleter().setSeparator(',');
    fontCompleter.findCompleter = function(active) {
      var i, index, part, _i, _len, _ref1;
      index = 0;
      _ref1 = active.parts;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        part = _ref1[i];
        if (i === active.i) {
          break;
        }
        if (part.length) {
          index++;
        }
      }
      if (index === 0) {
        return new MultiCompleter().addSub({
          completer: completions['font-style'],
          limit: 1
        }).addSub({
          completer: completions['font-weight'],
          limit: 1
        }).addSub({
          completer: completions['font-variant'],
          limit: 1
        }).addSub({
          completer: completions['font-size'],
          limit: 1
        }).addSub({
          completer: completions['line-height'],
          limit: 1
        }).addSub({
          completer: fontFamilyCompleter,
          limit: 1
        });
      } else {
        return fontFamilyCompleter;
      }
    };
    completions['font'] = fontCompleter;
    baseCompleter = new BaseCompleter;
    baseListCompleter = new ListCompleter(baseCompleter);
    transitionTimingCompleter = new AnyCompleter().addSub({
      completer: new ValueCompleter('ease|linear|ease-in|ease-out|ease-in-out'),
      empty: true
    }).addSub({
      completer: new FunctionCompleter([
        {
          name: 'cubic-bezier',
          completer: baseListCompleter
        }
      ]),
      empty: true
    });
    completions['transition-timing-function'] = makeArrayCompleterSingle(transitionTimingCompleter);
    transitionTimeCompleter = new UnitCompleter('s,2|ms');
    completions['transition-duration'] = completions['transition-delay'] = makeArrayCompleterSingle(transitionTimeCompleter);
    transitionPropertyCompleter = new ValueCompleter('all,3|background-color|background-image|background-position|border-bottom-color|border-bottom-width|border-color|border-left-color|border-left-width|border-right-color|border-right-width|border-spacing|border-top-color|border-top-width|border-width|bottom|color|crop|font-size|font-weight|height|left|letter-spacing|line-height|margin-bottom|margin-left|margin-right|margin-top|max-height|max-width|min-height|min-width|opacity|outline-color|outline-offset|outline-width|padding-bottom|padding-left|padding-right|padding-top|right|text-indent|text-shadow|top|transform|vertical-align|visibility|width|word-spacing|z-index|zoom');
    completions['transition-property'] = makeArrayCompleterSingle(transitionPropertyCompleter);
    transitionCompleter = new MultiCompleter().addSub({
      completer: transitionPropertyCompleter,
      limit: 1,
      empty: true
    }).addSub({
      completer: transitionTimeCompleter,
      limit: 2
    }).addSub({
      completer: transitionTimingCompleter,
      limit: 1
    });
    completions['transition'] = makeArrayCompleter(transitionCompleter);
    completions['transform-style'] = new ValueCompleter('preserve-3d|flat');
    angleCompleter = new UnitCompleter('deg,2|rad');
    angleListCompleter = new ListCompleter(angleCompleter);
    unitListCompleter = new ListCompleter(unitCompleter);
    transformFuncCompleter = new FunctionCompleter([
      {
        name: 'matrix',
        completer: baseListCompleter
      }, {
        name: 'matrix3d',
        completer: baseListCompleter
      }, {
        name: 'scale',
        completer: baseListCompleter
      }, {
        name: 'scale3d',
        completer: baseListCompleter
      }, {
        name: 'scaleX',
        completer: baseCompleter
      }, {
        name: 'scaleY',
        completer: baseCompleter
      }, {
        name: 'scaleZ',
        completer: baseCompleter
      }, {
        name: 'perspective',
        completer: baseListCompleter
      }, {
        name: 'rotate',
        completer: angleCompleter
      }, {
        name: 'rotate3d',
        completer: baseListCompleter
      }, {
        name: 'rotateX',
        completer: baseListCompleter
      }, {
        name: 'rotateY',
        completer: baseListCompleter
      }, {
        name: 'rotateZ',
        completer: baseListCompleter
      }, {
        name: 'skew',
        completer: angleListCompleter
      }, {
        name: 'skewX',
        completer: angleCompleter
      }, {
        name: 'skewY',
        completer: angleCompleter
      }, {
        name: 'translate',
        completer: unitListCompleter
      }, {
        name: 'translate3d',
        completer: unitListCompleter
      }, {
        name: 'translateX',
        completer: unitCompleter
      }, {
        name: 'translateY',
        completer: unitCompleter
      }, {
        name: 'translateZ',
        completer: unitCompleter
      }
    ]);
    completions['transform'] = new MultiCompleter(transformFuncCompleter);
    stylusCompletions['box'] = new ValueCompleter('horizontal|vertical');
    stylusCompletions['fixed'] = stylusCompletions['absolute'] = stylusCompletions['relative'] = new MultiCompleter().addSub({
      completer: new ValueCompleter('top|left|bottom|right'),
      limit: 2
    }).addSub({
      completer: unitCompleter,
      limit: 2
    });
    stylusCompletions['@extend'] = stylusCompletions['@extends'] = new ExtendedSelectorCompleter();
    atRulesCompletions = {};
    mediaCompleter = new ValueCompleter('all|braille|embossed|handheld|print|projection|screen|speech|tty|tv');
    atRulesCompletions['@media'] = makeArrayCompleterSingle(mediaCompleter);
    nibCompleter = new ValueCompleter('nib');
    importCompleter = new AnyCompleter();
    importCompleter.findCompleters = function(value, format) {
      return [
        {
          completer: format === 'stylus' ? nibCompleter : baseCompleter
        }
      ];
    };
    atRulesCompletions['@import'] = importCompleter;
    complete = function(format, property, value, offset, cb) {
      property = property.toLowerCase();
      property = property.replace(/^-(webkit|moz|ms|o)-/, '');
      if (format === 'stylus' && stylusCompletions[property]) {
        return stylusCompletions[property].complete(value, offset, format, cb);
      } else if (completions[property]) {
        return completions[property].complete(value, offset, format, cb);
      } else {
        return cb();
      }
    };
    completeAtRule = function(format, rule, value, offset, cb) {
      if (atRulesCompletions[rule]) {
        return atRulesCompletions[rule].complete(value, offset, format, cb);
      } else {
        return cb();
      }
    };
    return module.exports = {
      complete: complete,
      completeAtRule: completeAtRule
    };
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/views/ui/completer', ['require', 'exports', 'module' , 'ace/lib/event', 'ace/lib/useragent', 'ace/lib/keys', 'lib/utils', 'empty'], function(require, exports, module) {
    var Completer, keys, node, stopEvent, style, ua, _ref;
    stopEvent = require('ace/lib/event').stopEvent;
    ua = require('ace/lib/useragent');
    keys = require('ace/lib/keys');
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style;
    require('empty');
    Completer = Backbone.View.extend({
      className: 'completer',
      initialize: function() {
        _.bindAll(this, 'onKeyDown', 'onMouseWheel', 'onMouseDown');
        this.$el.append(this.previewElement = node('div', {
          "class": 'preview'
        }));
        this.$el.append(this.itemsElement = node('div', {
          "class": 'items'
        }));
        $(this.itemsElement).on('mousedown', this.onMouseDown);
        this.reverse = false;
        return this.disable(true);
      },
      activate: function(tab, completions, row, col) {
        var editor, editorPos, items, pxcoord, top;
        this.tab = tab;
        items = completions.items;
        if (!(items != null ? items.length : void 0)) {
          return this.disable();
        }
        items = _.uniq(items, false, function(i) {
          return i.value;
        });
        this.offset = items[0].offset != null ? items[0].offset : completions.offset;
        if (items.length > 100) {
          items = items.slice(0, 100);
        }
        editor = this.tab.get('editor').editor;
        editorPos = editor.container.getBoundingClientRect();
        pxcoord = editor.renderer.textToScreenCoordinates(row, col - this.offset);
        top = pxcoord.pageY - editorPos.top;
        this.reverse = editorPos.height - top < 140;
        this.$el.toggleClass('is-reverse', this.reverse).css(this.reverse ? {
          left: pxcoord.pageX - editorPos.left - 2,
          top: 'auto',
          bottom: editorPos.height - top
        } : {
          left: pxcoord.pageX - editorPos.left - 2,
          top: top + editor.renderer.lineHeight,
          bottom: 'auto'
        });
        if (!this.active) {
          this.$el.show();
          window.addEventListener('keydown', this.onKeyDown, true);
          window.addEventListener('mousewheel', this.onMouseWheel, true);
        }
        this.active = true;
        this.keyDelta = 0;
        if (this.reverse) {
          items = items.reverse();
        }
        return this.setItems(items, this.offset);
      },
      disable: function(force) {
        if (force == null) {
          force = false;
        }
        if (this.active || force) {
          this.$el.hide();
          this.active = false;
          this.selectedValue = '';
          window.removeEventListener('keydown', this.onKeyDown, true);
          return window.removeEventListener('mousewheel', this.onMouseWheel, true);
        }
      },
      setItems: function(items) {
        var editor, el, fragment, i, item, offset;
        $(this.itemsElement).empty();
        this.selectedIndex = -1;
        this.items = [];
        fragment = document.createDocumentFragment();
        this.items = (function() {
          var _i, _len, _results;
          _results = [];
          for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
            item = items[i];
            offset = item.offset != null ? item.offset : this.offset;
            el = node('div', {
              "class": 'item'
            }, node('span', {
              "class": 'general'
            }, item.value.substr(0, offset)), node('span', {
              "class": 'unique'
            }, item.value.substr(offset)));
            if (item.color) {
              $(el).addClass('color').css({
                'border-color': item.value
              });
            }
            _.extend(item, {
              el: el,
              i: i,
              isSame: item.value.length <= offset
            });
            fragment.appendChild(el);
            _results.push(item);
          }
          return _results;
        }).call(this);
        if (this.items.length === 1 && this.items[0].isSame) {
          return this.disable();
        }
        $(this.itemsElement).append(fragment);
        editor = this.tab.get('editor').editor;
        this.$el.css({
          height: editor.renderer.lineHeight * Math.min(items.length, 6)
        });
        item = _.find(items, function(i) {
          return i.value === this.selectedValue;
        });
        this.select(item ? item.i : this.reverse ? items.length - 1 : 0);
        if (!this.items.length) {
          return this.disable();
        }
      },
      onMouseDown: function(e) {
        var item, itemEl;
        itemEl = $(e.target).closest('.item')[0];
        item = ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.items;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            if (item.el === itemEl) {
              _results.push(item);
            }
          }
          return _results;
        }).call(this))[0];
        if (item) {
          return this.completeItem(item);
        }
      },
      select: function(index) {
        var item, _base;
        if (index === this.selectedIndex) {
          return;
        }
        if (this.selectedIndex !== -1) {
          item = this.items[this.selectedIndex];
          $(item.el).removeClass('selected');
        }
        this.selectedIndex = index;
        if (item = this.items[this.selectedIndex]) {
          $(item.el).addClass('selected');
          this.selectedValue = item.value;
          if (item.preview) {
            this.showPreview(item);
          } else if (this.isPreview) {
            this.hidePreview();
          }
          if (item.el.scrollIntoViewIfNeeded) {
            return item.el.scrollIntoViewIfNeeded(false);
          } else {
            return typeof (_base = item.el).scrollIntoView === "function" ? _base.scrollIntoView(false) : void 0;
          }
        }
      },
      completeItem: function(item) {
        var _ref1;
        if (item) {
          if ((_ref1 = item.offset) == null) {
            item.offset = this.offset;
          }
          this.tab.complete(item);
          return this.disable();
        }
      },
      showPreview: function(item) {
        var url,
          _this = this;
        this.isPreview = true;
        url = item.preview.split('/').slice(0, -1).join('/') + '/' + item.value;
        return require(['lib/views/ui/imagepreview'], function(ImagePreview) {
          return ImagePreview.getPreviewElement(url, 120, 75, function(err, el) {
            if (err) {
              return;
            }
            if (_this.isPreview) {
              return $(_this.previewElement).empty().append(el).show();
            }
          });
        });
      },
      hidePreview: function() {
        this.isPreview = false;
        return $(this.previewElement).hide().empty();
      },
      onMouseWheel: function() {
        return this.disable();
      },
      moveSelection: function(delta, e) {
        var directionDown, keyDelta;
        directionDown = delta > 0;
        keyDelta = directionDown ? -1 : 1;
        if ((directionDown ? this.selectedIndex < this.items.length - 1 : this.selectedIndex > 0)) {
          this.select(Math.max(0, Math.min(this.selectedIndex + delta, this.items.length - 1)));
        } else if (this.keyDelta !== keyDelta) {
          this.keyDelta = keyDelta;
        } else {
          this.disable();
        }
        return stopEvent(e);
      },
      onKeyDown: function(e) {
        var i, item, matches, offset, offset_, part, _i, _len, _ref1,
          _this = this;
        if (e.shiftKey) {
          return;
        }
        switch (keys[e.keyCode]) {
          case 'Down':
            return this.moveSelection(1, e);
          case 'Up':
            return this.moveSelection(-1, e);
          case 'PageDown':
            return this.moveSelection(10, e);
          case 'PageUp':
            return this.moveSelection(-10, e);
          case 'End':
            return this.moveSelection(1e3, e);
          case 'Home':
            return this.moveSelection(-1e3, e);
          case 'Return':
            if (item = this.items[this.selectedIndex]) {
              stopEvent(e);
              if (ua.isMozilla && item.exec) {
                return _.defer(function() {
                  return _this.completeItem(item);
                });
              } else {
                return this.completeItem(item);
              }
            }
            break;
          case 'Esc':
            this.disable();
            return stopEvent(e);
          case 'Tab':
            if (item = this.items[this.selectedIndex]) {
              if (this.items.length === 1) {
                this.completeItem(item);
              } else {
                offset = offset_ = item.offset ? item.offset : this.offset;
                while (true) {
                  offset_++;
                  part = this.items[this.selectedIndex].value.substr(0, offset_);
                  matches = true;
                  _ref1 = this.items;
                  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                    i = _ref1[_i];
                    if (i.length < offset || part !== i.value.substr(0, offset_)) {
                      matches = false;
                      break;
                    }
                  }
                  if (!matches) {
                    break;
                  }
                }
                offset_--;
                if (offset_ > offset) {
                  this.tab.complete({
                    value: this.items[this.selectedIndex].value.substr(0, offset_),
                    offset: offset
                  });
                }
              }
            }
            return stopEvent(e);
        }
      }
    });
    return module.exports = Completer;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/views/commandline', ['require', 'exports', 'module' , 'empty', 'ace/lib/keys', 'lib/utils', 'lib/keyboard', 'ace/lib/event'], function(require, exports, module) {
    var CommandLine, keys, listenKey, node, stopEvent;
    require('empty');
    keys = require('ace/lib/keys');
    node = require('lib/utils').node;
    listenKey = require('lib/keyboard').listenKey;
    stopEvent = require('ace/lib/event').stopEvent;
    CommandLine = Backbone.View.extend({
      initialize: function() {
        var _this = this;
        _.bindAll(this, 'activate', 'close', 'onChange', 'onKeyUp', 'onKeyDown');
        this.active = false;
        this.value = '';
        listenKey(null, 'toggle-cli', {
          exec: function() {
            if (_this.active) {
              return _this.close();
            } else {
              return _this.activate();
            }
          }
        });
        this.$el.append([
          this.input = node('input', {
            type: 'text'
          }), this.options = node('div', {
            "class": 'options'
          })
        ]);
        return $(this.input).on('blur', function() {
          if (_this.active) {
            return _this.close();
          }
        });
      },
      activate: function() {
        this.$el.addClass('is-open');
        this.active = true;
        this.setItems([]);
        this.selectedValue = null;
        this.selectedIndex = -1;
        return $(this.input).focus().val('').on('keydown', this.onKeyDown).on('keyup', this.onKeyUp).on('change', this.onChange);
      },
      close: function() {
        this.$el.removeClass('is-open');
        this.active = false;
        return $(this.input).blur().val('').off('keyup', this.onKeyUp).off('keydown', this.onKeyDown).off('change', this.onChange);
      },
      setItems: function(items) {
        var fragment, i, item, _i, _j, _len, _len1, _ref;
        this.items = items;
        this.selectedIndex = -1;
        fragment = document.createDocumentFragment();
        for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
          item = items[i];
          if (!items) {
            return;
          }
          item.el = item.file ? node('div', {
            "class": 'item'
          }, node('div', {
            "class": 'value'
          }, 'open file ', node('span', item.value)), node('div', {
            "class": 'hint'
          }, item.hint)) : item.selector ? node('div', {
            "class": 'item'
          }, node('div', {
            "class": 'value'
          }, 'open element ', node('span', item.value))) : void 0;
          item.index = i;
        }
        _ref = items.reverse();
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          fragment.appendChild(item.el);
        }
        items.reverse();
        if (item = _.find(items, function(item) {
          return item.value === this.selectedValue;
        })) {
          this.selectIndex(item.index);
        } else {
          this.selectIndex(items.length ? 0 : -1);
        }
        return $(this.options).toggle(!!items.length).empty().append(fragment);
      },
      selectIndex: function(index) {
        if (index === this.selectedIndex || !this.items.length) {
          return;
        }
        if (this.selectedIndex !== -1) {
          $(this.items[this.selectedIndex].el).removeClass('selected');
        }
        this.selectedIndex = index;
        this.selectedValue = this.items[index].value;
        if (this.selectedIndex !== -1) {
          return $(this.items[this.selectedIndex].el).addClass('selected');
        }
      },
      onKeyDown: function(e) {
        var item, _ref;
        switch (keys[e.keyCode]) {
          case 'Down':
            if (this.selectedIndex > 0) {
              this.selectIndex(this.selectedIndex - 1);
            }
            stopEvent(e);
            break;
          case 'Up':
            if (this.selectedIndex < this.items.length - 1) {
              this.selectIndex(this.selectedIndex + 1);
            }
            stopEvent(e);
            break;
          case 'Return':
            if (this.active) {
              item = (_ref = this.items) != null ? _ref[this.selectedIndex] : void 0;
              if (item.file) {
                app.console.openFile(item.file.get('url'));
              }
              if (item.selector) {
                app.console.onFocusedSelectorChange(item.value, true);
              }
              this.close();
              return stopEvent(e);
            }
            break;
          case 'Esc':
            if (this.active) {
              this.input.blur();
            }
            return stopEvent(e);
        }
      },
      onKeyUp: function(e) {
        return this.onChange();
      },
      onChange: function() {
        var _this = this;
        if (this.value === this.input.value) {
          return;
        }
        this.value = this.input.value;
        if (!this.value.length) {
          return this.setItems([]);
        }
        return this.getCompletions(this.value, function(items) {
          return _this.setItems(items);
        });
      },
      searchFilesByName: function(value) {
        value = value.toLowerCase();
        return app.console.editor.filebrowser.collection.chain().filter(function(file) {
          return -1 !== file.get('name').toLowerCase().indexOf(value);
        }).sortBy(function(file) {
          return file.get('name').toLowerCase().indexOf(value);
        }).first(5).map(function(file) {
          return {
            value: file.get('name'),
            file: file,
            hint: file.get('url')
          };
        }).value();
      },
      getCompletions: function(value, cb) {
        var completions, lastPart, parentPart, selectorParts;
        completions = this.searchFilesByName(value);
        selectorParts = value.split(/\s+/);
        lastPart = selectorParts.slice(-1)[0];
        parentPart = selectorParts.slice(0, -1).join(' ');
        return app.console.callClient('findElementMatches', {
          selector: lastPart,
          parent: [parentPart],
          offset: lastPart.length,
          after: null
        }, function(response) {
          var _ref;
          if (response != null ? (_ref = response.results) != null ? _ref.length : void 0 : void 0) {
            _.each(response.results, function(selector) {
              return completions.push({
                value: (parentPart ? parentPart + ' ' : '') + selector,
                selector: 1
              });
            });
          }
          return cb(completions);
        });
      }
    });
    return module.exports = CommandLine;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/views/ui/search', ['require', 'exports', 'module' , 'ace/lib/useragent', 'lib/utils', 'lib/keyboard'], function(require, exports, module) {
    var Search, addKeyboardListener, formatKeyCommand, listenKey, node, ua, _ref;
    ua = require('ace/lib/useragent');
    node = require('lib/utils').node;
    _ref = require('lib/keyboard'), addKeyboardListener = _ref.addKeyboardListener, formatKeyCommand = _ref.formatKeyCommand, listenKey = _ref.listenKey;
    Search = Backbone.View.extend({
      initialize: function(opt) {
        var key,
          _this = this;
        _.bindAll(this, 'onBlur', 'onKeyUp', 'toggleSearch');
        this.editor = opt.editor;
        this.input = node('input', {
          "class": 'keyword'
        });
        $(this.input).on('blur', this.onBlur).on('keyup', this.onKeyUp);
        addKeyboardListener('search', this.input);
        listenKey(null, 'search-in-file', {
          exec: this.toggleSearch
        });
        listenKey(null, 'search-next-result', {
          exec: function() {
            return _this.moveRange(false);
          }
        });
        listenKey(null, 'search-previous-result', {
          exec: function() {
            return _this.moveRange(true);
          }
        });
        this.input.listenKey('disable', {
          mac: 'esc|return',
          exec: function() {
            return _this.disable();
          }
        });
        key = app.Settings.get('keyboard_shortcuts')['search-next-result'];
        key = ua.isMac ? key.mac : key.win;
        this.$el.append(this.input);
        return this.$el.append(node('div', {
          "class": 'results'
        }, node('div', {
          "class": 'msg'
        }), node('div', {
          "class": 'hint'
        }, formatKeyCommand(key) + ' for next')));
      },
      toggleSearch: function() {
        if (this.active) {
          return this.disable();
        } else {
          return this.activate();
        }
      },
      moveRange: function(moveup) {
        var _ref1;
        if (moveup == null) {
          moveup = false;
        }
        if ((_ref1 = this.ranges) != null ? _ref1.length : void 0) {
          if (moveup) {
            this.selectedRange -= 1;
          } else {
            this.selectedRange += 1;
          }
          if (this.selectedRange < 0) {
            this.selectedRange = this.ranges.length - 1;
          }
          if (this.selectedRange >= this.ranges.length) {
            this.selectedRange = 0;
          }
          this.editor.editor.selection.setSelectionRange(this.ranges[this.selectedRange]);
          this.$('.results .msg').html("Showing <span>" + (this.selectedRange + 1) + "</span> of <span>" + this.ranges.length + "</span>");
        } else {
          this.$('.results .msg').html('No results found');
        }
        return this.$('.results').show();
      },
      onKeyUp: function() {
        if (this.input.value !== this.value) {
          this.value = this.input.value;
          this.editor.editor.$search.set({
            needle: this.value
          });
          this.ranges = this.editor.editor.$search.findAll(this.editor.editor.session);
          this.selectedRange = -1;
          return this.moveRange();
        }
      },
      onBlur: function() {
        return this.disable();
      },
      activate: function() {
        this.$el.show();
        return $(this.input).focus()[0].select();
      },
      disable: function() {
        this.$el.hide();
        this.$('.results').hide();
        return this.editor.editor.focus();
      }
    });
    return module.exports = Search;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/editor/mousecommands', ['require', 'exports', 'module' , 'ace/range', 'ace/lib/useragent', 'lib/utils', 'lib/keyboard'], function(require, exports, module) {
    var MouseCommands, Range, combineUrl, hexToRgb, listenKey, node, ua, _ref;
    Range = require('ace/range').Range;
    ua = require('ace/lib/useragent');
    _ref = require('lib/utils'), combineUrl = _ref.combineUrl, node = _ref.node, hexToRgb = _ref.hexToRgb;
    listenKey = require('lib/keyboard').listenKey;
    MouseCommands = Backbone.View.extend({
      className: 'editor-command-highlight',
      initialize: function(opt) {
        var _this = this;
        _.bindAll(this, 'onActivationKeyDown', 'onActivationKeyUp', 'onContainerMouseMove', 'onMouseDown', 'onNumericMouseMove', 'onNumericMouseUp', 'onMouseMove', 'onMouseWheel');
        this.editor = opt.editor;
        this.editor.navigateUpDown = function(delta) {
          var cursor, document, indent, line, nextIndent, nextLine, offset, _ref1;
          document = (_ref1 = this.getSession()) != null ? _ref1.doc : void 0;
          if (!document) {
            return;
          }
          this.selection.clearSelection();
          cursor = this.selection.getCursor();
          line = document.getLine(cursor.row);
          indent = (line.match(/^\s*/))[0].length;
          offset = 0;
          if (cursor.column === indent) {
            nextLine = document.getLine(cursor.row + delta);
            nextIndent = nextLine.match(/^\s*/)[0].length;
            offset = nextIndent - indent;
          }
          return this.selection.moveCursorBy(delta, offset);
        };
        this.editor.navigateUp = function(times) {
          times = times || 1;
          return this.navigateUpDown(-times);
        };
        this.editor.navigateDown = function(times) {
          times = times || 1;
          return this.navigateUpDown(times);
        };
        listenKey('editor', 'numeric-increment', {
          exec: function() {
            return _this.offsetNumeric(1);
          }
        });
        listenKey('editor', 'numeric-decrement', {
          exec: function() {
            return _this.offsetNumeric(-1);
          }
        });
        listenKey('editor', 'numeric-increment-many', {
          exec: function() {
            return _this.offsetNumeric(10);
          }
        });
        listenKey('editor', 'numeric-decrement-many', {
          exec: function() {
            return _this.offsetNumeric(-10);
          }
        });
        this.commandKey = (ua.isMac ? (ua.isGecko ? 224 : 91) : 17);
        this.activated = false;
        this.action = {};
        $(window).on('keydown', this.onActivationKeyDown).on('keyup', this.onActivationKeyUp);
        this.$el.on('mousedown', this.onMouseDown).on('mousemove', this.onMouseMove);
        return this.editor.addEventListener('mousewheel', this.onMouseWheel);
      },
      onActivationKeyDown: function(e) {
        if (e.keyCode === this.commandKey && app.isEditorMode && !this.activated) {
          this.activated = true;
          return $(this.editor.container).on('mousemove', this.onContainerMouseMove);
        }
      },
      onActivationKeyUp: function(e) {
        if (this.activated && (e === true || e.keyCode === this.commandKey)) {
          this.activated = false;
          $(this.editor.container).off('mousemove', this.onContainerMouseMove);
          return this.stopCommand();
        }
      },
      showCmdHighlight: function(coord, match, type) {
        var editorPosition, pxcoord;
        this.action = {
          coord: coord,
          match: match,
          type: type
        };
        editorPosition = this.editor.container.getBoundingClientRect();
        pxcoord = this.editor.renderer.textToScreenCoordinates(coord.row, match.offset);
        this.$el.toggleClass('is-selectable', type !== 'numeric').css({
          left: pxcoord.pageX - editorPosition.left,
          top: pxcoord.pageY - editorPosition.top,
          width: match.match.length * this.editor.renderer.characterWidth,
          height: this.editor.renderer.lineHeight,
          display: 'block'
        });
        this.visible = true;
        if (type !== 'url') {
          return this.lastUrl = null;
        }
      },
      startCommand: function(coord) {
        var match;
        if (match = this.checkValidNumeric(coord)) {
          return this.showCmdHighlight(coord, match, 'numeric');
        } else if (match = this.checkValidPattern(coord, /#[0-9a-f]{3,6}(?:\b|;|$)/ig)) {
          return this.showCmdHighlight(coord, match, 'color');
        } else if (match = this.checkValidPattern(coord, /url\([a-z0-9"'\/\\\.@_-]+\)/ig)) {
          return this.showCmdHighlight(coord, match, 'url');
        } else if (this.visible) {
          return this.stopCommand();
        }
      },
      onMouseWheel: function(e) {
        if (e.domEvent.target === this.el && this.action.type === 'numeric') {
          if (this.action.wheelDelta == null) {
            this.action.stackPosition = this.editor.session.getUndoManager().$undoStack.length;
            this.action.wheelDelta = 0;
          }
          this.action.wheelDelta += e.wheelY;
          this.updateNumericValue(Math.floor(this.action.wheelDelta * (e.domEvent.shiftKey ? 3 : .25)));
          return e.stop();
        } else {
          return this.stopCommand();
        }
      },
      stopCommand: function() {
        var _ref1;
        this.action = {};
        this.lastUrl = null;
        if ((_ref1 = this.infoTip) != null) {
          _ref1.hide();
        }
        return this.$el.hide();
      },
      onContainerMouseMove: function(e) {
        if (!(ua.isMac ? e.metaKey : e.ctrlKey)) {
          return this.onActivationKeyUp(true);
        }
        if (this.action.type === 'numeric' && (this.action.lastScrollOffset != null)) {
          return;
        }
        return this.startCommand(this.editor.renderer.screenToTextCoordinates(e.pageX, e.pageY));
      },
      onMouseDown: function(e) {
        var _this = this;
        if (!(this.activated && !e.button)) {
          return;
        }
        switch (this.action.type) {
          case 'color':
            this.startColorPicker(this.action.match, this.action.coord);
            this.stopCommand();
            break;
          case 'url':
            require(['lib/views/ui/imagepreview'], function(ImagePreview) {
              var fileurl, url;
              url = (_this.action.match.match.match(/^url\(['"]?(.*?)["']?\)$/i))[1];
              fileurl = app.console.editor.tabs.selectedTab().get('url');
              new ImagePreview(combineUrl(fileurl, url));
              return _this.stopCommand();
            });
            break;
          case 'numeric':
            if (this.action.lastScrollOffset != null) {
              return;
            }
            $(window).on('mousemove', this.onNumericMouseMove).on('mouseup', this.onNumericMouseUp);
            $(document).on('selectstart', this.preventDefault);
            this.action.lastScrollOffset = e.pageY;
            this.action.stackPosition = this.editor.session.getUndoManager().$undoStack.length;
        }
        e.stopPropagation();
        return e.preventDefault();
      },
      onNumericMouseMove: function(e) {
        var delta;
        delta = e.pageY - this.action.lastScrollOffset;
        return this.updateNumericValue(Math.floor(delta * (e.shiftKey ? 2 : .2)));
      },
      onNumericMouseUp: function() {
        $(window).off('mousemove', this.onNumericMouseMove).off('mouseup', this.onNumericMouseUp);
        $(document).off('selectstart', this.preventDefault);
        return delete this.action.lastScrollOffset;
      },
      preventDefault: function(e) {
        e.stopPropagation();
        return e.preventDefault();
      },
      updateNumericValue: function(delta) {
        var coord, match, newValue, replaced, session, stackPosition, _ref1;
        if (this.action.type !== 'numeric') {
          return;
        }
        _ref1 = this.action, stackPosition = _ref1.stackPosition, match = _ref1.match, coord = _ref1.coord;
        session = this.editor.session;
        newValue = (match.value + delta * Math.pow(10, -match.presicion)).toFixed(match.presicion);
        while (stackPosition < session.getUndoManager().$undoStack.length) {
          session.getUndoManager().undo(true);
        }
        this.editor.session.selection.clearSelection();
        this.editor.session.selection.moveCursorTo(coord.row, coord.column);
        replaced = this.replaceNumeric(coord, match, newValue);
        this.editor.session.$syncInformUndoManager();
        return this.$el.css({
          width: replaced.length * this.editor.renderer.characterWidth
        });
      },
      startColorPicker: function(match, coord) {
        var popup, stackPosition,
          _this = this;
        stackPosition = this.editor.session.getUndoManager().$undoStack.length;
        popup = window.open('', 'colorpicker', 'width=410,height=300,resizable=no,scrollbars=no');
        $(popup.document.body).css({
          overflow: 'hidden',
          margin: 0,
          background: '#444'
        });
        popup.document.title = 'Color picker';
        app.console.dialogOpen = true;
        return _.defer(function() {
          if (match === false) {
            match = _this.checkValidPattern(coord, /[^\s;]+/ig);
            if (!match) {
              match = {
                match: '',
                offset: coord.column
              };
            }
          }
          return require(['vendor/colorpicker'], function(colorPicker) {
            var lastValue, startValue, _ref1;
            colorPicker.cP = null;
            colorPicker.exportColor = function() {
              var lastValue, value;
              value = colorPicker.CP.hex;
              if (value === lastValue) {
                return;
              }
              lastValue = value;
              value = value.toLowerCase();
              if (value[0] === value[1] && value[2] === value[3] && value[4] === value[5]) {
                value = value[0] + value[2] + value[4];
              }
              while (stackPosition < _this.editor.session.getUndoManager().$undoStack.length) {
                _this.editor.session.getUndoManager().undo(true);
              }
              _this.editor.session.selection.clearSelection();
              _this.editor.session.selection.moveCursorTo(coord.row, coord.column);
              _this.editor.session.doc.replace(new Range(coord.row, match.offset, coord.row, match.offset + match.match.length), '#' + value);
              return _this.editor.session.$syncInformUndoManager();
            };
            colorPicker.saveColor = function() {
              return popup.close();
            };
            startValue = '#000';
            if (match.match[0] === '#' && ((_ref1 = match.match.length) === 4 || _ref1 === 7)) {
              startValue = match.match;
            }
            colorPicker(null, 'H', 4, false, false, false, false, true, 0, 3, ['top', 'left'], popup.document.body, '', startValue.toUpperCase(), 2, 15, 0, popup.document.body, popup.document);
            lastValue = match.match.substr(1);
            return $(popup.document).on('blur', function() {
              return popup.close();
            }).on('unload', function() {
              return app.console.dialogOpen = false;
            }).on('keydown', function(e) {
              if (e.keyCode === 27) {
                while (stackPosition < _this.editor.session.getUndoManager().$undoStack.length) {
                  _this.editor.session.getUndoManager().undo(true);
                }
                popup.close();
              }
              if (e.keyCode === 13) {
                return popup.close();
              }
            });
          });
        });
      },
      onMouseMove: function(e) {
        var color, fileurl, url,
          _this = this;
        if (!(this.activated && this.action.type !== 'numeric')) {
          return;
        }
        switch (this.action.type) {
          case 'url':
            url = (this.action.match.match.match(/^url\(['"]?(.*?)["']?\)$/i))[1];
            if (url === this.lastUrl) {
              return;
            }
            this.lastUrl = url;
            fileurl = app.console.editor.tabs.selectedTab().get('url');
            url = combineUrl(fileurl, url);
            return require(['lib/views/ui/infotip', 'lib/views/ui/imagepreview'], function(infoTip, ImagePreview) {
              _this.infoTip = infoTip;
              return infoTip.showPanel(e, 130, 100, function(cb) {
                return ImagePreview.getPreviewElement(url, 120, 70, function(err, el) {
                  if (err) {
                    return;
                  }
                  return cb(el);
                });
              });
            });
          case 'color':
            color = this.action.match.match;
            return require(['lib/views/ui/infotip', 'vendor/colorpicker'], function(infoTip, colorPicker) {
              _this.infoTip = infoTip;
              return infoTip.showPanel(e, 80, 40, function(cb) {
                var rgb;
                rgb = hexToRgb(color);
                return cb(node('div', {
                  "class": 'colorinfo'
                }, node('div', {
                  "class": 'sample',
                  style: {
                    backgroundColor: color
                  }
                }), node('div', {
                  "class": 'values'
                }, node('div', 'R: ' + rgb[0]), node('div', 'G: ' + rgb[1]), node('div', 'B: ' + rgb[2]))));
              });
            });
        }
      },
      offsetNumeric: function(delta) {
        var cursor, found, session;
        if (delta == null) {
          delta = 1;
        }
        if (!(session = this.editor.getSession())) {
          return;
        }
        cursor = session.selection.getCursor();
        if (found = this.checkValidNumeric(cursor)) {
          this.replaceNumeric(cursor, found, (found.value + delta * Math.pow(10, -found.presicion)).toFixed(found.presicion));
          session.selection.setSelectionAnchor(cursor.row, cursor.column);
          session.selection.moveCursorTo(cursor.row, cursor.column);
        }
        if (event) {
          event.stopPropagation();
          return event.preventDefault();
        }
      },
      checkValidPattern: function(cursor, regexp) {
        var found, line, session;
        session = this.editor.getSession();
        line = session.getLine(cursor.row);
        found = null;
        line.replace(regexp, function(match, offset) {
          if (offset <= cursor.column && offset + match.length >= cursor.column) {
            return found = {
              match: match,
              offset: offset
            };
          }
        });
        return found;
      },
      checkValidNumeric: function(cursor) {
        var firstpart, match, _ref1;
        match = this.checkValidPattern(cursor, /-?[\d\.]+(?:px|em|ex|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)(?=\W|$)/ig);
        if (match) {
          firstpart = match.match.match(/-?[\d\.]+/)[0];
          match.presicion = ((_ref1 = firstpart.split('.')[1]) != null ? _ref1.length : void 0) || 0;
          match.len = firstpart.length;
          match.value = parseFloat(firstpart);
        }
        return match;
      },
      replaceNumeric: function(cursor, match, newValue) {
        var session;
        session = this.editor.getSession();
        newValue += match.match.substr(match.len);
        session.doc.replace(new Range(cursor.row, match.offset, cursor.row, match.offset + match.match.length), newValue);
        return newValue;
      },
      destroy: function() {}
    });
    return module.exports = MouseCommands;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/editor/statsmanager', ['require', 'exports', 'module' ], function(require, exports, module) {
    var StatsManager, UnionCollection;
    UnionCollection = (function() {

      function UnionCollection(opt) {
        if (opt.equal) {
          this.equal = opt.equal;
        }
        if (opt.combine) {
          this.combine = opt.combine;
        }
        if (opt.subtract) {
          this.subtract = opt.substract;
        }
        if (opt.reset) {
          this.reset = opt.reset;
        }
        this.children = {};
        this.items = [];
      }

      UnionCollection.prototype.setItems = function(uid, items) {
        var eq, item, parent, _i, _len;
        if (this.children[uid]) {
          this.removeItems(uid);
        }
        eq = this.equal;
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          parent = _.find(this.items, function(i) {
            return eq(i, item);
          });
          if (parent) {
            this.combine(parent, item);
            item.parent = parent;
          } else {
            this.items.push(item);
          }
        }
        return this.children[uid] = items;
      };

      UnionCollection.prototype.removeItems = function(uid) {
        var i, items, _results;
        items = this.children[uid];
        i = items.length;
        _results = [];
        while (--i >= 0) {
          if (items[i].parent) {
            _results.push(this.subtract(items[i].parent, items[i]));
          } else {
            _results.push(this.reset(items[i]));
          }
        }
        return _results;
      };

      UnionCollection.prototype.combine = function(c, c1) {
        c.count += c1.count;
        return c;
      };

      UnionCollection.prototype.subtract = function(c, c1) {
        c.count -= c1.count;
        return c;
      };

      UnionCollection.prototype.reset = function(c) {
        return c.count = 0;
      };

      return UnionCollection;

    })();
    StatsManager = (function() {

      function StatsManager() {
        this.colors = new UnionCollection({
          equal: function(c1, c2) {
            return _.isEqual(c1.rgb, c2.rgb);
          },
          combine: function(c, c1) {
            if (!c.hex) {
              c.hex = c1.hex;
            }
            return c.count += c1.count;
          }
        });
        this.fonts = new UnionCollection({
          equal: function(c1, c2) {
            return c1.name === c2.name;
          }
        });
      }

      StatsManager.prototype.addStats = function(url, stats) {
        this.colors.setItems(url, stats.colors);
        return this.fonts.setItems(url, stats.fonts);
      };

      return StatsManager;

    })();
    return module.exports = new StatsManager();
  });

}).call(this);
