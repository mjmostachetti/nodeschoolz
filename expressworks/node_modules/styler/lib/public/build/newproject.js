// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/views/newproject', ['require', 'exports', 'module' , 'lib/views/ui/urlinput', 'lib/utils', 'empty', 'lib/templates/new_project'], function(require, exports, module) {
    var NewProjectView, URLInput, URLInputList, URLInputView, combineURLRoots, node, parallel, _ref, _ref1;
    _ref = require('lib/views/ui/urlinput'), URLInputView = _ref.URLInputView, URLInput = _ref.URLInput, URLInputList = _ref.URLInputList;
    _ref1 = require('lib/utils'), node = _ref1.node, combineURLRoots = _ref1.combineURLRoots, parallel = _ref1.parallel;
    require('empty');
    NewProjectView = Backbone.View.extend({
      template: require('lib/templates/new_project'),
      className: 'new-project-view',
      events: {
        'submit form.new-project': 'submitForm',
        'click .btn.add-source': 'onAddSourceClick'
      },
      initialize: function(opt) {
        var css, file, url, _i, _j, _len, _len1, _ref2, _ref3, _ref4,
          _this = this;
        this._initValidations();
        this.mode = opt.mode;
        this.client = opt.client || null;
        this.$el.html(this.template({
          mode: this.model ? 'edit' : 'create'
        }));
        this.locations = new URLInputList();
        this.locations.on('add', this.onLocationAdd, this);
        this.locations.on('remove', this.onLocationRemove, this);
        if (this.model) {
          this.$('#name').val(this.model.get('name'));
          this.$('#baseurl').val(this.model.get('baseurl'));
          _ref2 = this.model.get('files');
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            file = _ref2[_i];
            file.client = this.client;
            this.locations.add(file);
          }
        } else if (this.client) {
          this.$('#name').val(this.client.get('name'));
          url = this.client.get('url');
          url = url.split('/');
          url[url.length - 1] = '';
          this.$('#baseurl').val(url.join('/'));
          _ref3 = combineURLRoots(this.client.get('css'));
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            url = _ref3[_j];
            this.locations.add({
              url: url,
              client: this.client
            });
          }
        }
        this.$('#name').on('change', function() {
          return _this.validate('name');
        });
        this.$('#baseurl').on('change', function() {
          return _this.validate('baseurl');
        });
        if (this.client) {
          css = this.client.get('css');
          return this.$('.sources .hint').html(css.length ? ("There were " + css.length + " stylesheets found on your page ") + (this.locations.size() > 1 ? "that appear to come from " + this.locations.length + " different locations. Please continue by specifying source directories for these locations from your hard drive. If you only need to change files in some of the locations then you can leave the others blank." : "that all appear to come from the same location. Please continue by specifying a source directory for this location.") : "We didn't find any external stylesheets from the page " + ((_ref4 = this.client) != null ? _ref4.get('url') : void 0) + ". Styler can only modify styles in external stylesheets. Please move your styles to external stylesheets and try again. You can also add source locations manually by clicking 'Add source location' button.");
        }
      },
      _checkProjectNameEmpty: function() {
        return !this.$('#name').val().length;
      },
      _checkBaseURLEmpty: function() {
        return !this.$('#baseurl').val().length;
      },
      _checkBaseURLFormat: function() {
        return !this.$('#baseurl').val().match(/^\w+:\/\/\/?.+$/);
      },
      _checkBaseURLUsed: function() {
        var project, url,
          _this = this;
        url = this.$('#baseurl').val();
        project = app.Projects.find(function(project) {
          var baseURL;
          baseURL = project.get('baseurl');
          return (baseURL.indexOf(url) === 0 || url.indexOf(baseURL) === 0) && (!_this.model || project.id !== _this.model.id);
        });
        if (project) {
          return {
            projectname: project.get('name')
          };
        } else {
          return false;
        }
      },
      _checkBaseURLPresent: function() {
        var pageurl, url;
        if (!this.client) {
          return false;
        }
        url = this.$('#baseurl').val();
        pageurl = this.client.get('url');
        if (pageurl.indexOf(url) === 0) {
          return false;
        } else {
          return {
            pageurl: pageurl
          };
        }
      },
      _checkSourceListEmpty: function() {
        return !this.locations.find(function(l) {
          return l.get('path').length && l.get('url').length;
        });
      },
      _checkSourceListErrors: function(cb) {
        return !!this.locations.find(function(location) {
          var _ref2, _ref3;
          return ((_ref2 = location.view.status) === 'url_format' || _ref2 === 'url_empty' || _ref2 === 'path_error') || (location.view.status === 'ok' && location.get('type') === 'stylus' && !((_ref3 = location.view.scan) != null ? _ref3.stylusoutExists : void 0));
        });
      },
      _initValidations: function() {
        return this.validations = {
          name: [
            {
              type: 'error',
              msg: 'Project name should not be empty.',
              summary: 'Project name should not be empty.',
              exec: this._checkProjectNameEmpty
            }
          ],
          baseurl: [
            {
              type: 'error',
              msg: 'Base URL should not be empty.',
              summary: 'Base URL should not be empty.',
              exec: this._checkBaseURLEmpty
            }, {
              type: 'error',
              msg: 'Base URL has wrong format or is too general.',
              summary: 'Base URL is in wrong format.',
              exec: this._checkBaseURLFormat
            }, {
              type: 'error',
              msg: 'This URL matches the base URL for project "{projectname}" and can\'t be used. If you need to use this URL you have to first delete project "{projectname}".',
              summary: 'Base URL is already used.',
              exec: this._checkBaseURLUsed
            }, {
              type: 'warning',
              msg: 'This URL does not match the currently active page URL ({pageurl}). You will not be abled to use this project to modify stylesheets on that page.',
              exec: this._checkBaseURLPresent
            }
          ],
          sourcelist: [
            {
              type: 'error',
              summary: 'You have to fill in at least one source location.',
              exec: this._checkSourceListEmpty
            }, {
              type: 'error',
              summary: 'Source locations configuration contains critical errors.',
              exec: this._checkSourceListErrors
            }
          ]
        };
      },
      validate: function(fieldname) {
        var check, checks, err, field, hasError, noError, _i, _j, _len, _len1, _ref2;
        if (fieldname == null) {
          fieldname = null;
        }
        hasError = false;
        _ref2 = ['name', 'baseurl', 'sourcelist'];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          field = _ref2[_i];
          if (fieldname && field !== fieldname) {
            continue;
          }
          checks = this.validations[field];
          noError = true;
          for (_j = 0, _len1 = checks.length; _j < _len1; _j++) {
            check = checks[_j];
            err = check.exec.call(this);
            if (err) {
              noError = false;
              if (check.type === 'error') {
                hasError = true;
              }
              this.showError(field, check, err);
              break;
            }
          }
          if (noError) {
            this.showError(field, null);
          }
        }
        return hasError;
      },
      showError: function(field, validation, result) {
        var errorline, errors, errorsSummaryEl, itemEl, k, message, noteEl, summaryMessage, v;
        errorsSummaryEl = this.$('.errors-summary');
        errors = errorsSummaryEl.find('.errors');
        errorline = errors.find(".error." + field);
        if (errorline.size() && (!validation || validation.type === 'warning')) {
          errorline.remove();
        } else if (validation && validation.type === 'error') {
          if (!errorline.size()) {
            errors.append(errorline = node('div', {
              "class": "error " + field
            }));
            errorline = $(errorline);
          }
          summaryMessage = validation.summary;
          for (k in result) {
            v = result[k];
            summaryMessage = summaryMessage.replace(new RegExp("{" + k + "}", 'g'), v);
          }
          errorline.html(summaryMessage);
        }
        errorsSummaryEl.toggleClass('visible', errors.children().length);
        itemEl = this.$(".input-row." + field);
        if (!itemEl.size()) {
          return;
        }
        noteEl = itemEl.find('.note');
        itemEl.removeClass('has-error');
        itemEl.removeClass('has-warning');
        if (validation) {
          message = validation.msg;
          for (k in result) {
            v = result[k];
            message = message.replace(new RegExp("{" + k + "}", 'g'), v);
          }
          noteEl.html(message);
          if (validation.type === 'error') {
            return itemEl.addClass('has-error');
          } else {
            return itemEl.addClass('has-warning');
          }
        }
      },
      onAddSourceClick: function() {
        this.locations.add({
          client: this.client,
          url: 'http://',
          novalidate: true
        });
        return this.locations.last().view.$('input.url').get(0).focus();
      },
      onLocationAdd: function(location) {
        var view,
          _this = this;
        view = new URLInputView({
          model: location
        });
        view.on('validate', function() {
          return _this.validate('sourcelist');
        });
        location.view = view;
        return this.$('.sources-list').append(view.el);
      },
      onLocationRemove: function(location) {
        return this.validate('sourcelist');
      },
      submitForm: function(e) {
        var baseurl, data, locations, name,
          _this = this;
        e.preventDefault();
        if (this.validate()) {
          return;
        }
        name = this.$('#name').val();
        baseurl = this.$('#baseurl').val();
        locations = this.locations.map(function(l) {
          var json;
          json = l.toJSON();
          delete json.client;
          return json;
        });
        locations = _.filter(locations, function(l) {
          return l.path.length;
        });
        data = {
          name: name,
          baseurl: baseurl,
          files: locations
        };
        if (this.model) {
          return this.model.save(data, {
            wait: true,
            success: function() {
              return app.router.navigate('', {
                trigger: true
              });
            }
          });
        } else {
          return app.Projects.create(data, {
            wait: true,
            success: function(project) {
              return _this.client.save({
                project: project.id
              }, {
                success: function(client) {
                  return app.app.openConsole(client.get('session_id'));
                }
              });
            }
          });
        }
      }
    });
    return module.exports = NewProjectView;
  });

}).call(this);
// Generated by CoffeeScript 1.6.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('lib/views/ui/urlinput', ['require', 'exports', 'module' , 'lib/utils', 'ace/lib/useragent', 'lib/templates/url_input'], function(require, exports, module) {
    var URLInput, URLInputList, URLInputView, getStyle, node, style, ua, _ref;
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style, getStyle = _ref.getStyle;
    ua = require('ace/lib/useragent');
    URLInput = Backbone.Model.extend({
      defaults: {
        url: '',
        path: '',
        type: 'css',
        newfiles: true,
        stylusout: ''
      }
    });
    URLInputList = Backbone.Collection.extend({
      model: URLInput
    });
    URLInputView = Backbone.View.extend({
      tagName: 'form',
      className: 'item',
      template: require('lib/templates/url_input'),
      events: {
        'click .btn.remove': 'onRemoveClick',
        'click .btn.browse-source': 'onBrowseClick',
        'click .btn.browse-stylus-out': 'onBrowseStylusOutClick',
        'click .btn.edit': 'onEditClick',
        'click .btn.convert': 'onConvertClick',
        'change input.url': 'onURLChange',
        'change input.path': 'onPathChange',
        'change input.type': 'onTypeChange',
        'change input.missing-files': 'onMissingFilesChange',
        'change input.stylus-out': 'onStylusOutChange'
      },
      initialize: function() {
        var _this = this;
        _.bindAll(this, 'onURLFocus', 'onURLBlur', 'startDirectoryComplete', 'onDirectoryKeyDown', 'onDirectoryKeyUp', 'endDirectoryComplete', 'onPathChange');
        this.model.bind('remove', this.onRemove, this);
        $(this.el).html(this.template({
          id: this.model.cid
        }));
        this.$('input.url').on('focus', this.onURLFocus).on('blur', this.onURLBlur);
        this.$('input.path').on('focus', this.startDirectoryComplete).on('blur', this.onPathChange);
        this.$('input.stylus-out').on('focus', this.startDirectoryComplete);
        this._completionCache = {};
        this.updateFileList();
        return this.validate(function() {
          return _this.render();
        });
      },
      render: function() {
        var file, filename, fragment, isNoURLError, item, noFilesFound, numMatches, status, statusOK, _i, _len, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
        this.client = this.model.get('client');
        this.$('.url').val(this.model.get('url'));
        this.$('.path').val(this.fromAbsolute(this.model.get('path')));
        this.$('.stylus-out').val(this.fromAbsolute(this.model.get('stylusout')));
        this.$('.type[value=css]')[0].checked = this.model.get('type') === 'css';
        this.$('.type[value=stylus]')[0].checked = this.model.get('type') === 'stylus';
        this.$('.missing-files[value=ignore]')[0].checked = !this.model.get('newfiles');
        this.$('.missing-files[value=create]')[0].checked = !!this.model.get('newfiles');
        isNoURLError = (_ref1 = this.status) === 'url_format' || _ref1 === 'url_empty';
        this.$('.input-row.url').toggleClass('has-error', isNoURLError);
        this.$('.locations-info .head-note').toggleClass('no-url', isNoURLError);
        if (this.status === 'url_empty') {
          this.$('.input-row.url .note').html('URL field can\'t be empty.');
        } else if (this.status === 'url_format') {
          this.$('.input-row.url .note').html('This URL is in wrong format');
        }
        fragment = document.createDocumentFragment();
        _ref2 = this.filenames;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          filename = _ref2[_i];
          fragment.appendChild(item = node('div', {
            "class": 'searched-file-item'
          }, filename));
          status = (_ref3 = this.scan) != null ? (_ref4 = _ref3.files) != null ? _ref4[filename] : void 0 : void 0;
          if (status != null) {
            $(item).addClass((status ? 'found' : 'missing'));
          }
        }
        this.$('.file-list').empty().append(fragment);
        noFilesFound = !isNoURLError && !this.filenames.length;
        this.$('.input-row.url').toggleClass('has-warning', this.client && noFilesFound && (this.status != null));
        this.$('.locations-info .head-note').toggleClass('no-files', this.client && noFilesFound).toggleClass('has-files', this.client && !isNoURLError && this.filenames.length);
        this.$('.input-row.path').toggleClass('has-error', this.status === 'path_error');
        statusOK = this.status === 'ok';
        numMatches = ((function() {
          var _j, _len1, _ref5, _ref6, _ref7, _results;
          _ref5 = this.filenames;
          _results = [];
          for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
            file = _ref5[_j];
            if (((_ref6 = this.scan) != null ? (_ref7 = _ref6.files) != null ? _ref7[file] : void 0 : void 0) === true) {
              _results.push(true);
            }
          }
          return _results;
        }).call(this)).length;
        this.$('.locations-info .foot-note').toggleClass('no-matches', this.client && statusOK && !numMatches).toggleClass('all-matches', this.client && statusOK && numMatches && numMatches === this.filenames.length).toggleClass('some-matches', this.client && statusOK && numMatches > 0 && numMatches < this.filenames.length);
        if (statusOK && numMatches > 0 && numMatches < this.filenames.length) {
          this.$('.locations-info .some-matches .num-matches').text(numMatches);
          this.$('.locations-info .some-matches .num-files').html(this.filenames.length);
        }
        this.$('.input-row.path').toggleClass('has-warning', this.client && statusOK && !numMatches);
        this.$('.input-row.type').toggleClass('visible', statusOK);
        this.$('.input-row.missing-files').toggleClass('visible', statusOK && this.model.get('type') === 'css');
        this.$('.input-row.stylus-out').toggleClass('visible', statusOK && this.model.get('type') === 'stylus');
        if (((_ref5 = this.scan) != null ? _ref5.type : void 0) === 'css') {
          this.$('input.type[value=stylus]')[0].setAttribute('disabled', 'disabled');
        } else {
          this.$('input.type[value=stylus]')[0].removeAttribute('disabled');
        }
        if (((_ref6 = this.scan) != null ? _ref6.type : void 0) === 'stylus') {
          this.$('input.type[value=css]')[0].setAttribute('disabled', 'disabled');
        } else {
          this.$('input.type[value=css]')[0].removeAttribute('disabled');
        }
        this.$('.stylus-switch-hint').toggleClass('visible', statusOK && this.model.get('type') === 'css' && ((_ref7 = this.scan) != null ? _ref7.type : void 0) === 'css');
        this.$('.input-row.stylus-out').toggleClass('has-warning', this.client && statusOK && !((_ref8 = this.scan) != null ? _ref8.stylusout : void 0) && ((_ref9 = this.scan) != null ? _ref9.stylusoutExists : void 0));
        this.$('.input-row.stylus-out').toggleClass('has-error', this.client && statusOK && !((_ref10 = this.scan) != null ? _ref10.stylusoutExists : void 0));
        return this;
      },
      updateFileList: function() {
        var client, css, file, url;
        if (!(client = this.model.get('client'))) {
          return this.filenames = [];
        }
        css = client.get('css');
        url = this.model.get('url');
        return this.filenames = url.length && url.match(/^[a-z]+:\/\/\/?.+$/) ? ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = css.length; _i < _len; _i++) {
            file = css[_i];
            if (0 === file.indexOf(url)) {
              _results.push(file.substr(url.length));
            }
          }
          return _results;
        })()).sort() : [];
      },
      onURLChange: function() {
        var url,
          _this = this;
        this.model.unset('novalidate');
        url = this.$('input.url').val();
        if (url.length && url[url.length - 1] !== '/') {
          url += '/';
        }
        this.model.set({
          url: url
        });
        this.updateFileList();
        return this.validate(function() {
          _this.render();
          return _this.trigger('validate');
        });
      },
      onPathChange: function() {
        var path,
          _this = this;
        if (this._fakeBlur) {
          return;
        }
        path = this.toAbsolute(this.$('input.path').val());
        if (path.length && path[path.length - 1] !== '/') {
          path += '/';
        }
        this.model.set({
          path: path,
          stylusout: path
        });
        return this.validate(function() {
          _this.render();
          return _this.trigger('validate');
        });
      },
      onURLFocus: function() {
        return this.$('.input-row.url').addClass('editing');
      },
      onURLBlur: function() {
        return this.$('.input-row.url').removeClass('editing');
      },
      onEditClick: function() {
        return this.$('input.url').focus();
      },
      onBrowseClick: function() {
        var _this = this;
        return this.browse(this.model.get('path'), function(path) {
          _this.$('input.path').val(path);
          return _this.onPathChange();
        });
      },
      onBrowseStylusOutClick: function() {
        var _this = this;
        return this.browse(this.model.get('stylusout'), function(path) {
          _this.$('input.stylus-out').val(path);
          return _this.onStylusOutChange();
        });
      },
      onTypeChange: function() {
        this.model.set({
          type: this.$('input.type[value=css]')[0].checked ? 'css' : 'stylus'
        });
        return this.render();
      },
      onConvertClick: function() {
        return alert('Sorry. Not implemented yet. You can use "stylus -C" to convert files manually.');
      },
      onMissingFilesChange: function() {
        var value;
        return value = this.$('input.missing-files').val();
      },
      onStylusOutChange: function() {
        var path,
          _this = this;
        path = this.toAbsolute(this.$('input.stylus-out').val());
        if (path.length && path[path.length - 1] !== '/') {
          path += '/';
        }
        this.model.set({
          stylusout: path
        });
        return this.validate(function() {
          _this.render();
          return _this.trigger('validate');
        });
      },
      validate: function(cb) {
        var client, path, url,
          _this = this;
        if (this.model.get('novalidate')) {
          return cb(false);
        }
        this.status = null;
        url = this.model.get('url');
        if (!url.length) {
          this.status = 'url_empty';
          return cb(true);
        }
        if (!url.match(/^[a-z]+:\/\/.+\/.*$/)) {
          this.status = 'url_format';
          return cb(true);
        }
        path = this.model.get('path');
        if (!path.length) {
          this.status = 'path_empty';
          return cb(true);
        }
        if (!(client = this.model.get('client'))) {
          this.status = 'ok';
          return cb(false);
        }
        return app.socket.emit('checkDir', client.id, this.model.get('url'), this.model.get('path'), this.model.get('stylusout'), function(results) {
          var _ref1;
          if (results.status === 'no-directory') {
            _this.status = 'path_error';
            return cb(true);
          }
          if (results.status === 'ok') {
            _this.scan = results;
            _this.status = 'ok';
            if ((_ref1 = results.type) === 'css' || _ref1 === 'stylus') {
              _this.model.set({
                type: results.type
              });
            }
            return cb(false);
          }
        });
      },
      toAbsolute: function(path) {
        return path.replace(/^\//, app.root);
      },
      fromAbsolute: function(path) {
        if (0 === path.toLowerCase().indexOf(app.root.toLowerCase())) {
          path = '/' + path.substr(app.root.length);
        }
        return path;
      },
      onRemove: function() {
        return $(this.el).remove();
      },
      onRemoveClick: function() {
        return this.model.destroy();
      },
      browseFiles: function(path, cb) {
        return app.socket.emit('browseFiles', path, cb);
      },
      browse: function(current, cb) {
        var win,
          _this = this;
        win = window.open('', 'dirpicker', 'width=680,height=380,resizable=no,scrollbars=no');
        win.document.body.innerHTML = '';
        return require(['lib/views/ui/dirpicker'], function(DirPicker) {
          var dp, link, _i, _j, _len, _len1, _ref1, _ref2;
          _ref1 = document.getElementsByTagName('link');
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            link = _ref1[_i];
            win.document.body.appendChild(node('link', {
              rel: link.getAttribute('rel'),
              type: link.getAttribute('type'),
              href: window.location.protocol + '//' + window.location.host + link.getAttribute('href')
            }));
          }
          _ref2 = document.querySelectorAll('style[data-url]');
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            link = _ref2[_j];
            win.document.body.appendChild(node('link', {
              rel: 'stylesheet',
              type: 'text/css',
              href: link.getAttribute('data-url')
            }));
          }
          win.document.title = "Match source for " + (_this.model.get('url'));
          dp = new DirPicker({
            provider: _this.browseFiles,
            path: _this.fromAbsolute(current)
          });
          dp.bind('select', function(path) {
            return cb(path);
          });
          dp.bind('close', function() {
            return win.close();
          });
          return $(win.document.body).css({
            overflow: 'hidden'
          }).append(dp.render().el);
        });
      },
      startDirectoryComplete: function(e) {
        var input,
          _this = this;
        if (this._fakeBlur) {
          return;
        }
        input = e.target;
        $(input).on('keydown', this.onDirectoryKeyDown).on('blur', this.endDirectoryComplete);
        return _.delay(function() {
          return _this.onDirectoryKeyUp(e);
        });
      },
      onDirectoryKeyUp: function(e) {
        var complete, input, last, parts, path, selectionEnd, selectionStart, value,
          _this = this;
        input = e.target;
        if (input.selectionStart !== input.selectionEnd || input.selectionStart !== input.value.length) {
          return this.setCompletion(input, '');
        }
        if (!input.value.length) {
          return this.setCompletion(input, '/');
        }
        if (__indexOf.call(input.value, '/') < 0) {
          return this.setCompletion(input, '');
        }
        parts = input.value.split('/');
        path = _.initial(parts).join('/') + '/';
        last = _.last(parts);
        value = input.value;
        selectionStart = input.selectionStart;
        selectionEnd = input.selectionEnd;
        complete = function() {
          var dirs;
          if (!(input.value === value && input.selectionStart === selectionStart && input.selectionEnd === selectionEnd)) {
            return;
          }
          dirs = _this._completionCache[path];
          _this.completionOffset = last.length;
          _this.completionMatches = _.filter(dirs, function(dirname) {
            return 0 === dirname.indexOf(last);
          });
          _this.completionIndex = 0;
          _.each(_this.completionMatches, function(item, index) {
            if (item.substr(last.length) + '/' === input._completion) {
              return _this.completionIndex = index;
            }
          });
          return _this.setCompletion(input);
        };
        if (this._completionCache[path]) {
          return complete();
        } else {
          return this.cacheCompletion(path, complete);
        }
      },
      cacheCompletion: function(path, cb) {
        var _this = this;
        return this.browseFiles(path, function(_arg) {
          var dirs;
          dirs = _arg.dirs;
          _this._completionCache[path] = dirs;
          return cb();
        });
      },
      onDirectoryKeyDown: function(e) {
        var input, _ref1, _ref2, _ref3,
          _this = this;
        input = e.target;
        switch (e.keyCode) {
          case 38:
            if (((_ref1 = this.completionMatches) != null ? _ref1.length : void 0) > 1) {
              this.completionIndex--;
              if (this.completionIndex < 0) {
                this.completionIndex = this.completionMatches.length - 1;
              }
              this.setCompletion(input);
            }
            e.stopPropagation();
            e.preventDefault();
            break;
          case 40:
            if (((_ref2 = this.completionMatches) != null ? _ref2.length : void 0) > 1) {
              this.completionIndex++;
              if (this.completionIndex >= this.completionMatches.length) {
                this.completionIndex = 0;
              }
              this.setCompletion(input);
            }
            e.stopPropagation();
            e.preventDefault();
            break;
          case 9:
          case 13:
            if (!((_ref3 = input._completion) != null ? _ref3.length : void 0)) {
              return;
            }
            input.value += input._completion;
            input.setSelectionRange(input.value.length, input.value.length);
            input.scrollLeft = 1e6;
            input._completion = '';
            e.stopPropagation();
            e.preventDefault();
        }
        return _.delay(function() {
          return _this.onDirectoryKeyUp(e);
        });
      },
      setCompletion: function(input, value) {
        var $input, completionPfx, completionSfx, container, maxWidth, pfxWidth, sfxWidth;
        if (value == null) {
          value = this.completionMatches[this.completionIndex] ? this.completionMatches[this.completionIndex].substr(this.completionOffset) + '/' : '';
        }
        $input = $(input);
        container = $input.closest('.input-container');
        completionPfx = $(container).find('.completion-pfx');
        completionSfx = $(container).find('.completion-sfx');
        completionPfx.html(input.value.replace(/\s/g, '&nbsp;'));
        completionSfx.html(value.replace(/\s/g, '&nbsp;'));
        pfxWidth = parseInt(completionPfx.css('width'));
        sfxWidth = parseInt(completionSfx.css('width'));
        maxWidth = 267;
        if (pfxWidth + sfxWidth < maxWidth) {
          completionSfx.css({
            left: pfxWidth
          });
          $input.css({
            paddingRight: 2
          });
        } else {
          completionSfx.css({
            left: maxWidth - sfxWidth
          });
          $input.css({
            paddingRight: sfxWidth + 2
          });
        }
        $input.css({
          display: $input.css('display') === 'inline-block' ? 'block' : 'inline-block'
        });
        if (ua.isGecko) {
          this._fakeBlur = true;
          $input.blur().focus();
          this._fakeBlur = null;
        }
        input._completion = value;
        if (!value.length) {
          return this.completionMatches = null;
        }
      },
      endDirectoryComplete: function(e) {
        var input;
        if (this._fakeBlur) {
          return;
        }
        input = e.target;
        this.setCompletion(input, '');
        return $(input).off('keydown', this.onDirectoryKeyDown).off('blur', this.endDirectoryComplete);
      }
    });
    return module.exports = {
      URLInput: URLInput,
      URLInputList: URLInputList,
      URLInputView: URLInputView
    };
  });

}).call(this);
define('lib/templates/url_input', ['require', 'exports', 'module' , 'vendor/jade'], function(require, exports, module) {
  require("vendor/jade"); 
  module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {
attrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;
var buf = [];
with (locals || {}) {
var interp;
buf.push('<div class="fields"><div class="input-row url"><div class="label">URL</div><div class="field"><div class="btn edit">Edit</div><div class="note-indicator"></div><input class="text url"/></div><div class="note"></div></div><div class="input-row path"><div class="label">Source directory</div><div class="field"><div class="btn browse browse-source">Browse</div><div class="note-indicator"></div><div class="input-container"><input class="text path"/><div class="completion-pfx"></div><div class="completion-sfx"></div></div></div><div class="note">No such directory was found on your hard drive.</div></div><div class="input-row type"><div class="label">Source file format</div><div class="field"><input');
buf.push(attrs({ 'type':("radio"), 'name':("type"), 'value':("css"), 'id':("type_css_" + id), "class": ('type') }, {"type":true,"name":true,"value":true,"id":true}));
buf.push('/><label');
buf.push(attrs({ 'for':("type_css_" + id) }, {"for":true}));
buf.push('>CSS</label><input');
buf.push(attrs({ 'type':("radio"), 'name':("type"), 'value':("stylus"), 'id':("type_stylus_" + id), "class": ('type') }, {"type":true,"name":true,"value":true,"id":true}));
buf.push('/><label');
buf.push(attrs({ 'for':("type_stylus_" + id) }, {"for":true}));
buf.push('>Stylus</label></div><div class="conversion-hint"></div></div><div class="input-row missing-files"><div class="label">When files are missing</div><div class="field"><input');
buf.push(attrs({ 'type':("radio"), 'name':("missing"), 'value':("ignore"), 'id':("missing_ignore_" + id), "class": ('missing-files') }, {"type":true,"name":true,"value":true,"id":true}));
buf.push('/><label');
buf.push(attrs({ 'for':("missing_ignore_" + id) }, {"for":true}));
buf.push('>Ignore</label><input');
buf.push(attrs({ 'type':("radio"), 'name':("missing"), 'value':("create"), 'id':("missing_create_" + id), "class": ('missing-files') }, {"type":true,"name":true,"value":true,"id":true}));
buf.push('/><label');
buf.push(attrs({ 'for':("missing_create_" + id) }, {"for":true}));
buf.push('>Create new files</label></div></div><div class="input-row stylus-out"><div class="label">Stylus output directory</div><div class="field"><div class="btn browse browse-stylus-out">Browse</div><div class="note-indicator"></div><div class="input-container"><input class="text stylus-out"/><div class="completion-pfx"></div><div class="completion-sfx"></div></div></div><div class="note">No such directory was found on your hard drive.</div></div><div class="stylus-switch-hint">Although Styler fully supports editing CSS stylesheets we encourage you to have a look at Stylus.\nStylus improves CSS format with many great features that help you become more productive.\nYou can learn more about Stylus from<a href="http://learnboost.github.com/stylus/" target="_blank">here</a>. You may also choose CSS for now and return later to this view to switch between formats.<div class="btn convert">Convert all files in this location to Stylus format</div><div class="clear"></div></div></div><div class="locations-info"><div class="head-note"><div class="msg no-url">Please select the URL for the CSS files location.</div><div class="msg no-files">No CSS files were found from your page that match this URL.</div><div class="msg has-files">This location contains following files:</div></div><div class="file-list"></div><div class="foot-note"><div class="msg no-matches">No matching source files were found from the source directory.</div><div class="msg some-matches"><span class="num-matches"></span>of<span class="num-files"></span>files were matched with the source files.</div><div class="msg all-matches">All files matched the source files.</div></div></div><div class="btn remove">Remove this location</div><div class="clear"></div>');
}
return buf.join("");
};
});define('lib/templates/new_project', ['require', 'exports', 'module' , 'vendor/jade'], function(require, exports, module) {
  require("vendor/jade"); 
  module.exports = function anonymous(locals, attrs, escape, rethrow, merge) {
attrs = attrs || jade.attrs; escape = escape || jade.escape; rethrow = rethrow || jade.rethrow; merge = merge || jade.merge;
var buf = [];
with (locals || {}) {
var interp;
if ( mode == 'edit')
{
buf.push('<h2 class="title">Edit project</h2>');
}
else
{
buf.push('<h2 class="title">Create new project</h2><div class="descr">Fill in the details below to start using Styler in your page.</div>');
}
buf.push('<form class="new-project"><div class="errors-summary"><div class="heading">Please review the following issues before submitting:</div><div class="errors"></div></div><div class="input-row name"><div class="label"><label>Project name</label></div><div class="field"><div class="note-indicator"></div><input id="name" class="text"/></div><div class="note"></div></div><div class="input-row baseurl"><div class="label"> <label>Base URL</label></div><div class="field"> <div class="note-indicator"></div><input id="baseurl" class="text"/></div><div class="note"></div><div class="hint">Base URL defines the enrtypoint for your projects pages. All pages that start with this URL are counted as being part of the project.</div></div><div class="sources"><div class="heading">Source locations</div><div class="hint"></div><div class="sources-list"></div><div class="btn add-source">Add new location</div></div><div><input type="submit" value="Save project"/></div></form>');
}
return buf.join("");
};
});// Generated by CoffeeScript 1.6.1
(function() {

  define('lib/views/ui/dirpicker', ['require', 'exports', 'module' , 'empty', 'lib/utils'], function(require, exports, module) {
    var DirPicker, DirStack, node, style, _ref;
    require('empty');
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style;
    DirStack = Backbone.View.extend({
      className: 'stack',
      events: {
        'click .diritem': 'onSelect'
      },
      initialize: function(opt) {
        var _this = this;
        this.picker = opt.picker;
        this.path = opt.path;
        this.selectedItem = null;
        return this.picker.provider(this.picker.cleanPath(this.path), function(res) {
          var dir, dirs, drive, file, files, item, _i, _j, _k, _len, _len1, _len2, _ref1;
          if (res.drives) {
            _ref1 = res.drives;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              drive = _ref1[_i];
              item = node('div', {
                "class": 'item diritem driveitem',
                'data-filename': drive
              }, drive);
              _this.el.appendChild(item);
            }
          }
          dirs = _.sortBy(res.dirs, function(dirname) {
            return dirname.toLowerCase();
          });
          for (_j = 0, _len1 = dirs.length; _j < _len1; _j++) {
            dir = dirs[_j];
            item = node('div', {
              "class": 'item diritem',
              'data-filename': dir
            }, dir);
            _this.el.appendChild(item);
          }
          files = _.sortBy(res.files, function(filename) {
            return filename.toLowerCase();
          });
          for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
            file = files[_k];
            item = node('div', {
              "class": 'item'
            }, file);
            $(item).addClass(/\.styl$/i.test(file) ? 'stylitem' : 'cssitem');
            _this.el.appendChild(item);
          }
          if (_this.selectedFile) {
            return _this.selectFile();
          }
        });
      },
      selectFile: function(filename) {
        var item;
        if (filename == null) {
          filename = this.selectedFile;
        }
        item = _.find(this.$('.item').get(), function(item) {
          return filename === item.getAttribute('data-filename');
        });
        this.selectedFile = filename;
        return this.selectItem(item);
      },
      selectItem: function(item) {
        if (this.selectedItem) {
          $(this.selectedItem).removeClass('selected');
        }
        this.selectedItem = item;
        return $(this.selectedItem).addClass('selected');
      },
      onSelect: function(e) {
        var item, path;
        item = e.currentTarget;
        path = this.path + item.getAttribute('data-filename');
        return this.picker.openPath(path);
      },
      remove: function() {
        return this.$el.remove();
      }
    });
    DirPicker = Backbone.View.extend({
      className: 'dirpicker',
      events: {
        'click .btn.cancel': 'cancel',
        'click .btn.select': 'select'
      },
      initialize: function(opt) {
        var path;
        this.provider = opt.provider;
        this.stacks = [];
        this.$el.append(node('div', {
          "class": 'stack-scroller-cont'
        }, this.scroller = node('div', {
          "class": 'stack-scroller'
        }, this.stackcont = node('div', {
          "class": 'stack-cont'
        }))));
        this.$el.append(node('div', {
          "class": 'buttons'
        }, node('div', {
          "class": 'btn cancel'
        }, 'Cancel'), node('div', {
          "class": 'btn select'
        }, 'Select')));
        path = opt.path || '/';
        if (path[0] !== '/') {
          path = '/' + path;
        }
        return this.openPath(path);
      },
      openPath: function(path) {
        var i, len, parts, stack, _i,
          _this = this;
        parts = path.split('/');
        len = parts.length;
        if (parts[parts.length - 1] === '') {
          len--;
        }
        path = '';
        this.clearStacksFromIndex(len);
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          path += parts[i] + '/';
          stack = this.stacks[i];
          if (stack) {
            if (stack.path !== path) {
              this.clearStacksFromIndex(i);
            } else {
              continue;
            }
          }
          stack = new DirStack({
            path: path,
            picker: this
          });
          this.stackcont.appendChild(stack.render().el);
          if (this.stacks.length) {
            this.stacks[this.stacks.length - 1].selectFile(parts[i]);
          }
          this.stacks.push(stack);
        }
        this.path = path;
        $(this.stackcont).css({
          width: this.stacks.length * 180
        });
        return _.delay(function() {
          return _this.scroller.scrollLeft = 10e4;
        }, 100);
      },
      clearStacksFromIndex: function(i) {
        var stack, _results;
        _results = [];
        while (this.stacks.length >= i) {
          stack = this.stacks[this.stacks.length - 1];
          stack.remove();
          _results.push(this.stacks.pop());
        }
        return _results;
      },
      close: function() {
        return this.trigger('close');
      },
      cancel: function() {
        return this.close();
      },
      cleanPath: function(path) {
        var parts;
        parts = path.split('/');
        if (parts[1].match(/^[a-z]\:$/i)) {
          parts.shift();
        }
        return parts.join('/');
      },
      select: function() {
        this.trigger('select', this.cleanPath(this.path));
        return this.close();
      }
    });
    return module.exports = DirPicker;
  });

}).call(this);
