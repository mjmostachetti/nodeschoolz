// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var MouseCommands, Range, combineUrl, hexToRgb, listenKey, node, ua, _ref;
    Range = require('ace/range').Range;
    ua = require('ace/lib/useragent');
    _ref = require('lib/utils'), combineUrl = _ref.combineUrl, node = _ref.node, hexToRgb = _ref.hexToRgb;
    listenKey = require('lib/keyboard').listenKey;
    MouseCommands = Backbone.View.extend({
      className: 'editor-command-highlight',
      initialize: function(opt) {
        _.bindAll(this, 'onActivationKeyDown', 'onActivationKeyUp', 'onContainerMouseMove', 'onMouseDown', 'onNumericMouseMove', 'onNumericMouseUp', 'onMouseMove', 'onMouseWheel');
        this.editor = opt.editor;
        this.editor.navigateUpDown = function(delta) {
          var cursor, document, indent, line, nextIndent, nextLine, offset, _ref1;
          document = (_ref1 = this.getSession()) != null ? _ref1.doc : void 0;
          if (!document) {
            return;
          }
          this.selection.clearSelection();
          cursor = this.selection.getCursor();
          line = document.getLine(cursor.row);
          indent = (line.match(/^\s*/))[0].length;
          offset = 0;
          if (cursor.column === indent) {
            nextLine = document.getLine(cursor.row + delta);
            nextIndent = nextLine.match(/^\s*/)[0].length;
            offset = nextIndent - indent;
          }
          return this.selection.moveCursorBy(delta, offset);
        };
        this.editor.navigateUp = function(times) {
          times = times || 1;
          return this.navigateUpDown(-times);
        };
        this.editor.navigateDown = function(times) {
          times = times || 1;
          return this.navigateUpDown(times);
        };
        listenKey('editor', 'numeric-increment', {
          exec: (function(_this) {
            return function() {
              return _this.offsetNumeric(1);
            };
          })(this)
        });
        listenKey('editor', 'numeric-decrement', {
          exec: (function(_this) {
            return function() {
              return _this.offsetNumeric(-1);
            };
          })(this)
        });
        listenKey('editor', 'numeric-increment-many', {
          exec: (function(_this) {
            return function() {
              return _this.offsetNumeric(10);
            };
          })(this)
        });
        listenKey('editor', 'numeric-decrement-many', {
          exec: (function(_this) {
            return function() {
              return _this.offsetNumeric(-10);
            };
          })(this)
        });
        this.commandKey = (ua.isMac ? (ua.isGecko ? 224 : 91) : 17);
        this.activated = false;
        this.action = {};
        $(window).on('keydown', this.onActivationKeyDown).on('keyup', this.onActivationKeyUp);
        this.$el.on('mousedown', this.onMouseDown).on('mousemove', this.onMouseMove);
        return this.editor.addEventListener('mousewheel', this.onMouseWheel);
      },
      onActivationKeyDown: function(e) {
        if (e.keyCode === this.commandKey && app.isEditorMode && !this.activated) {
          this.activated = true;
          return $(this.editor.container).on('mousemove', this.onContainerMouseMove);
        }
      },
      onActivationKeyUp: function(e) {
        if (this.activated && (e === true || e.keyCode === this.commandKey)) {
          this.activated = false;
          $(this.editor.container).off('mousemove', this.onContainerMouseMove);
          return this.stopCommand();
        }
      },
      showCmdHighlight: function(coord, match, type) {
        var editorPosition, pxcoord;
        this.action = {
          coord: coord,
          match: match,
          type: type
        };
        editorPosition = this.editor.container.getBoundingClientRect();
        pxcoord = this.editor.renderer.textToScreenCoordinates(coord.row, match.offset);
        this.$el.toggleClass('is-selectable', type !== 'numeric').css({
          left: pxcoord.pageX - editorPosition.left,
          top: pxcoord.pageY - editorPosition.top,
          width: match.match.length * this.editor.renderer.characterWidth,
          height: this.editor.renderer.lineHeight,
          display: 'block'
        });
        this.visible = true;
        if (type !== 'url') {
          return this.lastUrl = null;
        }
      },
      startCommand: function(coord) {
        var match;
        if (match = this.checkValidNumeric(coord)) {
          return this.showCmdHighlight(coord, match, 'numeric');
        } else if (match = this.checkValidPattern(coord, /#[0-9a-f]{3,6}(?:\b|;|$)/ig)) {
          return this.showCmdHighlight(coord, match, 'color');
        } else if (match = this.checkValidPattern(coord, /url\([a-z0-9"'\/\\\.@_-]+\)/ig)) {
          return this.showCmdHighlight(coord, match, 'url');
        } else if (this.visible) {
          return this.stopCommand();
        }
      },
      onMouseWheel: function(e) {
        if (e.domEvent.target === this.el && this.action.type === 'numeric') {
          if (this.action.wheelDelta == null) {
            this.action.stackPosition = this.editor.session.getUndoManager().$undoStack.length;
            this.action.wheelDelta = 0;
          }
          this.action.wheelDelta += e.wheelY;
          this.updateNumericValue(Math.floor(this.action.wheelDelta * (e.domEvent.shiftKey ? 3 : .25)));
          return e.stop();
        } else {
          return this.stopCommand();
        }
      },
      stopCommand: function() {
        var _ref1;
        this.action = {};
        this.lastUrl = null;
        if ((_ref1 = this.infoTip) != null) {
          _ref1.hide();
        }
        return this.$el.hide();
      },
      onContainerMouseMove: function(e) {
        if (!(ua.isMac ? e.metaKey : e.ctrlKey)) {
          return this.onActivationKeyUp(true);
        }
        if (this.action.type === 'numeric' && (this.action.lastScrollOffset != null)) {
          return;
        }
        return this.startCommand(this.editor.renderer.screenToTextCoordinates(e.pageX, e.pageY));
      },
      onMouseDown: function(e) {
        if (!(this.activated && !e.button)) {
          return;
        }
        switch (this.action.type) {
          case 'color':
            this.startColorPicker(this.action.match, this.action.coord);
            this.stopCommand();
            break;
          case 'url':
            require(['lib/views/ui/imagepreview'], (function(_this) {
              return function(ImagePreview) {
                var fileurl, url;
                url = (_this.action.match.match.match(/^url\(['"]?(.*?)["']?\)$/i))[1];
                fileurl = app.console.editor.tabs.selectedTab().get('url');
                new ImagePreview(combineUrl(fileurl, url));
                return _this.stopCommand();
              };
            })(this));
            break;
          case 'numeric':
            if (this.action.lastScrollOffset != null) {
              return;
            }
            $(window).on('mousemove', this.onNumericMouseMove).on('mouseup', this.onNumericMouseUp);
            $(document).on('selectstart', this.preventDefault);
            this.action.lastScrollOffset = e.pageY;
            this.action.stackPosition = this.editor.session.getUndoManager().$undoStack.length;
        }
        e.stopPropagation();
        return e.preventDefault();
      },
      onNumericMouseMove: function(e) {
        var delta;
        delta = e.pageY - this.action.lastScrollOffset;
        return this.updateNumericValue(Math.floor(delta * (e.shiftKey ? 2 : .2)));
      },
      onNumericMouseUp: function() {
        $(window).off('mousemove', this.onNumericMouseMove).off('mouseup', this.onNumericMouseUp);
        $(document).off('selectstart', this.preventDefault);
        return delete this.action.lastScrollOffset;
      },
      preventDefault: function(e) {
        e.stopPropagation();
        return e.preventDefault();
      },
      updateNumericValue: function(delta) {
        var coord, match, newValue, replaced, session, stackPosition, _ref1;
        if (this.action.type !== 'numeric') {
          return;
        }
        _ref1 = this.action, stackPosition = _ref1.stackPosition, match = _ref1.match, coord = _ref1.coord;
        session = this.editor.session;
        newValue = (match.value + delta * Math.pow(10, -match.presicion)).toFixed(match.presicion);
        while (stackPosition < session.getUndoManager().$undoStack.length) {
          session.getUndoManager().undo(true);
        }
        this.editor.session.selection.clearSelection();
        this.editor.session.selection.moveCursorTo(coord.row, coord.column);
        replaced = this.replaceNumeric(coord, match, newValue);
        this.editor.session.$syncInformUndoManager();
        return this.$el.css({
          width: replaced.length * this.editor.renderer.characterWidth
        });
      },
      startColorPicker: function(match, coord) {
        var popup, stackPosition;
        stackPosition = this.editor.session.getUndoManager().$undoStack.length;
        popup = window.open('', 'colorpicker', 'width=410,height=300,resizable=no,scrollbars=no');
        $(popup.document.body).css({
          overflow: 'hidden',
          margin: 0,
          background: '#444'
        });
        popup.document.title = 'Color picker';
        app.console.dialogOpen = true;
        return _.defer((function(_this) {
          return function() {
            if (match === false) {
              match = _this.checkValidPattern(coord, /[^\s;]+/ig);
              if (!match) {
                match = {
                  match: '',
                  offset: coord.column
                };
              }
            }
            return require(['vendor/colorpicker'], function(colorPicker) {
              var lastValue, startValue, _ref1;
              colorPicker.cP = null;
              colorPicker.exportColor = function() {
                var lastValue, value;
                value = colorPicker.CP.hex;
                if (value === lastValue) {
                  return;
                }
                lastValue = value;
                value = value.toLowerCase();
                if (value[0] === value[1] && value[2] === value[3] && value[4] === value[5]) {
                  value = value[0] + value[2] + value[4];
                }
                while (stackPosition < _this.editor.session.getUndoManager().$undoStack.length) {
                  _this.editor.session.getUndoManager().undo(true);
                }
                _this.editor.session.selection.clearSelection();
                _this.editor.session.selection.moveCursorTo(coord.row, coord.column);
                _this.editor.session.doc.replace(new Range(coord.row, match.offset, coord.row, match.offset + match.match.length), '#' + value);
                return _this.editor.session.$syncInformUndoManager();
              };
              colorPicker.saveColor = function() {
                return popup.close();
              };
              startValue = '#000';
              if (match.match[0] === '#' && ((_ref1 = match.match.length) === 4 || _ref1 === 7)) {
                startValue = match.match;
              }
              colorPicker(null, 'H', 4, false, false, false, false, true, 0, 3, ['top', 'left'], popup.document.body, '', startValue.toUpperCase(), 2, 15, 0, popup.document.body, popup.document);
              lastValue = match.match.substr(1);
              return $(popup.document).on('blur', function() {
                return popup.close();
              }).on('unload', function() {
                return app.console.dialogOpen = false;
              }).on('keydown', function(e) {
                if (e.keyCode === 27) {
                  while (stackPosition < _this.editor.session.getUndoManager().$undoStack.length) {
                    _this.editor.session.getUndoManager().undo(true);
                  }
                  popup.close();
                }
                if (e.keyCode === 13) {
                  return popup.close();
                }
              });
            });
          };
        })(this));
      },
      onMouseMove: function(e) {
        var color, fileurl, url;
        if (!(this.activated && this.action.type !== 'numeric')) {
          return;
        }
        switch (this.action.type) {
          case 'url':
            url = (this.action.match.match.match(/^url\(['"]?(.*?)["']?\)$/i))[1];
            if (url === this.lastUrl) {
              return;
            }
            this.lastUrl = url;
            fileurl = app.console.editor.tabs.selectedTab().get('url');
            url = combineUrl(fileurl, url);
            return require(['lib/views/ui/infotip', 'lib/views/ui/imagepreview'], (function(_this) {
              return function(infoTip, ImagePreview) {
                _this.infoTip = infoTip;
                return infoTip.showPanel(e, 130, 100, function(cb) {
                  return ImagePreview.getPreviewElement(url, 120, 70, function(err, el) {
                    if (err) {
                      return;
                    }
                    return cb(el);
                  });
                });
              };
            })(this));
          case 'color':
            color = this.action.match.match;
            return require(['lib/views/ui/infotip', 'vendor/colorpicker'], (function(_this) {
              return function(infoTip, colorPicker) {
                _this.infoTip = infoTip;
                return infoTip.showPanel(e, 80, 40, function(cb) {
                  var rgb;
                  rgb = hexToRgb(color);
                  return cb(node('div', {
                    "class": 'colorinfo'
                  }, node('div', {
                    "class": 'sample',
                    style: {
                      backgroundColor: color
                    }
                  }), node('div', {
                    "class": 'values'
                  }, node('div', 'R: ' + rgb[0]), node('div', 'G: ' + rgb[1]), node('div', 'B: ' + rgb[2]))));
                });
              };
            })(this));
        }
      },
      offsetNumeric: function(delta) {
        var cursor, found, session;
        if (delta == null) {
          delta = 1;
        }
        if (!(session = this.editor.getSession())) {
          return;
        }
        cursor = session.selection.getCursor();
        if (found = this.checkValidNumeric(cursor)) {
          this.replaceNumeric(cursor, found, (found.value + delta * Math.pow(10, -found.presicion)).toFixed(found.presicion));
          session.selection.setSelectionAnchor(cursor.row, cursor.column);
          session.selection.moveCursorTo(cursor.row, cursor.column);
        }
        if (event) {
          event.stopPropagation();
          return event.preventDefault();
        }
      },
      checkValidPattern: function(cursor, regexp) {
        var found, line, session;
        session = this.editor.getSession();
        line = session.getLine(cursor.row);
        found = null;
        line.replace(regexp, function(match, offset) {
          if (offset <= cursor.column && offset + match.length >= cursor.column) {
            return found = {
              match: match,
              offset: offset
            };
          }
        });
        return found;
      },
      checkValidNumeric: function(cursor) {
        var firstpart, match, _ref1;
        match = this.checkValidPattern(cursor, /-?[\d\.]+(?:px|em|ex|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)(?=\W|$)/ig);
        if (match) {
          firstpart = match.match.match(/-?[\d\.]+/)[0];
          match.presicion = ((_ref1 = firstpart.split('.')[1]) != null ? _ref1.length : void 0) || 0;
          match.len = firstpart.length;
          match.value = parseFloat(firstpart);
        }
        return match;
      },
      replaceNumeric: function(cursor, match, newValue) {
        var session;
        session = this.editor.getSession();
        newValue += match.match.substr(match.len);
        session.doc.replace(new Range(cursor.row, match.offset, cursor.row, match.offset + match.match.length), newValue);
        return newValue;
      },
      destroy: function() {}
    });
    return module.exports = MouseCommands;
  });

}).call(this);
