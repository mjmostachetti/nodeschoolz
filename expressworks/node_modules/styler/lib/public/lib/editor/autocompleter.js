// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var PropertyCompletions, addProperty, complete, completeAtRule, completeProperty, completePseudo, completeSelector, properties, propertiesBase, propertiesBaseMoz, propertiesBaseMozWebkit, propertiesBaseMs, propertiesBaseO, propertiesBaseWebkit, propertiesStylus, pseudoClasses;
    PropertyCompletions = require("lib/propertycompletions");
    completeSelector = function(format, selector, parent, offset, cb) {
      var before, c, found, p, parentSelectors, part, parts, selectorAfter, selectorBefore, _i, _j, _len, _len1;
      if (selector.length !== offset && selector[offset] !== " ") {
        return cb(null);
      }
      before = selector.substr(0, offset);
      parts = selector.split(" ");
      selectorBefore = [];
      selectorAfter = [];
      c = 0;
      found = false;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (found) {
          selectorAfter.push(part);
        } else {
          c += part.length + 1;
        }
        if (c <= offset) {
          selectorBefore.push(part);
        } else if (!found) {
          selectorBefore = (selectorBefore.join(" ")).trim();
          offset -= c - part.length - 1;
          found = true;
          selector = part;
        }
      }
      selectorAfter = (selectorAfter.join(" ")).trim();
      parentSelectors = [];
      for (_j = 0, _len1 = parent.length; _j < _len1; _j++) {
        p = parent[_j];
        if (selectorBefore) {
          if (selectorBefore.indexOf("&") !== -1) {
            parentSelectors.push(selectorBefore.replace("&", p));
          } else {
            parentSelectors.push(p + " " + selectorBefore);
          }
        } else {
          parentSelectors.push(p);
        }
      }
      return app.console.callClient("findElementMatches", {
        selector: selector,
        parent: parentSelectors,
        offset: offset,
        after: selectorAfter
      }, function(resp) {
        return cb({
          items: _.map(resp.results.sort(), function(value) {
            return {
              value: value
            };
          }),
          offset: offset
        });
      });
    };
    propertiesBase = "alignment-baseline|background|background-attachment|background-clip|background-color|background-image|background-origin|background-position|background-repeat|background-size|baseline-shift|border|border-color|border-width|border-style|border-bottom|border-bottom-color|border-bottom-left-radius|border-bottom-right-radius|border-bottom-style|border-bottom-width|border-collapse|border-image-outset|border-image-repeat|border-image-slice|border-image-source|border-image-width|border-left|border-left-color|border-left-style|border-left-width|border-radius|border-right|border-right-color|border-right-style|border-right-width|border-spacing|border-top|border-top-color|border-top-left-radius|border-top-right-radius|border-top-style|border-top-width|bottom|box-shadow|box-sizing|caption-side|clear|clip|clip-path|clip-rule|color|color-interpolation|color-interpolation-filters|color-rendering|content|counter-increment|counter-reset|cursor|direction|display|dominant-baseline|empty-cells|fill|fill-opacity|fill-rule|filter|float|flood-color|flood-opacity|font|font-family|font-size|font-size-adjust|font-stretch|font-style|font-variant|font-weight|glyph-orientation-horizontal|glyph-orientation-vertical|height|image-rendering|ime-mode|kerning|left|letter-spacing|lighting-color|line-height|list-style|list-style-image|list-style-position|list-style-type|margin|margin-bottom|margin-left|margin-right|margin-top|marker|marker-end|marker-mid|marker-offset|marker-start|mask|max-height|max-width|min-height|min-width|opacity|orphans|outline-color|outline-offset|outline-style|outline-width|overflow|overflow-x|overflow-y|padding|padding-bottom|padding-left|padding-right|padding-top|page-break-after|page-break-before|page-break-inside|pointer-events|position|quotes|resize|right|ruby-align|ruby-overhang|ruby-position|shape-rendering|speak|stop-color|stop-opacity|stroke|stroke-dasharray|stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|stroke-width|table-layout|text-align|text-anchor|text-decoration|text-indent|text-justify-trim|text-kashida|text-overflow|text-rendering|text-shadow|text-transform|top|unicode-bidi|vector-effect|vertical-align|visibility|white-space|widows|width|word-break|word-spacing|word-wrap|z-index|zoom|marks";
    propertiesBaseMozWebkit = "animation|animation-delay|animation-direction|animation-duration|animation-fill-mode|animation-iteration-count|animation-name|animation-play-state|animation-timing-function|appearance|backface-visibility|border-image|box-align|box-direction|box-flex|box-ordinal-group|box-orient|box-pack|column-count|column-gap|column-rule-color|column-rule-style|column-rule-width|column-width|hyphens|perspective|perspective-origin|transform|transform-origin|transform-style|transition|transition-delay|transition-duration|transition-property|transition-timing-function|user-modify|user-select";
    propertiesBaseWebkit = "background-inline-policy|binding|border-bottom-colors|border-left-colors|border-right-colors|border-top-colors|box-sizing|column-rule|float-edge|font-feature-settings|font-language-override|force-broken-image-icon|image-region|orient|outline-radius|outline-radius-bottomleft|outline-radius-bottomright|outline-radius-topleft|outline-radius-topright|stack-sizing|tab-size|text-blink|text-decoration-color|text-decoration-line|text-decoration-style|user-focus|user-input|window-shadow";
    propertiesBaseMoz = "background-clip|background-composite|background-origin|background-size|border-fit|border-horizontal-spacing|border-vertical-spacing|box-flex-group|box-lines|box-reflect|box-shadow|color-correction|column-break-after|column-break-before|column-break-inside|column-span|dashboard-region|flow-into|font-smoothing|highlight|hyphenate-character|hyphenate-limit-after|hyphenate-limit-before|hyphenate-limit-lines|line-box-contain|line-break|line-clamp|locale|margin-after-collapse|margin-before-collapse|marquee|marquee-direction|marquee-increment|marquee-repetition|marquee-style|mask|mask-attachment|mask-box-image|mask-box-image-outset|mask-box-image-repeat|mask-box-image-slice|mask-box-image-source|mask-box-image-width|mask-clip|mask-composite|mask-image|mask-origin|mask-position|mask-repeat|mask-size|nbsp-mode|region-break-after|region-break-before|region-break-inside|region-overflow|rtl-ordering|svg-shadow|tap-highlight-color|text-combine|text-decorations-in-effect|text-emphasis-color|text-emphasis-position|text-emphasis-style|text-fill-color|text-orientation|text-security|text-stroke-color|text-stroke-width|transform-style|user-drag|writing-mode";
    propertiesBaseMs = "accelerator|background-position-x|background-position-y|behavior|block-progression|filter|ime-mode|interpolation-mode|layout-flow|layout-grid|layout-grid-char|layout-grid-line|layout-grid-mode|layout-grid-type|line-break|overflow-x|overflow-y|scrollbar-3dlight-color|scrollbar-arrow-color|scrollbar-base-color|scrollbar-darkshadow-color|scrollbar-face-color|scrollbar-highlight-color|scrollbar-shadow-color|scrollbar-track-color|text-align-last|text-autospace|text-justify|text-kashida-space|text-overflow|text-size-adjust|text-underline-position|transform-origin-x|transform-origin-y|word-break|word-wrap|writing-mode|zoom";
    propertiesBaseO = "border-image|link|link-source|tab-size|table-baseline|transform|transform-origin|transition|transition-delay|transition-duration|transition-property|transition-timing-function";
    propertiesStylus = "no-wrap?|box-shadow|user-select|column-count|column-gap|column-rule|column-rule-color|column-rule-width|column-rule-style|column-width|background-size|transform|border-image|transition|transition-property|transition-duration|transition-timing-functions|transition-delay|backface-visibility|opacity|whitespace|box-sizing|box-orient|box-flex|box-flex-group|box-align|box-pack|box-direction|animation|animation-name|animation-duration|animation-delay|animation-iteration-count|animation-timing-function|animation-play-state|animation-fill-mode|border-image|hyphens|appearance|border-radius|reset-box-model?|reset-font?|reset-body?|reset-html5?|fixed|absolute|relative|clearfix?|box|@extends";
    properties = propertiesBase.split("|");
    addProperty = function(propStr, pfx) {
      var prop, _i, _len, _ref, _results;
      _ref = propStr.split("|");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prop = _ref[_i];
        _results.push(properties.push("-" + pfx + "-" + prop));
      }
      return _results;
    };
    addProperty(propertiesBaseMozWebkit, "webkit");
    addProperty(propertiesBaseMozWebkit, "moz");
    addProperty(propertiesBaseWebkit, "webkit");
    addProperty(propertiesBaseMoz, "moz");
    addProperty(propertiesBaseMs, "ms");
    addProperty(propertiesBaseO, "o");
    propertiesStylus = propertiesStylus.split("|");
    pseudoClasses = "hover|focus|active|link|visited||lang|first-child|last-child|first-line|first-letter|before|after".split("|");
    completeProperty = function(format, property, offset, cb) {
      var filter, matches;
      property = property.toLowerCase();
      filter = function(p) {
        return p.length >= property.length && p.indexOf(property) === 0;
      };
      matches = _.filter(properties, filter);
      if (format) {
        matches = matches.concat(_.filter(propertiesStylus, filter));
      }
      return cb({
        items: _.map(matches.sort(), function(m) {
          if (m[m.length - 1] === "?") {
            return {
              value: m.substr(0, m.length - 1)
            };
          } else {
            return {
              value: m,
              property: true
            };
          }
        }),
        offset: offset
      });
    };
    completePseudo = function(pseudo, offset, cb) {
      var matches;
      pseudo = pseudo.toLowerCase();
      matches = _.filter(pseudoClasses, function(p) {
        return p.length >= pseudo.length && p.indexOf(pseudo) === 0;
      });
      return cb({
        items: _.map(matches, function(m) {
          return {
            value: m
          };
        }),
        offset: offset
      });
    };
    completeAtRule = function(format, rule, offset, cb) {
      var atrules, matches, pfx;
      atrules = '@font-face|@import|@media|@keyframes|@charset|@page'.split('|');
      console.log('stylus', format);
      if (format === 'css') {
        atrules = atrules.concat((function() {
          var _i, _len, _ref, _results;
          _ref = 'webkit|moz|o|ms'.split('|');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pfx = _ref[_i];
            _results.push("@-" + pfx + "-keyframes");
          }
          return _results;
        })());
      }
      matches = _.filter(atrules, function(r) {
        return r.length >= rule.length && r.indexOf(rule) === 0;
      });
      return cb({
        items: _.map(matches, function(m) {
          return {
            value: m,
            sfx: ' '
          };
        }),
        offset: offset
      });
    };
    complete = function(format, req, cb) {
      switch (req.type) {
        case "selector":
          return completeSelector(format, req.selector, req.parent, req.offset, cb);
        case "property":
          return completeProperty(format, req.property, req.offset, cb);
        case "value":
          req.value = req.value.replace(/[\!;].*$/, "");
          if (req.offset > req.value.length) {
            return cb(null);
          }
          return PropertyCompletions.complete(format, req.property, req.value, req.offset, cb);
        case "pseudo":
          return completePseudo(req.pseudo, req.offset, cb);
        case 'atrule':
          return completeAtRule(format, req.rule, req.offset, cb);
        case 'atrulevalue':
          return PropertyCompletions.completeAtRule(format, req.rule, req.value, req.offset, cb);
      }
    };
    exports.complete = complete;
    return exports;
  });

}).call(this);
