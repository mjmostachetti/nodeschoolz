// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var NewProjectView, URLInput, URLInputList, URLInputView, combineURLRoots, node, parallel, _ref, _ref1;
    _ref = require('lib/views/ui/urlinput'), URLInputView = _ref.URLInputView, URLInput = _ref.URLInput, URLInputList = _ref.URLInputList;
    _ref1 = require('lib/utils'), node = _ref1.node, combineURLRoots = _ref1.combineURLRoots, parallel = _ref1.parallel;
    require('vendor/link!css/newproject.css');
    NewProjectView = Backbone.View.extend({
      template: require('lib/templates/new_project'),
      className: 'new-project-view',
      events: {
        'submit form.new-project': 'submitForm',
        'click .btn.add-source': 'onAddSourceClick'
      },
      initialize: function(opt) {
        var css, file, url, _i, _j, _len, _len1, _ref2, _ref3, _ref4;
        this._initValidations();
        this.mode = opt.mode;
        this.client = opt.client || null;
        this.$el.html(this.template({
          mode: this.model ? 'edit' : 'create'
        }));
        this.locations = new URLInputList();
        this.locations.on('add', this.onLocationAdd, this);
        this.locations.on('remove', this.onLocationRemove, this);
        if (this.model) {
          this.$('#name').val(this.model.get('name'));
          this.$('#baseurl').val(this.model.get('baseurl'));
          _ref2 = this.model.get('files');
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            file = _ref2[_i];
            file.client = this.client;
            this.locations.add(file);
          }
        } else if (this.client) {
          this.$('#name').val(this.client.get('name'));
          url = this.client.get('url');
          url = url.split('/');
          url[url.length - 1] = '';
          this.$('#baseurl').val(url.join('/'));
          _ref3 = combineURLRoots(this.client.get('css'));
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            url = _ref3[_j];
            this.locations.add({
              url: url,
              client: this.client
            });
          }
        }
        this.$('#name').on('change', (function(_this) {
          return function() {
            return _this.validate('name');
          };
        })(this));
        this.$('#baseurl').on('change', (function(_this) {
          return function() {
            return _this.validate('baseurl');
          };
        })(this));
        if (this.client) {
          css = this.client.get('css');
          return this.$('.sources .hint').html(css.length ? ("There were " + css.length + " stylesheets found on your page ") + (this.locations.size() > 1 ? "that appear to come from " + this.locations.length + " different locations. Please continue by specifying source directories for these locations from your hard drive. If you only need to change files in some of the locations then you can leave the others blank." : "that all appear to come from the same location. Please continue by specifying a source directory for this location.") : "We didn't find any external stylesheets from the page " + ((_ref4 = this.client) != null ? _ref4.get('url') : void 0) + ". Styler can only modify styles in external stylesheets. Please move your styles to external stylesheets and try again. You can also add source locations manually by clicking 'Add source location' button.");
        }
      },
      _checkProjectNameEmpty: function() {
        return !this.$('#name').val().length;
      },
      _checkBaseURLEmpty: function() {
        return !this.$('#baseurl').val().length;
      },
      _checkBaseURLFormat: function() {
        return !this.$('#baseurl').val().match(/^\w+:\/\/\/?.+$/);
      },
      _checkBaseURLUsed: function() {
        var project, url;
        url = this.$('#baseurl').val();
        project = app.Projects.find((function(_this) {
          return function(project) {
            var baseURL;
            baseURL = project.get('baseurl');
            return (baseURL.indexOf(url) === 0 || url.indexOf(baseURL) === 0) && (!_this.model || project.id !== _this.model.id);
          };
        })(this));
        if (project) {
          return {
            projectname: project.get('name')
          };
        } else {
          return false;
        }
      },
      _checkBaseURLPresent: function() {
        var pageurl, url;
        if (!this.client) {
          return false;
        }
        url = this.$('#baseurl').val();
        pageurl = this.client.get('url');
        if (pageurl.indexOf(url) === 0) {
          return false;
        } else {
          return {
            pageurl: pageurl
          };
        }
      },
      _checkSourceListEmpty: function() {
        return !this.locations.find(function(l) {
          return l.get('path').length && l.get('url').length;
        });
      },
      _checkSourceListErrors: function(cb) {
        return !!this.locations.find(function(location) {
          var _ref2, _ref3;
          return ((_ref2 = location.view.status) === 'url_format' || _ref2 === 'url_empty' || _ref2 === 'path_error') || (location.view.status === 'ok' && location.get('type') === 'stylus' && !((_ref3 = location.view.scan) != null ? _ref3.stylusoutExists : void 0));
        });
      },
      _initValidations: function() {
        return this.validations = {
          name: [
            {
              type: 'error',
              msg: 'Project name should not be empty.',
              summary: 'Project name should not be empty.',
              exec: this._checkProjectNameEmpty
            }
          ],
          baseurl: [
            {
              type: 'error',
              msg: 'Base URL should not be empty.',
              summary: 'Base URL should not be empty.',
              exec: this._checkBaseURLEmpty
            }, {
              type: 'error',
              msg: 'Base URL has wrong format or is too general.',
              summary: 'Base URL is in wrong format.',
              exec: this._checkBaseURLFormat
            }, {
              type: 'error',
              msg: 'This URL matches the base URL for project "{projectname}" and can\'t be used. If you need to use this URL you have to first delete project "{projectname}".',
              summary: 'Base URL is already used.',
              exec: this._checkBaseURLUsed
            }, {
              type: 'warning',
              msg: 'This URL does not match the currently active page URL ({pageurl}). You will not be abled to use this project to modify stylesheets on that page.',
              exec: this._checkBaseURLPresent
            }
          ],
          sourcelist: [
            {
              type: 'error',
              summary: 'You have to fill in at least one source location.',
              exec: this._checkSourceListEmpty
            }, {
              type: 'error',
              summary: 'Source locations configuration contains critical errors.',
              exec: this._checkSourceListErrors
            }
          ]
        };
      },
      validate: function(fieldname) {
        var check, checks, err, field, hasError, noError, _i, _j, _len, _len1, _ref2;
        if (fieldname == null) {
          fieldname = null;
        }
        hasError = false;
        _ref2 = ['name', 'baseurl', 'sourcelist'];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          field = _ref2[_i];
          if (fieldname && field !== fieldname) {
            continue;
          }
          checks = this.validations[field];
          noError = true;
          for (_j = 0, _len1 = checks.length; _j < _len1; _j++) {
            check = checks[_j];
            err = check.exec.call(this);
            if (err) {
              noError = false;
              if (check.type === 'error') {
                hasError = true;
              }
              this.showError(field, check, err);
              break;
            }
          }
          if (noError) {
            this.showError(field, null);
          }
        }
        return hasError;
      },
      showError: function(field, validation, result) {
        var errorline, errors, errorsSummaryEl, itemEl, k, message, noteEl, summaryMessage, v;
        errorsSummaryEl = this.$('.errors-summary');
        errors = errorsSummaryEl.find('.errors');
        errorline = errors.find(".error." + field);
        if (errorline.size() && (!validation || validation.type === 'warning')) {
          errorline.remove();
        } else if (validation && validation.type === 'error') {
          if (!errorline.size()) {
            errors.append(errorline = node('div', {
              "class": "error " + field
            }));
            errorline = $(errorline);
          }
          summaryMessage = validation.summary;
          for (k in result) {
            v = result[k];
            summaryMessage = summaryMessage.replace(new RegExp("{" + k + "}", 'g'), v);
          }
          errorline.html(summaryMessage);
        }
        errorsSummaryEl.toggleClass('visible', errors.children().length);
        itemEl = this.$(".input-row." + field);
        if (!itemEl.size()) {
          return;
        }
        noteEl = itemEl.find('.note');
        itemEl.removeClass('has-error');
        itemEl.removeClass('has-warning');
        if (validation) {
          message = validation.msg;
          for (k in result) {
            v = result[k];
            message = message.replace(new RegExp("{" + k + "}", 'g'), v);
          }
          noteEl.html(message);
          if (validation.type === 'error') {
            return itemEl.addClass('has-error');
          } else {
            return itemEl.addClass('has-warning');
          }
        }
      },
      onAddSourceClick: function() {
        this.locations.add({
          client: this.client,
          url: 'http://',
          novalidate: true
        });
        return this.locations.last().view.$('input.url').get(0).focus();
      },
      onLocationAdd: function(location) {
        var view;
        view = new URLInputView({
          model: location
        });
        view.on('validate', (function(_this) {
          return function() {
            return _this.validate('sourcelist');
          };
        })(this));
        location.view = view;
        return this.$('.sources-list').append(view.el);
      },
      onLocationRemove: function(location) {
        return this.validate('sourcelist');
      },
      submitForm: function(e) {
        var baseurl, data, locations, name;
        e.preventDefault();
        if (this.validate()) {
          return;
        }
        name = this.$('#name').val();
        baseurl = this.$('#baseurl').val();
        locations = this.locations.map(function(l) {
          var json;
          json = l.toJSON();
          delete json.client;
          return json;
        });
        locations = _.filter(locations, function(l) {
          return l.path.length;
        });
        data = {
          name: name,
          baseurl: baseurl,
          files: locations
        };
        if (this.model) {
          return this.model.save(data, {
            wait: true,
            success: function() {
              return app.router.navigate('', {
                trigger: true
              });
            }
          });
        } else {
          return app.Projects.create(data, {
            wait: true,
            success: (function(_this) {
              return function(project) {
                return _this.client.save({
                  project: project.id
                }, {
                  success: function(client) {
                    return app.app.openConsole(client.get('session_id'));
                  }
                });
              };
            })(this)
          });
        }
      }
    });
    return module.exports = NewProjectView;
  });

}).call(this);
