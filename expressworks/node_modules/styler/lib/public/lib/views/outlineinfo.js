// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define(function(require, exports, module) {
    var OutlineInfo, highlightSelector, makeToggleFocusable, node, _ref;
    _ref = require("lib/utils"), highlightSelector = _ref.highlightSelector, makeToggleFocusable = _ref.makeToggleFocusable, node = _ref.node;
    require('vendor/link!css/outline_info.css');
    OutlineInfo = Backbone.View.extend({
      template: require('lib/templates/outline_info'),
      events: {
        'click .pseudo-selector .option': 'pseudoOptionSelect',
        'click .parent-selector .option': 'parentOptionSelect',
        'click .media-selector .option': 'mediaOptionSelect',
        'click .pseudo-indicator': 'onPseudoClick'
      },
      initialize: function() {
        this.console = app.console;
        this.console.on('load:selector', this.onSelectorLoaded, this);
        this.console.on('load:styles', this.onStylesLoaded, this);
        this.console.on('change:pseudo', this.onPseudoChange, this);
        this.console.on('change:media', this.onMediaChange, this);
        this.console.on('change:focusedselector', this.onFocusSelector, this);
        this.console.on('unload:client', this.onUnloadClient, this);
        this.$el.html(this.template());
        makeToggleFocusable(this.$('.pseudo-selector')[0]);
        makeToggleFocusable(this.$('.parent-selector')[0]);
        makeToggleFocusable(this.$('.media-selector')[0]);
        return this.$el.addClass('is-empty');
      },
      mediaOptionSelect: function(e) {
        var dataClass;
        dataClass = e.currentTarget.getAttribute('data-class');
        if (!dataClass) {
          return;
        }
        return this.console.setMedia(dataClass);
      },
      onMediaChange: function(e) {
        return this.renderMedia();
      },
      renderMedia: function() {
        var el, klass, media, selected, _i, _len, _ref1, _results;
        media = this.console.getMedia();
        el = this.$('.media-selector');
        _ref1 = ['screen', 'print', 'tv'];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          klass = _ref1[_i];
          selected = klass === media;
          el.toggleClass(klass, selected);
          _results.push(el.find('.option.' + klass).toggleClass('is-selected', selected));
        }
        return _results;
      },
      parentOptionSelect: function(e) {
        var index;
        index = $('.parent-selector .option').indexOf(e.currentTarget);
        return this.console.selectParentAtIndex(index + 1);
      },
      onPseudoChange: function(pseudo) {
        if (!(!pseudo || pseudo.elementId === this.console.outline.selectedId())) {
          return;
        }
        return this.renderPseudos();
      },
      pseudoOptionSelect: function(e) {
        var dataClass;
        dataClass = e.currentTarget.getAttribute('data-class');
        if (!dataClass) {
          return;
        }
        return this.console.setPseudoValue(this.console.outline.selectedId(), dataClass);
      },
      onPseudoClick: function(e) {
        var dataClass;
        dataClass = e.currentTarget.getAttribute('data-class');
        if (!dataClass) {
          return;
        }
        return this.console.setPseudoValue(this.console.outline.selectedId(), dataClass, false);
      },
      onUnloadClient: function() {
        return this.$el.addClass('is-empty');
      },
      onSelectorLoaded: function(id, selector) {
        var parentSelectorEl, selectorEl, selectorParts;
        this.$el.toggleClass('is-empty', id === -1);
        selectorEl = this.$('.selector');
        selectorParts = selector.selector.split(" ");
        selectorEl.empty().append(highlightSelector(_.last(selectorParts)));
        parentSelectorEl = this.$('.parent-selector > .options');
        parentSelectorEl.empty();
        _.chain(selectorParts.reverse()).tail().each(function(part) {
          return parentSelectorEl.append(node('div', {
            "class": 'option'
          }, part));
        });
        this.$('.parent-selector').toggle(selectorParts.length > 1);
        return this.renderPseudos();
      },
      renderPseudos: function() {
        var classes, id, klass, pseudo, selected, _i, _len, _ref1, _results;
        id = this.console.outline.selectedId();
        pseudo = this.console.pseudos.find(function(p) {
          return p.elementId === id;
        });
        if (pseudo) {
          classes = pseudo.get('pseudos');
          _ref1 = ['hover', 'focus', 'active', 'visited'];
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            klass = _ref1[_i];
            selected = __indexOf.call(classes, klass) >= 0;
            this.$('.pseudo-indicator.' + klass).toggleClass('is-selected', selected);
            _results.push(this.$('.option.' + klass).toggleClass('is-selected', selected));
          }
          return _results;
        } else {
          this.$('.pseudo-indicator').removeClass('is-selected');
          return this.$('.pseudo-selector > .option').removeClass('is-selected');
        }
      },
      onStylesLoaded: function(id, rules) {
        if (id !== this.console.outline.selectedId()) {
          return;
        }
        this.rules = rules;
        return this.renderRuleInfo();
      },
      onFocusSelector: function() {
        return this.renderRuleInfo();
      },
      renderRuleInfo: function() {
        var hasRuleInfo, numRules, ruleinfoEl, selectedFocused, selectedId, selectorParts, _ref1;
        selectedId = this.console.outline.selectedId();
        numRules = (_ref1 = this.rules) != null ? _ref1.length : void 0;
        hasRuleInfo = numRules && this.console.focusedSelectorElements;
        this.$el.toggleClass('has-ruleinfo', hasRuleInfo);
        ruleinfoEl = this.$('.element-rules > .inner');
        if (hasRuleInfo) {
          selectedFocused = this.console.focusedSelectorElements.indexOf(selectedId);
          if (selectedFocused !== -1) {
            selectedFocused = -1;
            selectorParts = this.console.focusedSelector.split(',');
            _.each(this.rules, function(_arg, i) {
              var file, rule;
              file = _arg[0], rule = _arg[1];
              if (__indexOf.call(selectorParts, rule) >= 0) {
                return selectedFocused = i;
              }
            });
          }
          if (selectedFocused === -1) {
            ruleinfoEl.text("" + numRules + " rule" + (numRules > 1 ? 's' : ''));
            return this.console.styleInfo.focusSelector(null);
          } else {
            ruleinfoEl.text("" + (selectedFocused + 1) + " / " + numRules);
            return this.console.styleInfo.focusSelector(this.console.focusedSelector);
          }
        } else {
          return ruleinfoEl.text('');
        }
      }
    });
    return module.exports = OutlineInfo;
  });

}).call(this);
