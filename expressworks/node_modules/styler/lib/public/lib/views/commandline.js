// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var CommandLine, keys, listenKey, node, stopEvent;
    require('vendor/link!css/commandline.css');
    keys = require('ace/lib/keys');
    node = require('lib/utils').node;
    listenKey = require('lib/keyboard').listenKey;
    stopEvent = require('ace/lib/event').stopEvent;
    CommandLine = Backbone.View.extend({
      initialize: function() {
        _.bindAll(this, 'activate', 'close', 'onChange', 'onKeyUp', 'onKeyDown');
        this.active = false;
        this.value = '';
        listenKey(null, 'toggle-cli', {
          exec: (function(_this) {
            return function() {
              if (_this.active) {
                return _this.close();
              } else {
                return _this.activate();
              }
            };
          })(this)
        });
        this.$el.append([
          this.input = node('input', {
            type: 'text'
          }), this.options = node('div', {
            "class": 'options'
          })
        ]);
        return $(this.input).on('blur', (function(_this) {
          return function() {
            if (_this.active) {
              return _this.close();
            }
          };
        })(this));
      },
      activate: function() {
        this.$el.addClass('is-open');
        this.active = true;
        this.setItems([]);
        this.selectedValue = null;
        this.selectedIndex = -1;
        return $(this.input).focus().val('').on('keydown', this.onKeyDown).on('keyup', this.onKeyUp).on('change', this.onChange);
      },
      close: function() {
        this.$el.removeClass('is-open');
        this.active = false;
        return $(this.input).blur().val('').off('keyup', this.onKeyUp).off('keydown', this.onKeyDown).off('change', this.onChange);
      },
      setItems: function(items) {
        var fragment, i, item, _i, _j, _len, _len1, _ref;
        this.items = items;
        this.selectedIndex = -1;
        fragment = document.createDocumentFragment();
        for (i = _i = 0, _len = items.length; _i < _len; i = ++_i) {
          item = items[i];
          if (!items) {
            return;
          }
          item.el = item.file ? node('div', {
            "class": 'item'
          }, node('div', {
            "class": 'value'
          }, 'open file ', node('span', item.value)), node('div', {
            "class": 'hint'
          }, item.hint)) : item.selector ? node('div', {
            "class": 'item'
          }, node('div', {
            "class": 'value'
          }, 'open element ', node('span', item.value))) : void 0;
          item.index = i;
        }
        _ref = items.reverse();
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          item = _ref[_j];
          fragment.appendChild(item.el);
        }
        items.reverse();
        if (item = _.find(items, function(item) {
          return item.value === this.selectedValue;
        })) {
          this.selectIndex(item.index);
        } else {
          this.selectIndex(items.length ? 0 : -1);
        }
        return $(this.options).toggle(!!items.length).empty().append(fragment);
      },
      selectIndex: function(index) {
        if (index === this.selectedIndex || !this.items.length) {
          return;
        }
        if (this.selectedIndex !== -1) {
          $(this.items[this.selectedIndex].el).removeClass('selected');
        }
        this.selectedIndex = index;
        this.selectedValue = this.items[index].value;
        if (this.selectedIndex !== -1) {
          return $(this.items[this.selectedIndex].el).addClass('selected');
        }
      },
      onKeyDown: function(e) {
        var item, _ref;
        switch (keys[e.keyCode]) {
          case 'Down':
            if (this.selectedIndex > 0) {
              this.selectIndex(this.selectedIndex - 1);
            }
            stopEvent(e);
            break;
          case 'Up':
            if (this.selectedIndex < this.items.length - 1) {
              this.selectIndex(this.selectedIndex + 1);
            }
            stopEvent(e);
            break;
          case 'Return':
            if (this.active) {
              item = (_ref = this.items) != null ? _ref[this.selectedIndex] : void 0;
              if (item.file) {
                app.console.openFile(item.file.get('url'));
              }
              if (item.selector) {
                app.console.onFocusedSelectorChange(item.value, true);
              }
              this.close();
              return stopEvent(e);
            }
            break;
          case 'Esc':
            if (this.active) {
              this.input.blur();
            }
            return stopEvent(e);
        }
      },
      onKeyUp: function(e) {
        return this.onChange();
      },
      onChange: function() {
        if (this.value === this.input.value) {
          return;
        }
        this.value = this.input.value;
        if (!this.value.length) {
          return this.setItems([]);
        }
        return this.getCompletions(this.value, (function(_this) {
          return function(items) {
            return _this.setItems(items);
          };
        })(this));
      },
      searchFilesByName: function(value) {
        value = value.toLowerCase();
        return app.console.editor.filebrowser.collection.chain().filter(function(file) {
          return -1 !== file.get('name').toLowerCase().indexOf(value);
        }).sortBy(function(file) {
          return file.get('name').toLowerCase().indexOf(value);
        }).first(5).map(function(file) {
          return {
            value: file.get('name'),
            file: file,
            hint: file.get('url')
          };
        }).value();
      },
      getCompletions: function(value, cb) {
        var completions, lastPart, parentPart, selectorParts;
        completions = this.searchFilesByName(value);
        selectorParts = value.split(/\s+/);
        lastPart = selectorParts.slice(-1)[0];
        parentPart = selectorParts.slice(0, -1).join(' ');
        return app.console.callClient('findElementMatches', {
          selector: lastPart,
          parent: [parentPart],
          offset: lastPart.length,
          after: null
        }, function(response) {
          var _ref;
          if (response != null ? (_ref = response.results) != null ? _ref.length : void 0 : void 0) {
            _.each(response.results, function(selector) {
              return completions.push({
                value: (parentPart ? parentPart + ' ' : '') + selector,
                selector: 1
              });
            });
          }
          return cb(completions);
        });
      }
    });
    return module.exports = CommandLine;
  });

}).call(this);
