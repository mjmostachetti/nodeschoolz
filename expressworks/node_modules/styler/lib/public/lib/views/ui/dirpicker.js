// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var DirPicker, DirStack, node, style, _ref;
    require('vendor/link!css/dirpicker.css');
    _ref = require('lib/utils'), node = _ref.node, style = _ref.style;
    DirStack = Backbone.View.extend({
      className: 'stack',
      events: {
        'click .diritem': 'onSelect'
      },
      initialize: function(opt) {
        this.picker = opt.picker;
        this.path = opt.path;
        this.selectedItem = null;
        return this.picker.provider(this.picker.cleanPath(this.path), (function(_this) {
          return function(res) {
            var dir, dirs, drive, file, files, item, _i, _j, _k, _len, _len1, _len2, _ref1;
            if (res.drives) {
              _ref1 = res.drives;
              for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                drive = _ref1[_i];
                item = node('div', {
                  "class": 'item diritem driveitem',
                  'data-filename': drive
                }, drive);
                _this.el.appendChild(item);
              }
            }
            dirs = _.sortBy(res.dirs, function(dirname) {
              return dirname.toLowerCase();
            });
            for (_j = 0, _len1 = dirs.length; _j < _len1; _j++) {
              dir = dirs[_j];
              item = node('div', {
                "class": 'item diritem',
                'data-filename': dir
              }, dir);
              _this.el.appendChild(item);
            }
            files = _.sortBy(res.files, function(filename) {
              return filename.toLowerCase();
            });
            for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
              file = files[_k];
              item = node('div', {
                "class": 'item'
              }, file);
              $(item).addClass(/\.styl$/i.test(file) ? 'stylitem' : 'cssitem');
              _this.el.appendChild(item);
            }
            if (_this.selectedFile) {
              return _this.selectFile();
            }
          };
        })(this));
      },
      selectFile: function(filename) {
        var item;
        if (filename == null) {
          filename = this.selectedFile;
        }
        item = _.find(this.$('.item').get(), function(item) {
          return filename === item.getAttribute('data-filename');
        });
        this.selectedFile = filename;
        return this.selectItem(item);
      },
      selectItem: function(item) {
        if (this.selectedItem) {
          $(this.selectedItem).removeClass('selected');
        }
        this.selectedItem = item;
        return $(this.selectedItem).addClass('selected');
      },
      onSelect: function(e) {
        var item, path;
        item = e.currentTarget;
        path = this.path + item.getAttribute('data-filename');
        return this.picker.openPath(path);
      },
      remove: function() {
        return this.$el.remove();
      }
    });
    DirPicker = Backbone.View.extend({
      className: 'dirpicker',
      events: {
        'click .btn.cancel': 'cancel',
        'click .btn.select': 'select'
      },
      initialize: function(opt) {
        var path;
        this.provider = opt.provider;
        this.stacks = [];
        this.$el.append(node('div', {
          "class": 'stack-scroller-cont'
        }, this.scroller = node('div', {
          "class": 'stack-scroller'
        }, this.stackcont = node('div', {
          "class": 'stack-cont'
        }))));
        this.$el.append(node('div', {
          "class": 'buttons'
        }, node('div', {
          "class": 'btn cancel'
        }, 'Cancel'), node('div', {
          "class": 'btn select'
        }, 'Select')));
        path = opt.path || '/';
        if (path[0] !== '/') {
          path = '/' + path;
        }
        return this.openPath(path);
      },
      openPath: function(path) {
        var i, len, parts, stack, _i;
        parts = path.split('/');
        len = parts.length;
        if (parts[parts.length - 1] === '') {
          len--;
        }
        path = '';
        this.clearStacksFromIndex(len);
        for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
          path += parts[i] + '/';
          stack = this.stacks[i];
          if (stack) {
            if (stack.path !== path) {
              this.clearStacksFromIndex(i);
            } else {
              continue;
            }
          }
          stack = new DirStack({
            path: path,
            picker: this
          });
          this.stackcont.appendChild(stack.render().el);
          if (this.stacks.length) {
            this.stacks[this.stacks.length - 1].selectFile(parts[i]);
          }
          this.stacks.push(stack);
        }
        this.path = path;
        $(this.stackcont).css({
          width: this.stacks.length * 180
        });
        return _.delay((function(_this) {
          return function() {
            return _this.scroller.scrollLeft = 10e4;
          };
        })(this), 100);
      },
      clearStacksFromIndex: function(i) {
        var stack, _results;
        _results = [];
        while (this.stacks.length >= i) {
          stack = this.stacks[this.stacks.length - 1];
          stack.remove();
          _results.push(this.stacks.pop());
        }
        return _results;
      },
      close: function() {
        return this.trigger('close');
      },
      cancel: function() {
        return this.close();
      },
      cleanPath: function(path) {
        var parts;
        parts = path.split('/');
        if (parts[1].match(/^[a-z]\:$/i)) {
          parts.shift();
        }
        return parts.join('/');
      },
      select: function() {
        this.trigger('select', this.cleanPath(this.path));
        return this.close();
      }
    });
    return module.exports = DirPicker;
  });

}).call(this);
