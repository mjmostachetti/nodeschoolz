// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var InfoTip, node;
    node = require("lib/utils").node;
    require("vendor/link!css/infotip.css");
    InfoTip = Backbone.View.extend({
      className: "infotip",
      events: {
        'mousemove': 'onMouse',
        'mousedown': 'onMouse'
      },
      initialize: function() {
        _.bindAll(this, 'onTargetMouseMove', 'onTargetMouseOut', 'onMouse');
        this.count = 0;
        return this.hide();
      },
      onMouse: function(e) {
        if (this.visible) {
          return this.hide();
        }
      },
      onTargetMouseMove: function(e) {
        this.pos.x = event.pageX;
        this.pos.y = event.pageY;
        if (this.visible) {
          return this.renderPosition();
        }
      },
      onTargetMouseOut: function(e) {
        return this.hide();
      },
      renderPosition: function() {
        var left, rightEdge, top;
        left = this.pos.x - this.pos.width / 2;
        top = this.pos.y + 15;
        rightEdge = left + this.pos.width + 30 - window.innerWidth;
        if (rightEdge > 0) {
          left -= rightEdge;
        }
        if (top + this.pos.height + 30 > window.innerHeight) {
          top -= 30 + this.pos.height;
        }
        return this.$el.css({
          left: left,
          top: top
        });
      },
      showPanel: function(event, width, height, contents, target) {
        if (this.visible) {
          this.hide();
        }
        this.count++;
        this.target = target || event.target;
        this.pos = {
          x: event.pageX,
          y: event.pageY,
          width: width,
          height: height
        };
        $(this.target).on('mousemove', this.onTargetMouseMove);
        $(this.target).on('mouseout', this.onTargetMouseOut);
        this.visible = true;
        return _.bind((function(_this) {
          return function(count) {
            if (count !== _this.count) {
              return;
            }
            return contents(function(el) {
              if (!_this.visible) {
                return;
              }
              _this.$el.empty().append(el).css({
                width: width,
                height: height
              }).show();
              _this.renderPosition();
              return document.body.appendChild(_this.el);
            });
          };
        })(this), this, this.count)();
      },
      hide: function() {
        $(this.target).off('mousemove', this.onTargetMouseMove);
        $(this.target).off('mouseout', this.onTargetMouseOut);
        this.$el.hide().remove();
        return this.visible = false;
      }
    });
    return module.exports = new InfoTip;
  });

}).call(this);
