// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var Popup, keys, node;
    keys = require('ace/lib/keys');
    node = require('lib/utils').node;
    require('vendor/link!css/popup.css');
    Popup = Backbone.View.extend({
      className: 'overlay',
      events: {
        'click': 'dismissOnOverlay'
      },
      initialize: function(conf) {
        var btn, button, buttons, i, _i, _len, _ref;
        _.bindAll(this, 'onKeyDown');
        this.el.appendChild(node('div', {
          "class": 'popup'
        }, node('div', {
          "class": 'msg'
        }, conf.msg), buttons = node('div', {
          "class": 'buttons'
        })));
        _ref = conf.buttons;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          button = _ref[i];
          btn = node('div', {
            "class": 'button ' + button.id,
            tabIndex: i
          }, button.txt);
          $(btn).on('click', _.bind(function(button) {
            button.exec();
            return this.dismiss();
          }, this, button));
          buttons.appendChild(btn);
          if (button.highlight) {
            this.buttonIndex = i;
          }
        }
        document.addEventListener('keydown', this.onKeyDown, true);
        $(document.body).append(this.el);
        return _.delay((function(_this) {
          return function() {
            _this.$el.addClass('is-loaded');
            return _this.focusButton();
          };
        })(this), 30);
      },
      dismissOnOverlay: function(e) {
        if (e.target === this.el) {
          return this.dismiss();
        }
      },
      dismiss: function() {
        document.removeEventListener('keydown', this.onKeyDown, true);
        this.$el.removeClass('is-loaded');
        return _.delay((function(_this) {
          return function() {
            return _this.$el.remove();
          };
        })(this), 500);
      },
      focusButton: function(delta) {
        var numButtons;
        if (delta == null) {
          delta = 0;
        }
        if (this.buttonIndex == null) {
          return;
        }
        this.buttonIndex += delta;
        numButtons = this.$('.button').size();
        if (this.buttonIndex < 0) {
          this.buttonIndex = numButtons - 1;
        }
        if (this.buttonIndex >= numButtons) {
          this.buttonIndex = 0;
        }
        return this.$('.button').get(this.buttonIndex).focus();
      },
      selectButton: function(index) {
        var button;
        if (!(button = this.$('.button').get(index))) {
          return;
        }
        return typeof button.onclick === "function" ? button.onclick() : void 0;
      },
      onKeyDown: function(e) {
        switch (keys[e.keyCode]) {
          case 'Esc':
            this.dismiss();
            break;
          case 'Tab':
            this.focusButton(e.shiftKey ? -1 : 1);
            break;
          case 'Space':
          case 'Return':
            this.selectButton(this.buttonIndex);
            break;
          case 'Left':
            this.focusButton(-1);
            break;
          case 'Right':
            this.focusButton(1);
        }
        e.stopPropagation();
        return e.preventDefault();
      }
    });
    return module.exports = Popup;
  });

}).call(this);
