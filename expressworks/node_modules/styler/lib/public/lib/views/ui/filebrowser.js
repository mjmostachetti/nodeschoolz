// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var FileBrowser, FileItem, FileItemList, FileItemView, ITEM_HEIGHT, addKeyboardListener, formatFileSize, node, _ref;
    require('vendor/link!css/filebrowser.css');
    require('vendor/moment');
    _ref = require('lib/utils'), node = _ref.node, formatFileSize = _ref.formatFileSize;
    addKeyboardListener = require('lib/keyboard').addKeyboardListener;
    ITEM_HEIGHT = 70;
    FileItem = Backbone.Model.extend({
      defaults: function() {
        return {
          type: 'file',
          file: null,
          items: null,
          parent: null
        };
      },
      getName: function() {
        var name;
        return name = (this._pfx != null ? this._pfx + '/' : '') + this.get('path');
      },
      getPath: function() {
        var parent;
        if (parent = this.get('parent')) {
          return parent.getPath() + this.get('path');
        } else {
          return '';
        }
      },
      getDepth: function() {
        var parent;
        parent = this.get('parent');
        if (parent) {
          return parent.getDepth() + (this.empty ? 0 : 1);
        } else {
          return -1;
        }
      }
    });
    FileItemList = Backbone.Collection.extend({
      model: FileItem,
      comparator: function(p) {
        var _ref1, _ref2;
        return [p.get('type'), ((_ref1 = p.get('path')) != null ? _ref1[0] : void 0) === '#', p.get('path'), (_ref2 = p.get('file')) != null ? _ref2.get('name') : void 0];
      }
    });
    FileItemView = Backbone.View.extend({
      className: 'file-item',
      events: {
        'dblclick': 'openFile',
        'click .name': 'openFile',
        'click': 'onClick',
        'click .expand-bullet': 'toggleExpand'
      },
      initialize: function() {
        var collapsed, items, parsedName, path;
        this.model.view = this.el.view = this;
        this.renderDebounce = _.debounce(this.render, 61000);
        this.model.on('destroy', this.remove, this);
        this.model.on('change', this.render, this);
        app.Settings.on('change:activeonly', this.render, this);
        if (this.model.get('type') === 'file') {
          this.model.get('file').on('change', this.render, this);
          parsedName = this.model.get('file').get('name').match(/^(.+)(\.[^\.]+)$/);
          this.$el.addClass('is-file');
          this.$el.append([
            node('div', {
              "class": 'info'
            }, node('div', {
              "class": 'lastmod'
            }), node('div', {
              "class": 'size'
            }), node('div', {
              "class": 'active-indicator'
            }), node('div', {
              "class": 'open-indicator'
            }), node('div', {
              "class": 'name'
            }, parsedName[1], node('span', {
              "class": 'ext'
            }, parsedName[2])))
          ]);
        } else {
          this.$el.addClass('is-dir');
          this.$el.append([
            node('div', {
              "class": 'info'
            }, node('div', {
              "class": 'expand-bullet'
            }), node('div', {
              "class": 'name'
            }, this.model.get('path'))), this.itemsEl = node('div', {
              "class": 'items'
            })
          ]);
          items = this.model.get('items');
          items.on('add', this.onItemAdd, this);
          items.on('reset', this.onItemAddAll, this);
          collapsed = app.console.state.get('dirCollapsed');
          path = this.model.getPath();
          this.setExpanded(!collapsed[path]);
        }
        return app.console.on('change:client', this.render, this);
      },
      toggleExpand: function() {
        return this.setExpanded(this.expanded = !this.expanded);
      },
      setExpanded: function(bool) {
        var collapsed, path;
        this.expanded = bool;
        this.$el.toggleClass('is-expanded', bool);
        this.$el.toggleClass('is-collapsed', !bool);
        collapsed = app.console.state.get('dirCollapsed');
        path = this.model.getPath();
        if (bool) {
          delete collapsed[path];
        } else {
          collapsed[path] = true;
        }
        return app.console.state.save({
          dirCollapsed: _.clone(collapsed)
        });
      },
      onItemAdd: function(item) {
        var index, previous, previousView, view;
        view = (new FileItemView({
          model: item,
          parent: this.model
        })).render();
        view.on('select', (function(_this) {
          return function(item) {
            return _this.trigger('select', item);
          };
        })(this));
        index = this.model.get('items').indexOf(view.model);
        previous = this.model.get('items').at(index - 1);
        previousView = previous && previous.view;
        if (index === 0 || !previous || !previousView) {
          $(this.itemsEl).prepend(view.el);
        } else {
          $(previousView.el).after(view.el);
        }
        return this.render();
      },
      onItemAddAll: function(items) {
        $(this.itemsEl).empty();
        return this.model.get('items').each(this.onItemAdd, this);
      },
      openFile: function(e) {
        var _ref1;
        if (this.model.get('type') === 'dir' && this.model.get('parent')) {
          this.toggleExpand();
        } else {
          app.console.openFile((_ref1 = this.model.get('file')) != null ? _ref1.get('url') : void 0);
        }
        e.stopPropagation();
        return e.preventDefault();
      },
      onClick: function(e) {
        this.select();
        e.stopPropagation();
        return e.preventDefault();
      },
      destroy: function() {
        this.model.off('destroy', this.remove, this);
        this.model.off('change', this.render, this);
        return app.console.off('change:client', this.render, this);
      },
      select: function(bool) {
        if (bool == null) {
          bool = true;
        }
        this.$el.toggleClass('is-selected', bool);
        if (bool) {
          this.trigger('select', this.model);
        }
        return this.selected = bool;
      },
      render: function() {
        var clientId, depth, file, fromNow, isActive, isOpen, items, mtime, name, _ref1, _ref2;
        items = this.model.get('items');
        depth = this.model.getDepth();
        if (depth !== this.lastDepth) {
          this.$('.info').css({
            paddingLeft: depth * 20
          });
          this.lastDepth = depth;
        }
        if (file = this.model.get('file')) {
          mtime = moment(file.get('mtime'));
          fromNow = new Date() - mtime;
          this.$('.lastmod').text(fromNow >= 36e5 * 24 * 3 ? moment(mtime).format('D/M/YYYY') : (this.renderDebounce(), moment(mtime).fromNow()));
          this.$('.size').text(formatFileSize(file.get('fsize')));
          clientId = (_ref1 = app.console) != null ? (_ref2 = _ref1.client) != null ? _ref2.id : void 0 : void 0;
          isActive = clientId && (file.get('clients').indexOf(clientId)) !== -1;
          this.$('.active-indicator').toggle(isActive);
          isOpen = !!file.get('edit');
          this.$('.open-indicator').toggle(isOpen);
          this.$el.toggle(!app.Settings.get('activeonly') || isActive || isOpen);
        }
        if (!items) {
          return this;
        }
        if (this.model.get('type') === 'dir' && items.size() === 1 && items.at(0).get('type') === 'dir') {
          this.model.empty = items.at(0);
          this.model.empty._pfx = this.model.getName();
          this.model.empty.view.render();
          this.$el.addClass('is-empty');
        } else if (this.model.empty) {
          this.model.empty._pfx = null;
          this.model.empty.view.render();
          this.model.empty = null;
          this.$el.removeClass('is-empty');
        }
        name = this.model.getName();
        if (name === '#local/nib') {
          name = 'Nib extensions library';
        }
        if (name === '#local') {
          name = 'Local imports';
        }
        $(this.$('.name')[0]).text(name);
        return this;
      }
    });
    FileBrowser = Backbone.View.extend({
      initialize: function() {
        var rootView;
        _.bindAll(this, 'onSelect', 'onKeyDown');
        this.subviews = [];
        this.collection.on('add', this.onAddFile, this);
        this.collection.on('reset', this.onAddAllFiles, this);
        addKeyboardListener('filebrowser', this.el);
        this.el.listenKey('file-prev', {
          mac: 'down',
          exec: (function(_this) {
            return function() {
              return _this.moveSelection(1);
            };
          })(this)
        });
        this.el.listenKey('file-next', {
          mac: 'up',
          exec: (function(_this) {
            return function() {
              return _this.moveSelection(-1);
            };
          })(this)
        });
        this.el.listenKey('file-first', {
          mac: 'home',
          exec: (function(_this) {
            return function() {
              return _this.collection.first().view.select();
            };
          })(this)
        });
        this.el.listenKey('file-last', {
          mac: 'end',
          exec: (function(_this) {
            return function() {
              return _this.collection.last().view.select();
            };
          })(this)
        });
        this.el.listenKey('select-file', {
          mac: 'return',
          exec: (function(_this) {
            return function() {
              var _ref1, _ref2;
              return (_ref1 = _this.selectedFile) != null ? (_ref2 = _ref1.view) != null ? _ref2.openFile() : void 0 : void 0;
            };
          })(this)
        });
        this.root = new FileItem({
          type: 'dir',
          path: '',
          items: new FileItemList
        });
        rootView = new FileItemView({
          model: this.root
        });
        rootView.on('select', this.onSelect);
        this.$el.append(rootView.render().el);
        this.$el.on('keydown', this.onKeyDown);
        return this.search = '';
      },
      destroy: function() {
        this.collection.off('add', this.addOne, this);
        return this.collection.off('reset', this.addAll, this);
      },
      onKeyDown: function(e) {
        var char, curTime, file, filter, search, _ref1;
        char = String.fromCharCode(e.keyCode);
        if (!(char.length && /[\w-\.]/.test(char))) {
          return this.search = '';
        }
        curTime = new Date();
        if (curTime - this.lastCharTime > 700) {
          this.search = '';
        }
        this.search += char.toLowerCase();
        this.lastCharTime = curTime;
        search = this.search;
        file = null;
        filter = function(item) {
          if (file) {
            return;
          }
          if (item.get('type') === 'dir') {
            return item.get('items').each(function(i) {
              return filter(i);
            });
          } else if (-1 !== item.get('file').get('name').toLowerCase().indexOf(search)) {
            return file = item;
          }
        };
        filter(this.root);
        return file != null ? (_ref1 = file.view) != null ? _ref1.select() : void 0 : void 0;
      },
      moveSelection: function(delta) {
        var index, items, selectedFile;
        selectedFile = this.selectedFile;
        items = this.$('.is-expanded > .items > .file-item');
        items = _.filter(items, function(item) {
          return !$(item).hasClass('is-empty');
        });
        index = items.indexOf((selectedFile != null ? selectedFile.view.el : void 0) || items[0]);
        index += delta;
        if (index < 0) {
          index = 0;
        }
        if (index >= items.length) {
          index = items.length - 1;
        }
        items[index].view.select();
        return event.preventDefault();
      },
      getParent: function(item, path) {
        var found, items, newitem;
        if (!path.length || path.length === 1 && path[0] === item.get('path')) {
          return item;
        }
        items = item.get('items');
        found = false;
        items.each((function(_this) {
          return function(subitem) {
            if (subitem.get('type') === 'dir' && subitem.get('path') === path[0]) {
              return found = _this.getParent(subitem, path.slice(1));
            }
          };
        })(this));
        if (found) {
          return found;
        }
        newitem = new FileItem({
          parent: item,
          path: path[0],
          type: 'dir',
          items: new FileItemList
        });
        items.add(newitem);
        return this.getParent(newitem, path.slice(1));
      },
      onAddFile: function(file) {
        var fileitem, parent, path;
        path = file.get('url').replace(/\/[^\/]*$/, '');
        parent = this.getParent(this.root, path.split('/'));
        fileitem = new FileItem({
          type: 'file',
          file: file,
          parent: parent
        });
        return parent.get('items').add(fileitem);
      },
      onAddAllFiles: function() {
        return this.collection.each(this.onAddFile, this);
      },
      onSelect: function(file) {
        var selectedFile, _base;
        selectedFile = this.selectedFile;
        this.selectedFile = file;
        if (!selectedFile || selectedFile === file) {
          return;
        }
        selectedFile.view.select(false);
        return typeof (_base = file.view.el).scrollIntoViewIfNeeded === "function" ? _base.scrollIntoViewIfNeeded() : void 0;
      }
    });
    return module.exports = FileBrowser;
  });

}).call(this);
