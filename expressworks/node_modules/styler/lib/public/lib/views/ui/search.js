// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var Search, addKeyboardListener, formatKeyCommand, listenKey, node, ua, _ref;
    ua = require('ace/lib/useragent');
    node = require('lib/utils').node;
    _ref = require('lib/keyboard'), addKeyboardListener = _ref.addKeyboardListener, formatKeyCommand = _ref.formatKeyCommand, listenKey = _ref.listenKey;
    Search = Backbone.View.extend({
      initialize: function(opt) {
        var key;
        _.bindAll(this, 'onBlur', 'onKeyUp', 'toggleSearch');
        this.editor = opt.editor;
        this.input = node('input', {
          "class": 'keyword'
        });
        $(this.input).on('blur', this.onBlur).on('keyup', this.onKeyUp);
        addKeyboardListener('search', this.input);
        listenKey(null, 'search-in-file', {
          exec: this.toggleSearch
        });
        listenKey(null, 'search-next-result', {
          exec: (function(_this) {
            return function() {
              return _this.moveRange(false);
            };
          })(this)
        });
        listenKey(null, 'search-previous-result', {
          exec: (function(_this) {
            return function() {
              return _this.moveRange(true);
            };
          })(this)
        });
        this.input.listenKey('disable', {
          mac: 'esc|return',
          exec: (function(_this) {
            return function() {
              return _this.disable();
            };
          })(this)
        });
        key = app.Settings.get('keyboard_shortcuts')['search-next-result'];
        key = ua.isMac ? key.mac : key.win;
        this.$el.append(this.input);
        return this.$el.append(node('div', {
          "class": 'results'
        }, node('div', {
          "class": 'msg'
        }), node('div', {
          "class": 'hint'
        }, formatKeyCommand(key) + ' for next')));
      },
      toggleSearch: function() {
        if (this.active) {
          return this.disable();
        } else {
          return this.activate();
        }
      },
      moveRange: function(moveup) {
        var _ref1;
        if (moveup == null) {
          moveup = false;
        }
        if ((_ref1 = this.ranges) != null ? _ref1.length : void 0) {
          if (moveup) {
            this.selectedRange -= 1;
          } else {
            this.selectedRange += 1;
          }
          if (this.selectedRange < 0) {
            this.selectedRange = this.ranges.length - 1;
          }
          if (this.selectedRange >= this.ranges.length) {
            this.selectedRange = 0;
          }
          this.editor.editor.selection.setSelectionRange(this.ranges[this.selectedRange]);
          this.$('.results .msg').html("Showing <span>" + (this.selectedRange + 1) + "</span> of <span>" + this.ranges.length + "</span>");
        } else {
          this.$('.results .msg').html('No results found');
        }
        return this.$('.results').show();
      },
      onKeyUp: function() {
        if (this.input.value !== this.value) {
          this.value = this.input.value;
          this.editor.editor.$search.set({
            needle: this.value
          });
          this.ranges = this.editor.editor.$search.findAll(this.editor.editor.session);
          this.selectedRange = -1;
          return this.moveRange();
        }
      },
      onBlur: function() {
        return this.disable();
      },
      activate: function() {
        this.$el.show();
        return $(this.input).focus()[0].select();
      },
      disable: function() {
        this.$el.hide();
        this.$('.results').hide();
        return this.editor.editor.focus();
      }
    });
    return module.exports = Search;
  });

}).call(this);
