// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var EditorView, FileBrowser, FileList, ModeSwitch, Tab, TabList, TabListView, TabSwitch, ace, addKeyboardListener, config, listenKey, node, parallel, ua, _ref, _ref1, _ref2;
    ace = require('ace/ace');
    config = require('ace/config');
    ua = require('ace/lib/useragent');
    _ref = require('lib/keyboard'), listenKey = _ref.listenKey, addKeyboardListener = _ref.addKeyboardListener;
    FileBrowser = require('lib/views/ui/filebrowser');
    FileList = require('lib/models').FileList;
    ModeSwitch = require('lib/views/ui/modeswitch');
    _ref1 = require('lib/editor/tabs'), TabList = _ref1.TabList, Tab = _ref1.Tab;
    TabListView = require('lib/editor/tabviews').TabListView;
    TabSwitch = require('lib/views/ui/tabswitch');
    _ref2 = require('lib/utils'), parallel = _ref2.parallel, node = _ref2.node;
    require('vendor/link!css/editorview.css');
    config.set('packaged', !!window.__packaged);
    EditorView = Backbone.View.extend({
      template: require('lib/templates/editor'),
      initialize: function() {
        var files, project;
        _.bindAll(this, 'openFileView', 'save');
        this.$el.html(this.template());
        this.$('.file-filter input').on('change', function(el) {
          return app.Settings.save({
            activeonly: el.currentTarget.checked
          });
        });
        if (app.Settings.get('activeonly')) {
          this.$('.file-filter input').attr({
            checked: true
          });
        }
        this.tabs = new TabList;
        this.tabs.on('empty', this.openFileView, this);
        new TabListView({
          collection: this.tabs,
          el: this.$('.tabs')[0]
        });
        this.initializeEditor();
        this.$('.tool-file-list').on('click', this.openFileView);
        this.$('.tool-save').on('click', (function(_this) {
          return function() {
            return _this.save();
          };
        })(this));
        this.$('.statusbar').append([new TabSwitch().el, new ModeSwitch().el]);
        project = app.console.project;
        project.on('change:tabSize', this.renderTabSize, this);
        project.on('change:softTabs', this.renderTabSize, this);
        app.Settings.on('change:save_icon', this.renderSaveIcon, this);
        app.Settings.on('change:statusbar', this.renderStatusbar, this);
        this.renderSaveIcon();
        this.renderStatusbar();
        files = new FileList(null, {
          backend: 'files-' + app.console.project.id
        });
        this.filebrowser = new FileBrowser({
          el: this.$('.filebrowser')[0],
          collection: files
        });
        return files.fetch({
          success: (function(_this) {
            return function() {
              var hasSelectedTab, selectedUrl, _ref3, _ref4;
              selectedUrl = (_ref3 = app.console) != null ? (_ref4 = _ref3.state) != null ? _ref4.get('selectedUrl') : void 0 : void 0;
              hasSelectedTab = false;
              files.chain().filter(function(file) {
                return file.get('edit');
              }).sortBy(function(file) {
                return file.get('offset');
              }).each(function(file) {
                var isSelected, url;
                url = file.get('url');
                isSelected = selectedUrl === url;
                _this.openFile(url, null, null, null, isSelected);
                if (isSelected) {
                  return hasSelectedTab = true;
                }
              });
              if (!hasSelectedTab) {
                return _this.openFileView();
              }
            };
          })(this)
        });
      },
      initializeEditor: function() {
        var i, _i;
        this.editor = ace.edit(this.$('.editor')[0]);
        addKeyboardListener('editor', this.editor.commands);
        for (i = _i = 1; _i <= 9; i = ++_i) {
          listenKey(null, "tab-" + i, {
            mac: "command-" + i,
            win: "ctrl-" + i,
            exec: _.bind(function(i) {
              if (this.tabs.length > i - 1) {
                return this.tabs.at(i - 1).select();
              }
            }, this, i)
          });
        }
        listenKey(null, 'select-filebrowser', {
          exec: _.bind(this.openFileView, this)
        });
        listenKey(null, 'save-tab', {
          exec: (function(_this) {
            return function() {
              return _this.save();
            };
          })(this)
        });
        listenKey(null, 'save-all', {
          exec: _.bind(this.saveAll, this)
        });
        listenKey(null, 'close-tab', {
          exec: (function(_this) {
            return function() {
              return _this.closeTab();
            };
          })(this)
        });
        listenKey(null, 'close-tab-native', {
          mac: 'Command-W',
          win: 'Ctrl-W',
          exec: (function(_this) {
            return function() {
              if (ua.isGecko || ua.isWebKit && !ua.isChrome) {
                return _this.closeTab();
              }
            };
          })(this)
        });
        listenKey('editor', 'focus-selector-up', {
          exec: _.bind(this.moveSelectorUp, this)
        });
        listenKey('editor', 'focus-selector-down', {
          exec: _.bind(this.moveSelectorDown, this)
        });
        listenKey('editor', 'indent-selection', {
          exec: _.bind(this.editor.indent, this.editor)
        });
        listenKey('editor', 'outdent-selection', {
          exec: _.bind(this.editor.blockOutdent, this.editor)
        });
        listenKey('editor', 'edit-value', {
          exec: (function(_this) {
            return function() {
              var _ref3;
              return (_ref3 = _this.tabs.selectedTab()) != null ? _ref3.selectValueArea() : void 0;
            };
          })(this)
        });
        listenKey('editor', 'new-property', {
          exec: (function(_this) {
            return function() {
              var _ref3;
              return (_ref3 = _this.tabs.selectedTab()) != null ? _ref3.selectNewValuePosition() : void 0;
            };
          })(this)
        });
        listenKey('editor', 'show-completions', {
          exec: (function(_this) {
            return function() {
              var _ref3;
              return (_ref3 = _this.tabs.selectedTab()) != null ? _ref3.tryCompletion(true) : void 0;
            };
          })(this)
        });
        this.editor.commands.removeCommand('find');
        this.editor.commands.removeCommand('findnext');
        this.editor.commands.removeCommand('findprevious');
        this.editor.commands.removeCommand('togglerecording');
        this.editor.commands.removeCommand('replaymacro');
        app.Settings.on('change:invisibles', this.renderInvisbles, this);
        app.Settings.on('change:line_numbers', this.renderLineNumbers, this);
        app.Settings.on('change:theme', this.renderTheme, this);
        this.renderInvisbles();
        this.renderTheme();
        this.renderLineNumbers();
        this.editor.renderer.setShowPrintMargin(false);
        this.editor.renderer.setHScrollBarAlwaysVisible(false);
        return _.delay((function(_this) {
          return function() {
            return require(['lib/views/ui/completer', 'lib/editor/mousecommands', 'lib/views/ui/search'], function(Completer, MouseCommands, Search) {
              _this.completer = new Completer;
              _this.editor.container.appendChild(_this.completer.el);
              _this.commands = new MouseCommands({
                editor: _this.editor
              });
              _this.editor.container.appendChild(_this.commands.el);
              return new Search({
                el: _this.$('.search')[0],
                editor: _this
              });
            });
          };
        })(this), 200);
      },
      renderSaveIcon: function() {
        return this.$('.icon.save').toggle(!!app.Settings.get('save_icon'));
      },
      renderStatusbar: function() {
        return this.$('.statusbar').toggle(!!app.Settings.get('statusbar'));
      },
      renderLineNumbers: function() {
        return this.editor.renderer.setShowGutter(!!app.Settings.get('line_numbers'));
      },
      renderInvisbles: function() {
        return this.editor.renderer.setShowInvisibles(!!app.Settings.get('invisibles'));
      },
      renderTheme: function() {
        return this.editor.setTheme('ace/theme/' + app.Settings.get('theme'));
      },
      renderTabSize: function() {
        var project;
        project = app.console.project;
        return this.tabs.each(function(tab) {
          tab.session.setUseSoftTabs(project.get('softTabs'));
          return tab.session.setTabSize(project.get('tabSize'));
        });
      },
      openFileView: function() {
        var selectedTab;
        this.$('.tool-file-list').addClass('is-selected');
        this.$('.tool-save').addClass('is-disabled');
        if (selectedTab = this.tabs.selectedTab()) {
          selectedTab.set({
            selected: false
          });
        }
        if (app.console != null) {
          app.console.state.save({
            selectedUrl: ''
          });
          app.console.$el.removeClass('is-editormode');
        }
        if (this.filebrowser) {
          this.filebrowser.el.focus();
        }
        this.trigger('change:focusedselector', null);
        return app.isEditorMode = false;
      },
      focus: function() {
        if (this.tabs.selectedTab()) {
          return this.editor.focus();
        } else {
          return this.filebrowser.el.focus();
        }
      },
      openEditorView: function() {
        var _ref3, _ref4;
        if ((_ref3 = this.editor) != null) {
          _ref3.resize();
        }
        if ((_ref4 = app.console) != null) {
          _ref4.$el.addClass('is-editormode');
        }
        this.$('.tool-file-list').removeClass('selected');
        return app.isEditorMode = true;
      },
      getUnsavedTabs: function(tabIndex) {
        if (tabIndex == null) {
          tabIndex = null;
        }
        return this.tabs.select(function(tab, i) {
          return (tabIndex === null || tabIndex === i) && !tab.get('saved');
        });
      },
      highlight: function(selectors) {
        this.highlightRules = _.groupBy(selectors, function(_arg) {
          var selector, url;
          url = _arg[0], selector = _arg[1];
          return url;
        });
        return this.tabs.each((function(_this) {
          return function(tab) {
            var url;
            url = tab.get('url');
            return tab.highlightSelectors(_this.highlightRules[url] ? _this.highlightRules[url] : []);
          };
        })(this));
      },
      moveSelectorUp: function() {
        var _ref3;
        return (_ref3 = this.tabs.selectedTab()) != null ? _ref3.moveSelector(-1) : void 0;
      },
      moveSelectorDown: function() {
        var _ref3;
        return (_ref3 = this.tabs.selectedTab()) != null ? _ref3.moveSelector(1) : void 0;
      },
      onResize: function() {
        return this.editor.renderer.onResize(true);
      },
      save: function(tab, callback) {
        if (tab == null) {
          tab = null;
        }
        if (callback == null) {
          callback = null;
        }
        if (tab == null) {
          tab = this.tabs.selectedTab();
        }
        if (!(tab != null ? tab.session : void 0)) {
          return;
        }
        if (tab.get('saved')) {
          return typeof callback === "function" ? callback() : void 0;
        }
        tab._rememberedSelfSave = true;
        return app.console.callAPI('SetFileData', {
          url: tab.get('url'),
          data: tab.session.getValue()
        }, function(err) {
          if (err) {
            if (err.code === 'EPERM') {
              return alert("Permission denied for saving changes to file '" + err.path + "'. Please make sure this file can be changed by the system user that is running Styler.");
            } else {
              return alert("Could not save file to '" + err.path + "'. Error " + err.code + "(" + err.errno + ").");
            }
          } else {
            tab.set({
              saved: true
            });
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      },
      saveAll: function(cb) {
        if (cb == null) {
          cb = null;
        }
        return parallel(this.tabs.toArray(), (function(_this) {
          return function(tab, cb2) {
            return _this.save(tab, cb2);
          };
        })(this), function() {
          return typeof cb === "function" ? cb() : void 0;
        });
      },
      closeTab: function(tab) {
        if (tab == null) {
          tab = null;
        }
        if (tab == null) {
          tab = this.tabs.selectedTab();
        }
        if (!(tab != null ? tab.session : void 0)) {
          return;
        }
        return tab.tryClose();
      },
      onTabSelect: function(tab) {
        var _ref3;
        this.editor.setSession(tab.session);
        this.editor.focus();
        this.openEditorView();
        if ((_ref3 = this.completer) != null) {
          _ref3.disable();
        }
        return this.$('.tool-save').toggleClass('is-disabled', tab.get('saved'));
      },
      onTabSaved: function(tab) {
        if (tab === this.tabs.selectedTab()) {
          return this.$('.tool-save').toggleClass('is-disabled', tab.get('saved'));
        }
      },
      openFile: function(url, selector, index, property, select) {
        var file, tab, _ref3;
        if (select == null) {
          select = true;
        }
        tab = this.tabs.find(function(t) {
          return url === t.get('url');
        });
        if (!tab) {
          file = this.filebrowser.collection.find(function(f) {
            return url === f.get('url');
          });
          if (!file) {
            return;
          }
          tab = new Tab({
            name: file.get('name'),
            url: url,
            editor: this,
            file: file
          });
          tab.highlightSelectors(((_ref3 = this.highlightRules) != null ? _ref3[url] : void 0) ? this.highlightRules[url] : []);
          this.tabs.add(tab);
          tab.on('select', this.onTabSelect, this);
          tab.on('change:saved', this.onTabSaved, this);
          tab.on('selectorchange', (function(_this) {
            return function(sel) {
              return _this.trigger('change:focusedselector', sel);
            };
          })(this));
        }
        if (select) {
          tab.select();
        }
        if (selector) {
          tab.selectSelector(selector, index, property);
        }
        return _.delay((function(_this) {
          return function() {
            return _this.editor.focus();
          };
        })(this));
      },
      destroy: function() {
        var project, _ref3, _ref4;
        project = app.console.project;
        project.off('change:tabSize', this.renderTabSize, this);
        project.off('change:softTabs', this.renderTabSize, this);
        app.Settings.off('change:save_icon', this.renderSaveIcon, this);
        if ((_ref3 = this.filebrowser) != null) {
          _ref3.destroy();
        }
        if ((_ref4 = this.commands) != null) {
          _ref4.destroy();
        }
        return _.delay(((function(_this) {
          return function() {
            var _results;
            _results = [];
            while (_this.tabs.size()) {
              _results.push(_this.tabs.at(0).destroy());
            }
            return _results;
          };
        })(this)), 500);
      },
      formatCurrentFile: function() {
        var tab;
        tab = this.tabs.selectedTab();
        if (!tab) {
          return;
        }
        if (tab.get('url').match(/css$/)) {
          return require(['vendor/cssbeautify'], function() {
            var project, softTabs, tabSize, tabstring, value;
            project = app.console.project;
            value = tab.session.getValue();
            softTabs = project.get('softTabs');
            tabSize = project.get('tabSize');
            tabstring = softTabs ? Array(tabSize + 1).join(' ') : '\t';
            value = cssbeautify(value, {
              indent: tabstring
            });
            return tab.session.doc.setValue(value);
          });
        }
      }
    });
    return module.exports = EditorView;
  });

}).call(this);
