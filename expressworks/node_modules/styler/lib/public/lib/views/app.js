// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var AppView, MainView, Settings, SettingsList, _ref;
    require('vendor/link!css/app.css');
    MainView = require('lib/views/main');
    _ref = require('lib/models'), SettingsList = _ref.SettingsList, Settings = _ref.Settings;
    AppView = Backbone.View.extend({
      initialize: function() {
        return this.setElement(document.body);
      },
      $: function(cb) {
        if (this._ioLoaded) {
          return cb();
        }
        if (!this._cbQueue) {
          this._cbQueue = [];
        }
        return this._cbQueue.push(cb);
      },
      launch: function() {
        var blank, didadd, k, keys, newopt, onConnect, settings, v, _ref1, _ref2, _ref3;
        if (!((window.sessionStorage.getItem('_ignore_agent') === '1') || this.isSupportedAgent())) {
          require(['lib/views/warning-screen'], (function(_this) {
            return function(WarningScreen) {
              return new WarningScreen({
                name: 'warning_browser'
              });
            };
          })(this));
          return;
        }
        app.Projects.reset(__data.projects);
        app.Clients.reset(__data.clients);
        settings = new SettingsList;
        settings.reset(__data.settings);
        app.Settings = settings.at(0);
        blank = new Settings().toJSON();
        newopt = {};
        _.each(blank, function(v, k) {
          if (app.Settings.get(k) == null) {
            return newopt[k] = v;
          }
        });
        if (_.size(newopt)) {
          app.Settings.save(newopt);
        }
        keys = app.Settings.get('keyboard_shortcuts');
        didadd = false;
        _ref1 = blank.keyboard_shortcuts;
        for (k in _ref1) {
          v = _ref1[k];
          if (!keys[k]) {
            keys[k] = v;
            didadd = true;
          }
        }
        if (didadd) {
          app.Settings.save({
            keyboard_shortcuts: keys
          });
        }
        onConnect = (function(_this) {
          return function() {
            var cb, _i, _len, _ref2;
            tm('connected');
            if (_this._cbQueue) {
              _ref2 = _this._cbQueue;
              for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                cb = _ref2[_i];
                _.defer(cb);
              }
            }
            return _this._ioLoaded = true;
          };
        })(this);
        if ((_ref2 = app.socket) != null ? (_ref3 = _ref2.socket) != null ? _ref3.connected : void 0 : void 0) {
          onConnect();
        } else {
          app.socket.on('connect', onConnect);
        }
        app.socket.on('BackboneSync', Backbone.syncCallback);
        app.socket.on('reconnect', function() {
          return window.location.reload();
        });
        app.socket.on('disconnect', (function(_this) {
          return function() {
            return _.delay(function() {
              var _ref4;
              if ((_ref4 = app.console) != null) {
                _ref4.destroy();
              }
              return require(['lib/views/warning-screen'], function(WarningScreen) {
                return new WarningScreen({
                  name: 'disconnect'
                });
              });
            }, 200);
          };
        })(this));
        app.socket.emit('getRoot', function(r) {
          return app.root = r;
        });
        Backbone.history.start({
          pushState: true,
          root: '/'
        });
        return _.delay(function() {
          return require(['lib/views/warning-screen'], function() {});
        }, 2500);
      },
      openMain: function() {
        if (!this.mainView) {
          this.mainView = new MainView;
        }
        this.$el.css({
          backgroundColor: '#fff'
        }).empty().append(this.mainView.render().el);
        return document.title = 'Styler';
      },
      loadConsole: function(project, client) {
        var _ref1;
        if (((_ref1 = app.console) != null ? _ref1.el.parentNode : void 0) && app.console.project.id === project.id) {
          return app.console.loadClient(client);
        } else {
          return require(['lib/views/console'], (function(_this) {
            return function(ConsoleView) {
              var view;
              view = new ConsoleView({
                project: project,
                client: client
              });
              return _this.$el.css({
                backgroundColor: '#333'
              }).empty().append(view.render().el);
            };
          })(this));
        }
      },
      openConsole: function(sessionId) {
        var client, project, projectId;
        client = app.Clients.find(function(client) {
          return client.get('session_id') === sessionId;
        });
        if (client) {
          if (projectId = client.get('project')) {
            return this.loadConsole(app.Projects.get(projectId), client);
          } else {
            return require(['lib/views/newproject'], (function(_this) {
              return function(NewProjectView) {
                return _this.$(function() {
                  var view;
                  view = new NewProjectView({
                    client: client
                  });
                  _this.$el.css({
                    backgroundColor: '#fff'
                  }).empty().append(view.render().el);
                  return window.title = 'New Project';
                });
              };
            })(this));
          }
        } else {
          if (project = app.Projects.get(sessionId)) {
            return this.loadConsole(project, null);
          } else {
            return app.router.navigate('', {
              trigger: true
            });
          }
        }
      },
      editProject: function(projectId) {
        var client, project;
        project = app.Projects.get(projectId);
        client = project.getClients()[0] || null;
        return require(['lib/views/newproject'], (function(_this) {
          return function(NewProjectView) {
            var view, _ref1;
            if ((_ref1 = app.console) != null) {
              _ref1.destroy();
            }
            view = new NewProjectView({
              client: client,
              model: project
            });
            _this.$el.css({
              backgroundColor: '#fff'
            }).empty().append(view.render().el);
            return window.title = 'Edit project';
          };
        })(this));
      },
      showSettings: function() {
        return require(['lib/views/settings'], function(Settings) {
          return new Settings({
            model: app.Settings
          });
        });
      },
      isSupportedAgent: function() {
        var match;
        if (window.navigator.userAgent.match(/webkit/i)) {
          return true;
        }
        match = window.navigator.userAgent.match(/firefox\/([0-9]+)/i);
        return !!(match && parseInt(match[1], 10) >= 8);
      }
    });
    return module.exports = AppView;
  });

  if (window.nativeapp) {
    window.addEventListener('keydown', function(e) {
      if (e.keyCode === 82 && e.shiftKey && e.metaKey) {
        return window.location.reload();
      }
    }, true);
  }

}).call(this);
