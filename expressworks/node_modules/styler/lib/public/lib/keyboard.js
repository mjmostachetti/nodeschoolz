// Generated by CoffeeScript 1.7.1
(function() {
  define(function(require, exports, module) {
    var CommandManager, addCommandKeyListener, commands, createManager, dispatch, initialized, managers, onKeySettingsChange, tabIndex, ua;
    addCommandKeyListener = require('ace/lib/event').addCommandKeyListener;
    ua = require('ace/lib/useragent');
    CommandManager = require('ace/commands/command_manager').CommandManager;
    tabIndex = 0;
    commands = {};
    initialized = false;
    createManager = function() {
      return new CommandManager(ua.isMac ? 'mac' : 'win');
    };
    managers = {
      global: createManager()
    };
    onKeySettingsChange = function() {
      var command, keyCommands, keys, name, _results;
      keyCommands = app.Settings.get('keyboard_shortcuts');
      _results = [];
      for (name in keyCommands) {
        keys = keyCommands[name];
        command = commands[name];
        if (!command) {
          continue;
        }
        managers[command.scope].removeCommand(name);
        command.bindKey.mac = keys.mac;
        command.bindKey.win = keys.win || keys.mac;
        _results.push(managers[command.scope].addCommand(command));
      }
      return _results;
    };
    dispatch = function(scope, e, hashId, keyOrText) {
      var cmd;
      cmd = managers[scope].findKeyCommand(hashId, keyOrText);
      if (!cmd && scope !== 'global') {
        cmd = managers.global.findKeyCommand(hashId, keyOrText);
      }
      if (!cmd) {
        return;
      }
      managers[scope].exec(cmd);
      e.stopPropagation();
      return e.preventDefault();
    };
    exports.addKeyboardListener = function(scope, element, forcedTabIndex) {
      var setManager;
      if (forcedTabIndex == null) {
        forcedTabIndex = null;
      }
      setManager = element instanceof CommandManager;
      if (setManager) {
        return managers[scope] = element;
      } else {
        if (forcedTabIndex === null) {
          tabIndex++;
        } else {
          tabIndex = forcedTabIndex;
        }
        if (typeof element.setAttribute === "function") {
          element.setAttribute('tabIndex', tabIndex);
        }
        element.listenKey = _.bind(exports.listenKey, this, scope);
        addCommandKeyListener(element, _.bind(dispatch, this, scope));
        return managers[scope] = createManager();
      }
    };
    exports.listenKey = function(scope, name, opt) {
      var command, keyCommands;
      scope || (scope = 'global');
      if (!initialized) {
        app.Settings.bind('change:keyboard_shortcuts', onKeySettingsChange);
        initialized = true;
      }
      keyCommands = app.Settings.get('keyboard_shortcuts');
      if (keyCommands[name]) {
        opt.mac = keyCommands[name].mac;
        opt.win = keyCommands[name].win || opt.mac;
      }
      managers[scope].addCommand(command = {
        name: name,
        bindKey: {
          win: opt.win || opt.mac,
          mac: opt.mac,
          sender: scope
        },
        exec: opt.exec,
        scope: scope
      });
      if (keyCommands[name]) {
        return commands[name] = command;
      }
    };
    exports.formatKeyCommand = function(commandStr) {
      var parts;
      if (ua.isMac) {
        parts = _.map(commandStr.split('-'), function(part) {
          part = part.toLowerCase();
          switch (part) {
            case 'command':
              return '⌘';
            case 'alt':
              return '⌥';
            case 'ctrl':
              return '⌃';
            case 'shift':
              return '⇧';
            case 'tab':
              return '⇥';
            case 'return':
              return '⏎';
            case 'backspace':
              return '⌫';
            case 'right':
              return '→';
            case 'left':
              return '←';
            case 'up':
              return '↑';
            case 'down':
              return '↓';
            default:
              return (_.map(part.split(' '), function(p) {
                return p.charAt(0).toUpperCase() + p.slice(1);
              })).join(' ');
          }
        });
        return parts.join('');
      } else {
        return commandStr;
      }
    };
    return exports;
  });

}).call(this);
