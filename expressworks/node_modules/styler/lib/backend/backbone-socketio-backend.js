// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, existsSync, io, join, jsonstore, storage, writeFileSync, _, _ref;

  join = require("path").join;

  _ref = require("fs"), existsSync = _ref.existsSync, writeFileSync = _ref.writeFileSync;

  _ = require('underscore')._;

  Backbone = require('backbone');

  require('./../public/lib/backbone-socketio');

  jsonstore = require("./json-store");

  io = require("socket.io");

  jsonstore.file = join(global.homeDir, 'db.json');

  if (!existsSync(jsonstore.file)) {
    writeFileSync(jsonstore.file, "{}");
  }

  storage = jsonstore.read();

  Backbone.connector = {
    backends: {}
  };

  Backbone.connector.addClient = function(socket) {
    socket.on("serverSync", Backbone.serverSync);
    return socket.join("backbone");
  };

  Backbone.connector.connect = function(collection, store) {
    return Backbone.connector.backends[collection.backend] = new Backbone.Backend((store ? collection.backend : null));
  };

  Backbone.serverSync = function(method, name, model, options, success) {
    var action;
    action = options.action != null ? options.action : method;
    return Backbone.connector.backends[name][action](model, options, (function(_this) {
      return function(data) {
        var e;
        if (method === "read") {
          return success(data, options);
        } else {
          try {
            Backbone.syncCallback(name, method, data, options);
          } catch (_error) {
            e = _error;
            console.log(e);
          }
          success(data, options);
          return global.io.of('/console')["in"]('backbone').emit('BackboneSync', name, method, data, options);
        }
      };
    })(this));
  };

  Backbone.Backend = (function() {
    function Backend(storage_name) {
      this.storage_name = storage_name != null ? storage_name : "";
      this.col = [];
      if (this.storage_name) {
        this.col = storage[this.storage_name] || [];
      }
    }

    Backend.prototype.writeStorage = function() {
      if (this.storage_name) {
        storage[this.storage_name] = this.col;
        return jsonstore.save(storage);
      }
    };

    Backend.prototype.update = function(data, options, callback) {
      var el, i, _i, _len, _ref1;
      _ref1 = this.col;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        if (data.id === el.id) {
          this.col[i] = data;
          if (typeof callback === "function") {
            callback(this.col[i]);
          }
          this.writeStorage();
          return this.col[i];
        }
      }
    };

    Backend.prototype.create = function(data, options, callback) {
      data.id = Math.floor(Math.random() * 1e7);
      this.col.push(data);
      if (typeof callback === "function") {
        callback(data);
      }
      return this.writeStorage();
    };

    Backend.prototype.read = function(data, options, callback) {
      var item;
      if ((data != null ? data.id : void 0) != null) {
        item = _(this.col).detect(function(item) {
          return item.id === data.id;
        });
        return typeof callback === "function" ? callback(item) : void 0;
      } else {
        return typeof callback === "function" ? callback(this.col) : void 0;
      }
    };

    Backend.prototype["delete"] = function(data, options, callback) {
      var el, i, _i, _len, _ref1;
      _ref1 = this.col;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        el = _ref1[i];
        if (data.id === el.id) {
          this.col.splice(i, 1);
          if (typeof callback === "function") {
            callback(data);
          }
          this.writeStorage();
          return data;
        }
      }
    };

    return Backend;

  })();

  Backbone.Backend.extend = Backbone.Model.extend;

  module.exports = Backbone;

}).call(this);
