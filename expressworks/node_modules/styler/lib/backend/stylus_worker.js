// Generated by CoffeeScript 1.7.1
(function() {
  var Normalizer, fs, getStylusOutline, lastline, path, renderStylus, res, selectorstring, stylus, _, _parse;

  stylus = require("stylus");

  path = require("path");

  fs = require("fs");

  _ = require("underscore")._;

  stylus = require("stylus");

  Normalizer = require(require.resolve("stylus") + '/../lib/visitor/normalizer');

  process.on("message", function(msg) {
    var cb;
    cb = function(response) {
      return process.send({
        callbackId: msg.callbackId,
        response: response
      });
    };
    if (msg.task === 'getStylusOutline') {
      return getStylusOutline(msg.options, cb);
    } else if (msg.task === 'renderStylus') {
      return renderStylus(msg.path, msg.data, cb);
    }
  });

  selectorstring = function(node) {
    if (!node.segments.length) {
      return "";
    }
    return _.reduce(node.segments, function(s, v) {
      return s += v.toString();
    });
  };

  lastline = 0;

  res = {};

  _parse = function(nodes, parent, l) {
    var line, name, node, selector, _i, _len, _ref, _ref1;
    if (parent == null) {
      parent = null;
    }
    if (l == null) {
      l = 0;
    }
    if (parent == null) {
      parent = {
        name: [],
        child: [],
        line: l
      };
    }
    res[l] = 1;
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      node = nodes[_i];
      line = node.lineno;
      name = node.constructor.name;
      if (name === "Group") {
        if (res[line]) {
          continue;
        }
        parent.child.push(_parse(node.nodes, null, line));
      }
      if (name === "Selector") {
        selector = selectorstring(node);
        if (line < parent.line) {
          parent.line = line;
        }
        parent.name.push("" + selector);
        _parse((_ref = node.block) != null ? _ref.nodes : void 0, parent);
      }
      if (name === "Ident") {
        if (res[line]) {
          continue;
        }
        parent.child.push({
          name: [node.toString()],
          line: lastline + 1,
          ident: !((_ref1 = node.val) != null ? _ref1.block : void 0)
        });
      }
      if (line > lastline) {
        lastline = line;
      }
    }
    return parent;
  };

  getStylusOutline = function(options, cb) {
    var ast, compiler, css, data, err, evaluator, nodes, normalizer, opt, parser;
    opt = {
      filename: options.filename,
      imports: [path.dirname(require.resolve('stylus')) + '/lib/functions'],
      paths: [require("nib").path]
    };
    data = options.data.replace(/\s+$/, '\n');
    parser = new stylus.Parser(data, opt);
    try {
      stylus.nodes.filename = opt.filename;
      ast = parser.parse();
      lastline = 0;
      res = {};
      nodes = _parse(ast.nodes);
      evaluator = new stylus.Evaluator(ast, opt);
      ast = evaluator.evaluate();
      normalizer = new Normalizer(ast, opt);
      ast = normalizer.normalize();
      compiler = new stylus.Compiler(ast, opt);
      css = compiler.compile();
      return cb({
        nodes: nodes,
        css: options.getcss ? css : null
      });

      /*
       *failed try to parse out idents
      evaluator = new stylus.Evaluator(ast, opt)
      ast = evaluator.evaluate();
      scope = evaluator.currentScope
      for k,v of scope.locals
        console.log k, v
       */
    } catch (_error) {
      err = _error;
      return cb({
        nodes: {
          err: true,
          name: err.name,
          message: err.message,
          line: err.lineno || parser.lexer.lineno
        }
      });
    }
  };

  renderStylus = function(path, data, cb) {
    var e, options;
    try {
      options = {
        _imports: []
      };
      return stylus(data.replace(/\s+$/, '\n'), options).include(require("nib").path).set("filename", path).render(function(err, css) {
        return cb({
          err: err,
          css: css,
          imports: options._imports
        });
      });
    } catch (_error) {
      e = _error;
      return cb({
        err: true,
        css: "",
        imports: []
      });
    }
  };

}).call(this);
