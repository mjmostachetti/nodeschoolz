// Generated by CoffeeScript 1.7.1
(function() {
  var Clients, Projects, Settings, fs, getKeyCommands, io, isAllowedIP, log, useragent, _, _ref;

  fs = require("fs");

  _ = require("underscore")._;

  useragent = require('useragent');

  _ref = require("./data"), Projects = _ref.Projects, Clients = _ref.Clients, Settings = _ref.Settings;

  isAllowedIP = require('./utils').isAllowedIP;

  log = require('./log');

  io = global.io;

  exports.callClient = function(clientId, method, params, cb) {
    var client, id, _ref1;
    if (params == null) {
      params = {};
    }
    if (cb == null) {
      cb = function() {};
    }
    client = Clients.get(clientId);
    if (method === 'focus') {
      id = params.title || clientId;
      return io.of('/info').emit('focus', id);
    } else {
      return client != null ? (_ref1 = client.socket) != null ? _ref1.emit("callclient", method, params, function(response) {
        return cb(response);
      }) : void 0 : void 0;
    }
  };

  getKeyCommands = function() {
    var key, keyboard_shortcuts, keys, _i, _len, _ref1;
    keyboard_shortcuts = Settings.at(0).get("keyboard_shortcuts");
    keys = {};
    _ref1 = ["toggle-window-mode", "start-inspector-mode", "toggle-iframe-container"];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      key = _ref1[_i];
      keys[key] = keyboard_shortcuts[key]["export"];
    }
    return keys;
  };

  io.of("/info").on('connection', function(socket) {
    if (!isAllowedIP(global.allowed, socket.handshake.address.address)) {
      return socket.disconnect();
    }
    return socket.on('checkproject', function(url, cb) {
      return cb(!!Projects.find(function(p) {
        return 0 === url.indexOf(p.get("baseurl"));
      }));
    });
  });

  io.of("/clients").on('connection', function(socket) {
    var client, onClientRegistred;
    if (!isAllowedIP(global.allowed, socket.handshake.address.address)) {
      return socket.disconnect();
    }
    client = null;
    onClientRegistred = function(_client) {
      var projectId, sendBaseURL;
      client = _client;
      client.socket = socket;
      socket.emit('registered', client.id, client.get('session_id'), getKeyCommands());
      projectId = client.get("project");
      if (projectId) {
        sendBaseURL = function() {
          return socket.emit('baseurl', Projects.get(projectId).get('baseurl'));
        };
        Projects.get(projectId).bind('change:baseurl', sendBaseURL);
        sendBaseURL();
      }
      return log.info({
        id: client.id,
        project: projectId,
        url: client.get('url', 'Client connected')
      });
    };
    socket.on("register", function(info) {
      var agent, agenttype, clientData, project, projectId, sessionId;
      projectId = 0;
      if (info.url != null) {
        project = Projects.find(function(project) {
          return (info.url.indexOf(project.get('baseurl'))) === 0;
        });
        if (project) {
          projectId = project.id;
        }
      }
      if (projectId) {
        (require("./console")).getConsole(projectId);
      }
      sessionId = parseInt(info.sessionId, 10);
      client = Clients.find(function(o) {
        return o.get('session_id') === sessionId;
      });
      if (client) {
        if (client.get("project") !== projectId || client.get("connected")) {
          client = null;
          sessionId = ~~(Math.random() * 1e8);
        }
      }
      agent = useragent.parse(info.useragent);
      agenttype = (function() {
        switch ((agent.family.split(" "))[0].toLowerCase()) {
          case "chrome":
            return "chrome";
          case "firefox":
            return "firefox";
          case "safari":
            return "safari";
          case "opera":
            return "opera";
          case "ie":
            return "ie";
          case "ipad":
            return "ipad";
          case "iphone":
          case "ipod":
            return "iphone";
          case "android":
            return "android";
          case "blackberry":
            return "blackberry";
          default:
            return "unknown";
        }
      })();
      clientData = {
        name: info.name,
        project: projectId,
        session_id: sessionId,
        url: info.url,
        useragent: agent.toString(),
        css: info.css,
        embed: info.embed,
        connected: true,
        agenttype: agenttype,
        lastTime: (new Date()).getTime()
      };
      if (client) {
        clearTimeout(client._clientRemoveTimeout);
        return client.save(clientData, {
          success: onClientRegistred,
          wait: true
        });
      } else {
        return Clients.create(clientData, {
          success: onClientRegistred,
          wait: true
        });
      }
    });
    socket.on("change:stylesheets", function(stylesheets) {
      var current, sheet;
      if (!client) {
        return;
      }
      current = client.get("css");
      return client.save({
        css: current.concat((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = stylesheets.length; _i < _len; _i++) {
            sheet = stylesheets[_i];
            _results.push(sheet);
          }
          return _results;
        })())
      });
    });
    socket.on("clientmessage", function(name, params) {
      var projectId, _ref1;
      if (!client) {
        return;
      }
      projectId = client.get('project');
      return (_ref1 = (require("./console")).getConsole(projectId)) != null ? _ref1.onClientMessage(name, params) : void 0;
    });
    return socket.on("disconnect", function() {
      if (!client) {
        return;
      }
      client.save({
        connected: false
      });
      client._clientRemoveTimeout = setTimeout((function() {
        return client.destroy();
      }), 4e3);
      return log.debug({
        id: client.id
      }, 'Client disconnected');
    });
  });

}).call(this);
